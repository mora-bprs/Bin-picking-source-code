
first_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c5  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f0  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 91 00 	call	0x122	; 0x122 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#define STEP_PIN PD2 // Define STEP_PIN as PD2
#define DIR_PIN PD4  // Define DIR_PIN as PD5

void setup() {
	// Set STEP_PIN and DIR_PIN as output
	DDRD |= (1 << STEP_PIN) | (1 << DIR_PIN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	84 61       	ori	r24, 0x14	; 20
  84:	8a b9       	out	0x0a, r24	; 10
  86:	08 95       	ret

00000088 <loop>:
}

void loop() {
	// Set direction to HIGH
	PORTD |= (1 << DIR_PIN);
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	8b b9       	out	0x0b, r24	; 11
	
	// Make 800 pulses (one full cycle rotation)
	for (int x = 0; x < 200; x++) {
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	14 c0       	rjmp	.+40     	; 0xbc <loop+0x34>
		PORTD |= (1 << STEP_PIN);  // Set STEP_PIN HIGH
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	84 60       	ori	r24, 0x04	; 4
  98:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	87 eb       	ldi	r24, 0xB7	; 183
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <loop+0x16>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <loop+0x1c>
  a4:	00 00       	nop
		_delay_us(220);           // Wait 1000 microseconds
		PORTD &= ~(1 << STEP_PIN); // Set STEP_PIN LOW
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	87 eb       	ldi	r24, 0xB7	; 183
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <loop+0x28>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <loop+0x2e>
  b6:	00 00       	nop
void loop() {
	// Set direction to HIGH
	PORTD |= (1 << DIR_PIN);
	
	// Make 800 pulses (one full cycle rotation)
	for (int x = 0; x < 200; x++) {
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	28 3c       	cpi	r18, 0xC8	; 200
  be:	31 05       	cpc	r19, r1
  c0:	4c f3       	brlt	.-46     	; 0x94 <loop+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	9f ef       	ldi	r25, 0xFF	; 255
  c4:	29 e6       	ldi	r18, 0x69	; 105
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	91 50       	subi	r25, 0x01	; 1
  ca:	20 40       	sbci	r18, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <loop+0x40>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <loop+0x4a>
  d2:	00 00       	nop
		_delay_us(220);           // Wait 1000 microseconds
	}
	_delay_ms(1000); // One second delay

	// Set direction to LOW
	PORTD &= ~(1 << DIR_PIN);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8f 7e       	andi	r24, 0xEF	; 239
  d8:	8b b9       	out	0x0b, r24	; 11
	
	// Make 800 pulses (another full cycle rotation)
	for (int x = 0; x < 200; x++) {
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	14 c0       	rjmp	.+40     	; 0x108 <loop+0x80>
		PORTD |= (1 << STEP_PIN);  // Set STEP_PIN HIGH
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	87 eb       	ldi	r24, 0xB7	; 183
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <loop+0x62>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <loop+0x68>
  f0:	00 00       	nop
		_delay_us(220);           // Wait 1000 microseconds
		PORTD &= ~(1 << STEP_PIN); // Set STEP_PIN LOW
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	87 eb       	ldi	r24, 0xB7	; 183
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <loop+0x74>
 100:	00 c0       	rjmp	.+0      	; 0x102 <loop+0x7a>
 102:	00 00       	nop

	// Set direction to LOW
	PORTD &= ~(1 << DIR_PIN);
	
	// Make 800 pulses (another full cycle rotation)
	for (int x = 0; x < 200; x++) {
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	28 3c       	cpi	r18, 0xC8	; 200
 10a:	31 05       	cpc	r19, r1
 10c:	4c f3       	brlt	.-46     	; 0xe0 <loop+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	9f ef       	ldi	r25, 0xFF	; 255
 110:	29 e6       	ldi	r18, 0x69	; 105
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	91 50       	subi	r25, 0x01	; 1
 116:	20 40       	sbci	r18, 0x00	; 0
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <loop+0x8c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <loop+0x96>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <main>:
	}
	_delay_ms(1000); // One second delay
}

int main(void) {
	setup();  // Call the setup function
 122:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	while (1) {
		loop(); // Continuously call the loop function
 126:	0e 94 44 00 	call	0x88	; 0x88 <loop>
 12a:	fd cf       	rjmp	.-6      	; 0x126 <main+0x4>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
