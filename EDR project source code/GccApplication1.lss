
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00002fca  0000305e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047e  008001b0  008001b0  0000310e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000310e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002d10  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005bdee  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002617  00000000  00000000  00061caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000102da  00000000  00000000  000642c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00011b04  00000000  00000000  0007459c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000153d9  00000000  00000000  000860a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0006e86e  00000000  00000000  0009b479  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002bd8  00000000  00000000  00109ce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__ctors_end>
       4:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
       8:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
       c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      10:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      14:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      18:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      1c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      20:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      24:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      28:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      2c:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_11>
      30:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      34:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      38:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      3c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      40:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      44:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      48:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      4c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      50:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      54:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      58:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      5c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      60:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>
      64:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000a3 <u8g2_font_t0_14b_tf>:
      a3:	bf 00 03 03 03 04 03 05 04 07 0d 00 fe 09 fe 0b     ................
      b3:	ff 01 7f 02 fb 09 53 20 05 00 ee 07 21 07 d2 c3     ......S ....!...
      c3:	c7 13 01 22 08 9d de 87 84 45 00 23 0f ce c2 4f     ...".....E.#...O
      d3:	28 cb a1 12 8a 1c 2a a1 2c 00 24 12 e6 ba 5f 34     (.....*.,.$..._4
      e3:	76 89 4c 62 c3 59 64 12 b9 45 63 00 25 10 ce c2     v.Lb.Yd..Ec.%...
      f3:	4f 8c 32 49 a1 49 62 94 94 09 2d 02 26 10 ce c2     O.2I.Ib...-.&...
     103:	97 4c 12 92 c4 64 93 49 64 a2 49 22 27 08 23 db     .L...d.Id.I"'.#.
     113:	8f 84 12 02 28 0c 64 bf 97 44 24 11 e9 4d 24 13     ....(.d..D$..M$.
     123:	29 0d 64 bf 87 4c 24 13 e9 45 24 11 01 2a 0e be     ).d..L$..E$..*..
     133:	c6 5f 48 92 52 12 55 52 44 31 00 2b 0b b6 c6 97     ._H.R.URD1.+....
     143:	50 74 28 09 45 00 2c 08 23 bb 8f 84 12 02 2d 07     Pt(.E.,.#.....-.
     153:	96 ce c7 a1 00 2e 06 92 c3 07 01 2f 0e e6 be a7     .........../....
     163:	9a 50 4d 28 13 aa 09 85 00 30 0c ce c2 97 8c 22     .PM(.....0....."
     173:	e2 49 42 13 01 31 0a 4c c3 97 e4 10 11 e9 01 32     .IB..1.L.......2
     183:	0d ce c2 0f 45 44 12 ca d4 62 07 03 33 0e ce c2     ....ED...b..3...
     193:	0f 45 44 12 8a a6 24 92 84 02 34 0f ce c2 9f 6c     .ED...$...4....l
     1a3:	29 22 8a 48 42 12 9b 50 02 35 0e ce c2 0f 89 14     )".HB..P.5......
     1b3:	25 85 84 24 92 84 02 36 0e ce c2 d7 48 26 14 56     %..$...6....H&.V
     1c3:	44 4c 12 0a 00 37 0d ce c2 c7 c1 16 94 09 65 42     DL...7........eB
     1d3:	35 00 38 10 ce c2 0f 45 44 92 48 42 a4 48 89 24     5.8....ED.HB.H.$
     1e3:	a1 00 39 0d ce c2 0f 45 c4 24 29 aa 89 46 00 3a     ..9....E.$)..F.:
     1f3:	07 b2 c3 07 91 00 3b 09 43 bb 8f ba 84 12 02 3c     ......;.C......<
     203:	08 ce c2 a7 4c 57 1d 3d 08 ae ca c7 a1 7c 28 3e     ....LW.=.....|(>
     213:	09 ce c2 87 54 37 1d 01 3f 0f d6 c2 0f 45 44 12     ....T7..?....ED.
     223:	ca 14 e5 30 a1 08 00 40 0f ce c2 d7 48 42 89 48     ...0...@....HB.H
     233:	2a 21 89 65 22 25 41 0e ce c2 97 50 8d 14 11 45     *!.e"%A....P...E
     243:	24 b7 99 00 42 0d ce c2 47 45 c4 14 a9 88 98 2e     $...B...GE......
     253:	00 43 0c ce c2 d7 48 42 d4 55 22 9a 00 44 0c ce     .C....HB.U"..D..
     263:	c2 07 49 14 11 f1 29 42 02 45 0e ce c2 c7 21 36     ..I...)B.E....!6
     273:	14 45 2a a2 88 50 76 46 0f ce c2 c7 21 36 14 45     .E*..PvF....!6.E
     283:	2a a2 88 50 11 00 47 0d ce c2 d7 48 42 54 29 91     *..P..G....HBT).
     293:	24 4a 04 48 0b ce c2 87 88 d3 61 c4 49 00 49 09     $J.H......a.I.I.
     2a3:	ce c2 87 49 a8 4f 06 4a 0b ce c2 17 4d a8 8b 4e     ...I.O.J....M..N
     2b3:	23 00 4b 0e ce c2 87 88 14 91 84 98 24 3a 91 04     #.K.........$:..
     2c3:	4c 08 ce c2 87 50 bf 1d 4d 0f ce c2 47 70 74 38     L....P..M...Gpt8
     2d3:	44 22 93 c8 6c 4d 00 4e 0c ce c2 87 8c 44 92 e8     D"..lM.N.....D..
     2e3:	c4 36 13 4f 0b ce c2 0f 45 c4 4f 12 0a 00 50 0b     .6.O....E.O...P.
     2f3:	ce c2 47 45 c4 74 11 6a 04 51 0d de ba 0f 45 c4     ..GE.t.j.Q....E.
     303:	53 85 32 a1 4a 03 52 0e ce c2 47 45 c4 74 91 84     S.2.J.R...GE.t..
     313:	24 4a 24 01 53 0e ce c2 0f 45 44 1c 12 87 24 09     $J$.S....ED...$.
     323:	05 00 54 0b ce c2 c7 45 12 12 ea 13 00 55 0a ce     ..T....E.....U..
     333:	c2 87 88 3f 49 28 00 56 10 ce c2 87 6c 16 d1 12     ...?I(.V....l...
     343:	92 c4 66 42 69 08 00 57 10 ce c2 87 6c 4b 64 12     ..fBi..W....lKd.
     353:	b9 90 24 21 49 04 00 58 0f ce c2 87 88 24 91 84     ..$!I..X.....$..
     363:	86 c2 51 44 89 24 59 0c ce c2 87 88 24 91 84 86     ..QD.$Y.....$...
     373:	7a 02 5a 0b ce c2 c7 4d 51 a6 28 93 1d 5b 08 e5     z.Z....MQ.(..[..
     383:	be c7 4d ff 56 5c 0e e6 be 87 50 2a 54 15 4a 85     ..M.V\....P*T.J.
     393:	aa 42 01 5d 08 e5 be 47 4d ff 76 5e 08 9e da 97     .B.]...GM.v^....
     3a3:	8c 22 12 5f 07 96 be c7 a1 00 60 08 23 db 87 44     ."._......`.#..D
     3b3:	24 0a 61 0c be c2 0f 49 22 94 9c 48 92 02 62 0e     $.a....I"..H..b.
     3c3:	d6 c2 87 50 8b 64 42 62 aa 50 24 00 63 0b be c2     ...P.dBb.P$.c...
     3d3:	0f 45 44 d4 24 a1 00 64 0c d6 c2 a7 16 09 a5 c4     .ED.$..d........
     3e3:	65 a2 00 65 0d be c2 0f 45 44 3a 0c 45 12 0a 00     e..e....ED:.E...
     3f3:	66 0d d6 c2 df 48 12 12 8a 4c 42 9d 00 67 0c ce     f....H...LB..g..
     403:	ba cf 89 cb 44 91 24 a1 00 68 0c d6 c2 87 50 8b     ....D.$..h....P.
     413:	64 42 e2 49 00 69 0b d6 c2 97 50 0e 1a ea c9 00     dB.I.i....P.....
     423:	6a 0c e5 ba 9f 32 4d 6f 14 c9 04 00 6b 0f d6 c2     j....2Mo....k...
     433:	87 50 13 29 22 09 91 24 4a 24 01 6c 08 d6 c2 cf     .P.)"..$J$.l....
     443:	50 7f 32 6d 0f be c2 87 44 72 b8 44 26 91 49 64     P.2m....Dr.D&.Id
     453:	92 00 6e 0a be c2 87 44 32 21 f1 24 6f 0a be c2     ..n....D2!.$o...
     463:	0f 45 c4 93 84 02 70 0e ce ba 87 44 32 21 31 55     .E....p....D2!1U
     473:	28 8a 42 00 71 0b ce ba 8f 84 52 e2 32 51 54 72     (.B.q.....R.2QTr
     483:	0a be c2 c7 44 52 11 ea 06 73 0b be c2 0f 45 44     ....DR...s....ED
     493:	65 92 50 00 74 0c ce c2 8f 50 56 12 ea 22 9a 00     e.P.t....PV.."..
     4a3:	75 09 be c2 87 88 2f 13 05 76 0d be c2 87 6c 16     u...../..v....l.
     4b3:	d1 12 9b 49 43 00 77 10 be c2 87 6c 12 99 44 26     ...IC.w....l..D&
     4c3:	91 8b 24 24 89 00 78 0d be c2 87 88 14 1a 0a 47     ..$$..x........G
     4d3:	21 92 00 79 11 ce ba 87 6c 16 91 84 24 b1 99 34     !..y....l...$..4
     4e3:	14 11 cd 00 7a 09 be c2 c7 69 a6 6d 74 7b 0c e6     ....z....i.mt{..
     4f3:	be df 48 a8 69 36 15 6a 1d 7c 07 e2 bf c7 87 01     ..H.i6.j.|......
     503:	7d 0d e6 be c7 54 a8 75 36 12 6a 9a 01 7e 0a a6     }....T.u6.j..~..
     513:	da 8f a8 22 29 49 00 a0 08 a6 be 47 50 78 30 a1     ...")I.....GPx0.
     523:	07 d2 bb 07 e9 70 a2 10 ce be 6f 84 22 a2 84 24     .....p....o."..$
     533:	a1 d9 44 42 0a 02 a3 0c ce c2 d7 48 a2 1b 4d 18     ..DB.......H..M.
     543:	3b 18 a4 0c b6 c6 87 e8 10 09 65 39 84 04 a5 0e     ;.........e9....
     553:	ce c2 87 88 49 42 31 89 4c 42 11 00 a6 08 e2 bf     ....IB1.LB......
     563:	c7 61 78 18 a7 10 dd ba cf 44 25 36 8a e8 12 9a     .ax......D%6....
     573:	45 54 26 00 a8 07 95 e2 87 84 22 a9 13 57 be d7     ET&......."..W..
     583:	2c 25 24 51 92 c4 24 31 89 48 25 2d 36 02 aa 0b     ,%$Q..$1.H%-6...
     593:	c5 ca cf 50 62 91 50 0f 03 ab 09 a6 ca 8f 84 a2     ...Pb.P.........
     5a3:	49 22 ac 08 a6 c6 c7 a1 a8 00 ad 07 14 cf c7 21     I".............!
     5b3:	00 ae 14 57 be d7 2c 25 22 92 4c 24 29 4a 92 89     ...W..,%".L$)J..
     5c3:	24 b7 d8 08 00 af 07 96 e2 c7 a1 00 b0 0a a5 da     $...............
     5d3:	cf 44 42 91 4c 00 b1 0c c6 c2 97 50 74 28 09 45     .DB.L......Pt(.E
     5e3:	87 02 b2 0b bd d2 cf 44 4d 24 8a 1d 06 b3 0c bd     .......DM$......
     5f3:	d2 cf 44 4d 24 a4 48 26 00 b4 08 24 db 97 44 29     ..DM$.H&...$..D)
     603:	06 b5 0c ce ba 87 88 a7 c3 24 32 14 02 b6 10 ce     .........$2.....
     613:	c2 cf a1 12 a9 68 8a 88 22 a2 88 28 22 b7 06 92     .....h.."..("...
     623:	cf 07 01 b8 08 24 bb 8f 4c 54 01 b9 07 3b d3 4f     .....$..LT...;.O
     633:	45 0f ba 0b c5 ca cf 44 c2 22 19 1f 06 bb 0b a6     E......D."......
     643:	ca 87 44 24 51 a1 48 00 bc 13 ee ba 8f 6c a8 29     ..D$Q.H......l.)
     653:	52 19 49 64 a3 88 28 22 aa 49 00 bd 11 ee ba 8f     R.Id..(".I......
     663:	6c a8 45 42 99 45 46 12 a1 48 56 29 be 15 ee ba     l.EB.EF..HV)....
     673:	cf 48 22 93 4a 24 93 ca 48 22 1b 45 44 11 51 4d     .H".J$..H".ED.QM
     683:	02 bf 0f d6 ba 97 50 0e 13 ca 14 45 24 09 05 00     ......P....E$...
     693:	c0 10 de c2 c7 54 0e 13 ca 48 11 51 44 72 9b 09     .....T...H.QDr..
     6a3:	c1 10 de c2 df 48 0e 13 ca 48 11 51 44 72 9b 09     .....H...H.QDr..
     6b3:	c2 11 de c2 d7 48 22 87 08 65 a4 88 28 22 b9 cd     .....H"..e..("..
     6c3:	04 c3 10 de c2 8f 64 1d 24 94 91 22 a2 88 e4 36     ......d.$.."...6
     6d3:	13 c4 10 de c2 8f ee 10 a1 8c 14 11 45 24 b7 99     ............E$..
     6e3:	00 c5 10 de c2 97 4c 12 13 aa 91 22 a2 88 e4 36     ......L...."...6
     6f3:	13 c6 11 4f c2 57 69 38 8b c8 22 94 88 a8 14 12     ...O.Wi8..".....
     703:	85 08 c7 0d de ba d7 48 42 d4 55 22 9a a9 01 c8     .......HB.U"....
     713:	0f de c2 c7 54 0e 39 c4 86 15 51 44 28 3b c9 0f     ....T.9...QD(;..
     723:	de c2 df 48 0e 39 c4 86 15 51 44 28 3b ca 0f de     ...H.9...QD(;...
     733:	c2 d7 48 22 3e c4 86 15 51 44 28 3b cb 0e de c2     ..H">...QD(;....
     743:	8f ce 87 d8 b0 22 8a 08 65 07 cc 0b de c2 c7 54     ....."..e......T
     753:	0e 31 09 f5 64 cd 0b de c2 df 48 0e 31 09 f5 64     .1..d.....H.1..d
     763:	ce 0b de c2 d7 48 22 36 09 f5 64 cf 0a de c2 8f     .....H"6..d.....
     773:	ce 26 a1 9e 0c d0 11 4f c2 0f 4d 14 52 11 59 94     .&.....O..M.R.Y.
     783:	24 22 89 28 44 02 d1 0d de c2 8f 64 5d 46 22 49     $".(D......d]F"I
     793:	74 62 13 d2 0d de c2 c7 54 0e a2 88 f8 24 a1 00     tb......T....$..
     7a3:	d3 0d de c2 df 48 0e a2 88 f8 24 a1 00 d4 0d de     .....H....$.....
     7b3:	c2 d7 48 22 a7 88 f8 24 a1 00 d5 0d de c2 8f 64     ..H"...$.......d
     7c3:	1d 42 11 f1 49 42 01 d6 0c de c2 8f ee 14 11 9f     .B..IB..........
     7d3:	24 14 00 d7 0b ae ca 87 48 42 93 51 44 02 d8 10     $.......HB.QD...
     7e3:	de be 6f 84 22 a2 54 0e 95 0a 49 42 89 02 d9 0c     ..o.".T...IB....
     7f3:	de c2 c7 54 0e 11 f1 93 84 02 da 0c de c2 df 48     ...T...........H
     803:	0e 11 f1 93 84 02 db 0c de c2 d7 48 22 16 f1 93     ...........H"...
     813:	84 02 dc 0b de c2 8f ce 22 7e 92 50 00 dd 0f de     ........"~.P....
     823:	c2 df 48 0e 11 91 24 92 d0 50 27 00 de 0d ce c2     ..H...$..P'.....
     833:	87 50 58 11 31 5d 84 42 00 df 0e d6 c2 cf 48 a2     .PX.1].B......H.
     843:	4b 48 a2 c4 8b 04 00 e0 0f de c2 8f 54 1a 07 91     KH..........T...
     853:	24 42 c9 89 24 29 e1 0f de c2 a7 4c 18 07 91 24     $B..$).....L...$
     863:	42 c9 89 24 29 e2 0f de c2 97 8c 94 0e 21 49 84     B..$)........!I.
     873:	92 13 49 52 e3 10 de c2 57 4a 25 14 87 90 24 42     ..IR....WJ%...$B
     883:	c9 89 24 29 e4 0d d6 c2 8f ee 24 89 50 72 22 49     ..$)......$.Pr"I
     893:	0a e5 10 de c2 97 4c 12 93 83 48 12 a1 e4 44 92     ......L...H...D.
     8a3:	14 e6 0e be c2 cf 41 12 92 44 2c a2 88 e4 00 e7     ......A..D,.....
     8b3:	0c ce ba 0f 45 44 d4 24 a1 a9 01 e8 10 de c2 8f     ....ED.$........
     8c3:	54 1a 07 51 44 a4 c3 50 24 a1 00 e9 10 de c2 a7     T..QD..P$.......
     8d3:	4c 18 07 51 44 a4 c3 50 24 a1 00 ea 10 de c2 97     L..QD..P$.......
     8e3:	8c 94 0e a1 88 48 87 a1 48 42 01 eb 0e d6 c2 8f     .....H..HB......
     8f3:	ee 14 11 e9 30 14 49 28 00 ec 0b de c2 8f 54 1a     ....0.I(......T.
     903:	07 0d f5 64 ed 0b de c2 9f 62 1c 36 d4 93 01 ee     ...d.....b.6....
     913:	0c de c2 97 8c 94 0e 19 ea c9 00 ef 0b d6 c2 87     ................
     923:	44 3b 64 a8 27 03 f0 10 d6 c2 87 44 34 92 04 47     D;d.'......D4..G
     933:	12 12 27 09 05 00 f1 0e de c2 57 4a 25 14 97 48     ..'.......WJ%..H
     943:	26 24 9e 04 f2 0e de c2 8f 54 1a 07 51 44 3c 49     &$.......T..QD<I
     953:	28 00 f3 0e de c2 a7 4c 18 07 51 44 3c 49 28 00     (......L..QD<I(.
     963:	f4 0e de c2 97 8c 94 0e a1 88 78 92 50 00 f5 0f     ..........x.P...
     973:	de c2 57 4a 25 14 87 50 44 3c 49 28 00 f6 0c d6     ..WJ%..PD<I(....
     983:	c2 8f ee 14 11 4f 12 0a 00 f7 0d c6 c2 97 50 0e     .....O........P.
     993:	39 d4 21 42 11 00 f8 0e ce be 6f 84 22 a2 1c 2a     9.!B......o."..*
     9a3:	24 09 25 0a f9 0c de c2 8f 54 1a 87 88 f8 32 51     $.%......T....2Q
     9b3:	fa 0c de c2 a7 4c 18 87 88 f8 32 51 fb 0c de c2     .....L....2Q....
     9c3:	97 8c 94 2e e2 cb 44 01 fc 0a d6 c2 8f ce 22 be     ......D.......".
     9d3:	4c 14 fd 15 ee ba a7 4c 18 87 c8 66 11 49 48 12     L......L...f.IH.
     9e3:	9b 49 43 11 d1 0c 00 fe 0f e6 ba 87 50 8b 64 42     .IC.........P.dB
     9f3:	62 aa 50 14 85 00 ff 12 e6 ba 8f ce b2 59 44 12     b.P..........YD.
     a03:	92 c4 66 d2 50 44 34 03 00 00 00 04 ff ff 00 00     ..f.PD4.........
	...

00000a14 <__ctors_end>:
     a14:	11 24       	eor	r1, r1
     a16:	1f be       	out	0x3f, r1	; 63
     a18:	cf ef       	ldi	r28, 0xFF	; 255
     a1a:	d8 e0       	ldi	r29, 0x08	; 8
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	cd bf       	out	0x3d, r28	; 61

00000a20 <__do_copy_data>:
     a20:	11 e0       	ldi	r17, 0x01	; 1
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b1 e0       	ldi	r27, 0x01	; 1
     a26:	ea ec       	ldi	r30, 0xCA	; 202
     a28:	ff e2       	ldi	r31, 0x2F	; 47
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__do_copy_data+0x10>
     a2c:	05 90       	lpm	r0, Z+
     a2e:	0d 92       	st	X+, r0
     a30:	a0 3b       	cpi	r26, 0xB0	; 176
     a32:	b1 07       	cpc	r27, r17
     a34:	d9 f7       	brne	.-10     	; 0xa2c <__do_copy_data+0xc>

00000a36 <__do_clear_bss>:
     a36:	26 e0       	ldi	r18, 0x06	; 6
     a38:	a0 eb       	ldi	r26, 0xB0	; 176
     a3a:	b1 e0       	ldi	r27, 0x01	; 1
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <.do_clear_bss_start>

00000a3e <.do_clear_bss_loop>:
     a3e:	1d 92       	st	X+, r1

00000a40 <.do_clear_bss_start>:
     a40:	ae 32       	cpi	r26, 0x2E	; 46
     a42:	b2 07       	cpc	r27, r18
     a44:	e1 f7       	brne	.-8      	; 0xa3e <.do_clear_bss_loop>
     a46:	0e 94 01 11 	call	0x2202	; 0x2202 <main>
     a4a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <_exit>

00000a4e <__bad_interrupt>:
     a4e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a52 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     a56:	dc 01       	movw	r26, r24
     a58:	ed 91       	ld	r30, X+
     a5a:	fc 91       	ld	r31, X
     a5c:	11 97       	sbiw	r26, 0x01	; 1
     a5e:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     a60:	92 96       	adiw	r26, 0x22	; 34
     a62:	0d 91       	ld	r16, X+
     a64:	1c 91       	ld	r17, X
     a66:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     a68:	62 9f       	mul	r22, r18
     a6a:	b0 01       	movw	r22, r0
     a6c:	11 24       	eor	r1, r1
  offset *= 8;
     a6e:	66 0f       	add	r22, r22
     a70:	77 1f       	adc	r23, r23
     a72:	66 0f       	add	r22, r22
     a74:	77 1f       	adc	r23, r23
     a76:	66 0f       	add	r22, r22
     a78:	77 1f       	adc	r23, r23
  ptr += offset;
     a7a:	06 0f       	add	r16, r22
     a7c:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <u8x8_DrawTile>
}
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     a98:	dc 01       	movw	r26, r24
     a9a:	94 96       	adiw	r26, 0x24	; 36
     a9c:	fc 90       	ld	r15, X
     a9e:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     aa0:	95 96       	adiw	r26, 0x25	; 37
     aa2:	dc 91       	ld	r29, X
     aa4:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     aa6:	ed 91       	ld	r30, X+
     aa8:	fc 91       	ld	r31, X
     aaa:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     aac:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     aae:	4d 2f       	mov	r20, r29
     ab0:	6c 2f       	mov	r22, r28
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 29 05 	call	0xa52	; 0xa52 <u8g2_send_tile_row>
    src_row++;
     ab8:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     aba:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     abc:	cf 15       	cp	r28, r15
     abe:	10 f4       	brcc	.+4      	; 0xac4 <u8g2_send_buffer+0x3a>
     ac0:	de 15       	cp	r29, r14
     ac2:	a8 f3       	brcs	.-22     	; 0xaae <u8g2_send_buffer+0x24>
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     ad2:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     ad4:	a0 81       	ld	r26, Z
     ad6:	b1 81       	ldd	r27, Z+1	; 0x01
     ad8:	50 96       	adiw	r26, 0x10	; 16
     ada:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     adc:	44 a1       	ldd	r20, Z+36	; 0x24
     ade:	94 9f       	mul	r25, r20
     ae0:	a0 01       	movw	r20, r0
     ae2:	11 24       	eor	r1, r1
  cnt *= 8;
     ae4:	44 0f       	add	r20, r20
     ae6:	55 1f       	adc	r21, r21
     ae8:	44 0f       	add	r20, r20
     aea:	55 1f       	adc	r21, r21
     aec:	44 0f       	add	r20, r20
     aee:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	82 a1       	ldd	r24, Z+34	; 0x22
     af6:	93 a1       	ldd	r25, Z+35	; 0x23
     af8:	0e 94 27 12 	call	0x244e	; 0x244e <memset>
     afc:	08 95       	ret

00000afe <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     b04:	0e 94 45 05 	call	0xa8a	; 0xa8a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     b08:	ce 01       	movw	r24, r28
     b0a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <u8x8_RefreshDisplay>
}
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     b14:	28 e0       	ldi	r18, 0x08	; 8
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
  return buf;
  #endif
}
     b1a:	82 eb       	ldi	r24, 0xB2	; 178
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	08 95       	ret

00000b20 <u8g2_Setup_ssd1306_128x64_alt0_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_vcomh0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_ssd1306_128x64_alt0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	1f 92       	push	r1
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	7c 01       	movw	r14, r24
     b38:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_alt0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     b3a:	89 01       	movw	r16, r18
     b3c:	9a 01       	movw	r18, r20
     b3e:	4b e1       	ldi	r20, 0x1B	; 27
     b40:	5d e0       	ldi	r21, 0x0D	; 13
     b42:	63 e7       	ldi	r22, 0x73	; 115
     b44:	7e e0       	ldi	r23, 0x0E	; 14
     b46:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	0e 94 8a 05 	call	0xb14	; 0xb14 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     b52:	86 01       	movw	r16, r12
     b54:	2d ef       	ldi	r18, 0xFD	; 253
     b56:	3a e0       	ldi	r19, 0x0A	; 10
     b58:	49 81       	ldd	r20, Y+1	; 0x01
     b5a:	bc 01       	movw	r22, r24
     b5c:	c7 01       	movw	r24, r14
     b5e:	0e 94 31 0c 	call	0x1862	; 0x1862 <u8g2_SetupBuffer>
}
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	08 95       	ret

00000b76 <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     b76:	86 0f       	add	r24, r22
     b78:	91 1d       	adc	r25, r1
     b7a:	fc 01       	movw	r30, r24
     b7c:	84 91       	lpm	r24, Z
     b7e:	08 95       	ret

00000b80 <u8g2_font_get_word>:
     b80:	fc 01       	movw	r30, r24
     b82:	e6 0f       	add	r30, r22
     b84:	f1 1d       	adc	r31, r1
     b86:	84 91       	lpm	r24, Z
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	31 96       	adiw	r30, 0x01	; 1
     b8c:	98 2f       	mov	r25, r24
     b8e:	88 27       	eor	r24, r24
     b90:	e4 91       	lpm	r30, Z
     b92:	8e 0f       	add	r24, r30
     b94:	91 1d       	adc	r25, r1
     b96:	08 95       	ret

00000b98 <u8g2_font_calc_vref_font>:
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	08 95       	ret

00000b9e <u8g2_font_calc_vref_top>:
     b9e:	80 59       	subi	r24, 0x90	; 144
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	08 2e       	mov	r0, r24
     ba8:	00 0c       	add	r0, r0
     baa:	99 0b       	sbc	r25, r25
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	08 95       	ret

00000bb0 <u8g2_read_font_info>:
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
     bba:	8b 01       	movw	r16, r22
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     bc4:	88 83       	st	Y, r24
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	62 e0       	ldi	r22, 0x02	; 2
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     bd8:	8a 83       	std	Y+2, r24	; 0x02
     bda:	63 e0       	ldi	r22, 0x03	; 3
     bdc:	c8 01       	movw	r24, r16
     bde:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     be2:	8b 83       	std	Y+3, r24	; 0x03
     be4:	64 e0       	ldi	r22, 0x04	; 4
     be6:	c8 01       	movw	r24, r16
     be8:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     bec:	8c 83       	std	Y+4, r24	; 0x04
     bee:	65 e0       	ldi	r22, 0x05	; 5
     bf0:	c8 01       	movw	r24, r16
     bf2:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     bf6:	8d 83       	std	Y+5, r24	; 0x05
     bf8:	66 e0       	ldi	r22, 0x06	; 6
     bfa:	c8 01       	movw	r24, r16
     bfc:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c00:	8e 83       	std	Y+6, r24	; 0x06
     c02:	67 e0       	ldi	r22, 0x07	; 7
     c04:	c8 01       	movw	r24, r16
     c06:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c0a:	8f 83       	std	Y+7, r24	; 0x07
     c0c:	68 e0       	ldi	r22, 0x08	; 8
     c0e:	c8 01       	movw	r24, r16
     c10:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c14:	88 87       	std	Y+8, r24	; 0x08
     c16:	69 e0       	ldi	r22, 0x09	; 9
     c18:	c8 01       	movw	r24, r16
     c1a:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c1e:	89 87       	std	Y+9, r24	; 0x09
     c20:	6a e0       	ldi	r22, 0x0A	; 10
     c22:	c8 01       	movw	r24, r16
     c24:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c28:	8a 87       	std	Y+10, r24	; 0x0a
     c2a:	6b e0       	ldi	r22, 0x0B	; 11
     c2c:	c8 01       	movw	r24, r16
     c2e:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c32:	8b 87       	std	Y+11, r24	; 0x0b
     c34:	6c e0       	ldi	r22, 0x0C	; 12
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c3c:	8c 87       	std	Y+12, r24	; 0x0c
     c3e:	6d e0       	ldi	r22, 0x0D	; 13
     c40:	c8 01       	movw	r24, r16
     c42:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c46:	8d 87       	std	Y+13, r24	; 0x0d
     c48:	6e e0       	ldi	r22, 0x0E	; 14
     c4a:	c8 01       	movw	r24, r16
     c4c:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c50:	8e 87       	std	Y+14, r24	; 0x0e
     c52:	6f e0       	ldi	r22, 0x0F	; 15
     c54:	c8 01       	movw	r24, r16
     c56:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c5a:	8f 87       	std	Y+15, r24	; 0x0f
     c5c:	60 e1       	ldi	r22, 0x10	; 16
     c5e:	c8 01       	movw	r24, r16
     c60:	0e 94 bb 05 	call	0xb76	; 0xb76 <u8g2_font_get_byte>
     c64:	88 8b       	std	Y+16, r24	; 0x10
     c66:	61 e1       	ldi	r22, 0x11	; 17
     c68:	c8 01       	movw	r24, r16
     c6a:	0e 94 c0 05 	call	0xb80	; 0xb80 <u8g2_font_get_word>
     c6e:	9a 8b       	std	Y+18, r25	; 0x12
     c70:	89 8b       	std	Y+17, r24	; 0x11
     c72:	63 e1       	ldi	r22, 0x13	; 19
     c74:	c8 01       	movw	r24, r16
     c76:	0e 94 c0 05 	call	0xb80	; 0xb80 <u8g2_font_get_word>
     c7a:	9c 8b       	std	Y+20, r25	; 0x14
     c7c:	8b 8b       	std	Y+19, r24	; 0x13
     c7e:	65 e1       	ldi	r22, 0x15	; 21
     c80:	c8 01       	movw	r24, r16
     c82:	0e 94 c0 05 	call	0xb80	; 0xb80 <u8g2_font_get_word>
     c86:	9e 8b       	std	Y+22, r25	; 0x16
     c88:	8d 8b       	std	Y+21, r24	; 0x15
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <u8g2_font_decode_get_unsigned_bits>:
     c94:	dc 01       	movw	r26, r24
     c96:	1a 96       	adiw	r26, 0x0a	; 10
     c98:	4c 91       	ld	r20, X
     c9a:	1a 97       	sbiw	r26, 0x0a	; 10
     c9c:	ed 91       	ld	r30, X+
     c9e:	fc 91       	ld	r31, X
     ca0:	11 97       	sbiw	r26, 0x01	; 1
     ca2:	24 91       	lpm	r18, Z
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	04 2e       	mov	r0, r20
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <u8g2_font_decode_get_unsigned_bits+0x1a>
     caa:	35 95       	asr	r19
     cac:	27 95       	ror	r18
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <u8g2_font_decode_get_unsigned_bits+0x16>
     cb2:	82 2f       	mov	r24, r18
     cb4:	94 2f       	mov	r25, r20
     cb6:	96 0f       	add	r25, r22
     cb8:	98 30       	cpi	r25, 0x08	; 8
     cba:	80 f0       	brcs	.+32     	; 0xcdc <u8g2_font_decode_get_unsigned_bits+0x48>
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	84 1b       	sub	r24, r20
     cc0:	31 96       	adiw	r30, 0x01	; 1
     cc2:	11 96       	adiw	r26, 0x01	; 1
     cc4:	fc 93       	st	X, r31
     cc6:	ee 93       	st	-X, r30
     cc8:	e4 91       	lpm	r30, Z
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <u8g2_font_decode_get_unsigned_bits+0x3e>
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	8a 95       	dec	r24
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <u8g2_font_decode_get_unsigned_bits+0x3a>
     cd6:	8e 2f       	mov	r24, r30
     cd8:	82 2b       	or	r24, r18
     cda:	98 50       	subi	r25, 0x08	; 8
     cdc:	21 e0       	ldi	r18, 0x01	; 1
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <u8g2_font_decode_get_unsigned_bits+0x52>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	6a 95       	dec	r22
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <u8g2_font_decode_get_unsigned_bits+0x4e>
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	1a 96       	adiw	r26, 0x0a	; 10
     cee:	9c 93       	st	X, r25
     cf0:	82 23       	and	r24, r18
     cf2:	08 95       	ret

00000cf4 <u8g2_font_setup_decode>:
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
     cfe:	8c 01       	movw	r16, r24
     d00:	08 5b       	subi	r16, 0xB8	; 184
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	f8 01       	movw	r30, r16
     d06:	71 83       	std	Z+1, r23	; 0x01
     d08:	60 83       	st	Z, r22
     d0a:	12 86       	std	Z+10, r1	; 0x0a
     d0c:	73 96       	adiw	r30, 0x13	; 19
     d0e:	60 81       	ld	r22, Z
     d10:	c8 01       	movw	r24, r16
     d12:	0e 94 4a 06 	call	0xc94	; 0xc94 <u8g2_font_decode_get_unsigned_bits>
     d16:	f8 01       	movw	r30, r16
     d18:	80 87       	std	Z+8, r24	; 0x08
     d1a:	74 96       	adiw	r30, 0x14	; 20
     d1c:	60 81       	ld	r22, Z
     d1e:	c8 01       	movw	r24, r16
     d20:	0e 94 4a 06 	call	0xc94	; 0xc94 <u8g2_font_decode_get_unsigned_bits>
     d24:	f8 01       	movw	r30, r16
     d26:	81 87       	std	Z+9, r24	; 0x09
     d28:	bc 96       	adiw	r30, 0x2c	; 44
     d2a:	80 81       	ld	r24, Z
     d2c:	f8 01       	movw	r30, r16
     d2e:	84 87       	std	Z+12, r24	; 0x0c
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	81 11       	cpse	r24, r1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	c8 5b       	subi	r28, 0xB8	; 184
     d38:	df 4f       	sbci	r29, 0xFF	; 255
     d3a:	9d 87       	std	Y+13, r25	; 0x0d
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <u8g2_font_decode_get_signed_bits>:
     d46:	cf 93       	push	r28
     d48:	c6 2f       	mov	r28, r22
     d4a:	0e 94 4a 06 	call	0xc94	; 0xc94 <u8g2_font_decode_get_unsigned_bits>
     d4e:	c1 50       	subi	r28, 0x01	; 1
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <u8g2_font_decode_get_signed_bits+0x14>
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	ca 95       	dec	r28
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <u8g2_font_decode_get_signed_bits+0x10>
     d5e:	82 1b       	sub	r24, r18
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <u8g2_add_vector_y>:
     d64:	21 30       	cpi	r18, 0x01	; 1
     d66:	49 f0       	breq	.+18     	; 0xd7a <u8g2_add_vector_y+0x16>
     d68:	18 f0       	brcs	.+6      	; 0xd70 <u8g2_add_vector_y+0xc>
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	59 f0       	breq	.+22     	; 0xd84 <u8g2_add_vector_y+0x20>
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <u8g2_add_vector_y+0x2a>
     d70:	84 0f       	add	r24, r20
     d72:	91 1d       	adc	r25, r1
     d74:	47 fd       	sbrc	r20, 7
     d76:	9a 95       	dec	r25
     d78:	08 95       	ret
     d7a:	86 0f       	add	r24, r22
     d7c:	91 1d       	adc	r25, r1
     d7e:	67 fd       	sbrc	r22, 7
     d80:	9a 95       	dec	r25
     d82:	08 95       	ret
     d84:	84 1b       	sub	r24, r20
     d86:	91 09       	sbc	r25, r1
     d88:	47 fd       	sbrc	r20, 7
     d8a:	93 95       	inc	r25
     d8c:	08 95       	ret
     d8e:	86 1b       	sub	r24, r22
     d90:	91 09       	sbc	r25, r1
     d92:	67 fd       	sbrc	r22, 7
     d94:	93 95       	inc	r25
     d96:	08 95       	ret

00000d98 <u8g2_add_vector_x>:
     d98:	21 30       	cpi	r18, 0x01	; 1
     d9a:	49 f0       	breq	.+18     	; 0xdae <u8g2_add_vector_x+0x16>
     d9c:	18 f0       	brcs	.+6      	; 0xda4 <u8g2_add_vector_x+0xc>
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	59 f0       	breq	.+22     	; 0xdb8 <u8g2_add_vector_x+0x20>
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <u8g2_add_vector_x+0x2a>
     da4:	86 0f       	add	r24, r22
     da6:	91 1d       	adc	r25, r1
     da8:	67 fd       	sbrc	r22, 7
     daa:	9a 95       	dec	r25
     dac:	08 95       	ret
     dae:	84 1b       	sub	r24, r20
     db0:	91 09       	sbc	r25, r1
     db2:	47 fd       	sbrc	r20, 7
     db4:	93 95       	inc	r25
     db6:	08 95       	ret
     db8:	86 1b       	sub	r24, r22
     dba:	91 09       	sbc	r25, r1
     dbc:	67 fd       	sbrc	r22, 7
     dbe:	93 95       	inc	r25
     dc0:	08 95       	ret
     dc2:	84 0f       	add	r24, r20
     dc4:	91 1d       	adc	r25, r1
     dc6:	47 fd       	sbrc	r20, 7
     dc8:	9a 95       	dec	r25
     dca:	08 95       	ret

00000dcc <u8g2_font_decode_len>:
     dcc:	6f 92       	push	r6
     dce:	7f 92       	push	r7
     dd0:	8f 92       	push	r8
     dd2:	9f 92       	push	r9
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	7c 01       	movw	r14, r24
     dea:	16 2f       	mov	r17, r22
     dec:	74 2e       	mov	r7, r20
     dee:	fc 01       	movw	r30, r24
     df0:	e8 5b       	subi	r30, 0xB8	; 184
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	96 80       	ldd	r9, Z+6	; 0x06
     df6:	d7 81       	ldd	r29, Z+7	; 0x07
     df8:	f7 01       	movw	r30, r14
     dfa:	e8 5b       	subi	r30, 0xB8	; 184
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	c0 85       	ldd	r28, Z+8	; 0x08
     e00:	c9 19       	sub	r28, r9
     e02:	1c 17       	cp	r17, r28
     e04:	10 f0       	brcs	.+4      	; 0xe0a <u8g2_font_decode_len+0x3e>
     e06:	6c 2e       	mov	r6, r28
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <u8g2_font_decode_len+0x40>
     e0a:	61 2e       	mov	r6, r17
     e0c:	f7 01       	movw	r30, r14
     e0e:	e8 5b       	subi	r30, 0xB8	; 184
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	c4 80       	ldd	r12, Z+4	; 0x04
     e14:	d5 80       	ldd	r13, Z+5	; 0x05
     e16:	06 85       	ldd	r16, Z+14	; 0x0e
     e18:	8d 2e       	mov	r8, r29
     e1a:	20 2f       	mov	r18, r16
     e1c:	4d 2f       	mov	r20, r29
     e1e:	69 2d       	mov	r22, r9
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	0e 94 cc 06 	call	0xd98	; 0xd98 <u8g2_add_vector_x>
     e28:	5c 01       	movw	r10, r24
     e2a:	20 2f       	mov	r18, r16
     e2c:	4d 2f       	mov	r20, r29
     e2e:	69 2d       	mov	r22, r9
     e30:	c6 01       	movw	r24, r12
     e32:	0e 94 b2 06 	call	0xd64	; 0xd64 <u8g2_add_vector_y>
     e36:	77 20       	and	r7, r7
     e38:	71 f0       	breq	.+28     	; 0xe56 <u8g2_font_decode_len+0x8a>
     e3a:	f7 01       	movw	r30, r14
     e3c:	e8 5b       	subi	r30, 0xB8	; 184
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	24 85       	ldd	r18, Z+12	; 0x0c
     e42:	bc 96       	adiw	r30, 0x2c	; 44
     e44:	20 83       	st	Z, r18
     e46:	26 2d       	mov	r18, r6
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	ac 01       	movw	r20, r24
     e4c:	b5 01       	movw	r22, r10
     e4e:	c7 01       	movw	r24, r14
     e50:	0e 94 24 0a 	call	0x1448	; 0x1448 <u8g2_DrawHVLine>
     e54:	10 c0       	rjmp	.+32     	; 0xe76 <u8g2_font_decode_len+0xaa>
     e56:	f7 01       	movw	r30, r14
     e58:	e8 5b       	subi	r30, 0xB8	; 184
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	23 85       	ldd	r18, Z+11	; 0x0b
     e5e:	21 11       	cpse	r18, r1
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <u8g2_font_decode_len+0xaa>
     e62:	25 85       	ldd	r18, Z+13	; 0x0d
     e64:	bc 96       	adiw	r30, 0x2c	; 44
     e66:	20 83       	st	Z, r18
     e68:	26 2d       	mov	r18, r6
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	ac 01       	movw	r20, r24
     e6e:	b5 01       	movw	r22, r10
     e70:	c7 01       	movw	r24, r14
     e72:	0e 94 24 0a 	call	0x1448	; 0x1448 <u8g2_DrawHVLine>
     e76:	1c 17       	cp	r17, r28
     e78:	20 f0       	brcs	.+8      	; 0xe82 <u8g2_font_decode_len+0xb6>
     e7a:	1c 1b       	sub	r17, r28
     e7c:	df 5f       	subi	r29, 0xFF	; 255
     e7e:	91 2c       	mov	r9, r1
     e80:	bb cf       	rjmp	.-138    	; 0xdf8 <u8g2_font_decode_len+0x2c>
     e82:	61 2f       	mov	r22, r17
     e84:	69 0d       	add	r22, r9
     e86:	f7 01       	movw	r30, r14
     e88:	e8 5b       	subi	r30, 0xB8	; 184
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	66 83       	std	Z+6, r22	; 0x06
     e8e:	87 82       	std	Z+7, r8	; 0x07
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	9f 90       	pop	r9
     ea6:	8f 90       	pop	r8
     ea8:	7f 90       	pop	r7
     eaa:	6f 90       	pop	r6
     eac:	08 95       	ret

00000eae <u8g2_font_decode_glyph>:
     eae:	6f 92       	push	r6
     eb0:	7f 92       	push	r7
     eb2:	8f 92       	push	r8
     eb4:	9f 92       	push	r9
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ec 01       	movw	r28, r24
     ecc:	7c 01       	movw	r14, r24
     ece:	88 e4       	ldi	r24, 0x48	; 72
     ed0:	e8 0e       	add	r14, r24
     ed2:	f1 1c       	adc	r15, r1
     ed4:	ce 01       	movw	r24, r28
     ed6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <u8g2_font_setup_decode>
     eda:	fe 01       	movw	r30, r28
     edc:	ef 5a       	subi	r30, 0xAF	; 175
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	c0 80       	ld	r12, Z
     ee2:	3c 96       	adiw	r30, 0x0c	; 12
     ee4:	60 81       	ld	r22, Z
     ee6:	c7 01       	movw	r24, r14
     ee8:	0e 94 a3 06 	call	0xd46	; 0xd46 <u8g2_font_decode_get_signed_bits>
     eec:	78 2e       	mov	r7, r24
     eee:	fe 01       	movw	r30, r28
     ef0:	e2 5a       	subi	r30, 0xA2	; 162
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	60 81       	ld	r22, Z
     ef6:	c7 01       	movw	r24, r14
     ef8:	0e 94 a3 06 	call	0xd46	; 0xd46 <u8g2_font_decode_get_signed_bits>
     efc:	18 2f       	mov	r17, r24
     efe:	fe 01       	movw	r30, r28
     f00:	e1 5a       	subi	r30, 0xA1	; 161
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	60 81       	ld	r22, Z
     f06:	c7 01       	movw	r24, r14
     f08:	0e 94 a3 06 	call	0xd46	; 0xd46 <u8g2_font_decode_get_signed_bits>
     f0c:	d8 2e       	mov	r13, r24
     f0e:	f7 01       	movw	r30, r14
     f10:	60 84       	ldd	r6, Z+8	; 0x08
     f12:	16 14       	cp	r1, r6
     f14:	0c f0       	brlt	.+2      	; 0xf18 <u8g2_font_decode_glyph+0x6a>
     f16:	9b c0       	rjmp	.+310    	; 0x104e <u8g2_font_decode_glyph+0x1a0>
     f18:	06 85       	ldd	r16, Z+14	; 0x0e
     f1a:	1c 0d       	add	r17, r12
     f1c:	11 95       	neg	r17
     f1e:	20 2f       	mov	r18, r16
     f20:	41 2f       	mov	r20, r17
     f22:	67 2d       	mov	r22, r7
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0e 94 cc 06 	call	0xd98	; 0xd98 <u8g2_add_vector_x>
     f2c:	5c 01       	movw	r10, r24
     f2e:	f7 01       	movw	r30, r14
     f30:	93 83       	std	Z+3, r25	; 0x03
     f32:	82 83       	std	Z+2, r24	; 0x02
     f34:	20 2f       	mov	r18, r16
     f36:	41 2f       	mov	r20, r17
     f38:	67 2d       	mov	r22, r7
     f3a:	84 81       	ldd	r24, Z+4	; 0x04
     f3c:	95 81       	ldd	r25, Z+5	; 0x05
     f3e:	0e 94 b2 06 	call	0xd64	; 0xd64 <u8g2_add_vector_y>
     f42:	f7 01       	movw	r30, r14
     f44:	95 83       	std	Z+5, r25	; 0x05
     f46:	84 83       	std	Z+4, r24	; 0x04
     f48:	01 30       	cpi	r16, 0x01	; 1
     f4a:	89 f0       	breq	.+34     	; 0xf6e <u8g2_font_decode_glyph+0xc0>
     f4c:	28 f0       	brcs	.+10     	; 0xf58 <u8g2_font_decode_glyph+0xaa>
     f4e:	02 30       	cpi	r16, 0x02	; 2
     f50:	01 f1       	breq	.+64     	; 0xf92 <u8g2_font_decode_glyph+0xe4>
     f52:	03 30       	cpi	r16, 0x03	; 3
     f54:	a1 f1       	breq	.+104    	; 0xfbe <u8g2_font_decode_glyph+0x110>
     f56:	43 c0       	rjmp	.+134    	; 0xfde <u8g2_font_decode_glyph+0x130>
     f58:	95 01       	movw	r18, r10
     f5a:	26 0d       	add	r18, r6
     f5c:	31 1d       	adc	r19, r1
     f5e:	67 fc       	sbrc	r6, 7
     f60:	3a 95       	dec	r19
     f62:	8c 01       	movw	r16, r24
     f64:	0c 0d       	add	r16, r12
     f66:	11 1d       	adc	r17, r1
     f68:	c7 fc       	sbrc	r12, 7
     f6a:	1a 95       	dec	r17
     f6c:	3a c0       	rjmp	.+116    	; 0xfe2 <u8g2_font_decode_glyph+0x134>
     f6e:	a5 01       	movw	r20, r10
     f70:	4c 19       	sub	r20, r12
     f72:	51 09       	sbc	r21, r1
     f74:	c7 fc       	sbrc	r12, 7
     f76:	53 95       	inc	r21
     f78:	95 01       	movw	r18, r10
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	8c 01       	movw	r16, r24
     f80:	06 0d       	add	r16, r6
     f82:	11 1d       	adc	r17, r1
     f84:	67 fc       	sbrc	r6, 7
     f86:	1a 95       	dec	r17
     f88:	ba 01       	movw	r22, r20
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	5b 01       	movw	r10, r22
     f90:	28 c0       	rjmp	.+80     	; 0xfe2 <u8g2_font_decode_glyph+0x134>
     f92:	a5 01       	movw	r20, r10
     f94:	46 19       	sub	r20, r6
     f96:	51 09       	sbc	r21, r1
     f98:	67 fc       	sbrc	r6, 7
     f9a:	53 95       	inc	r21
     f9c:	95 01       	movw	r18, r10
     f9e:	2f 5f       	subi	r18, 0xFF	; 255
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	bc 01       	movw	r22, r24
     fa4:	6c 19       	sub	r22, r12
     fa6:	71 09       	sbc	r23, r1
     fa8:	c7 fc       	sbrc	r12, 7
     faa:	73 95       	inc	r23
     fac:	8c 01       	movw	r16, r24
     fae:	0f 5f       	subi	r16, 0xFF	; 255
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	cb 01       	movw	r24, r22
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	fa 01       	movw	r30, r20
     fb8:	31 96       	adiw	r30, 0x01	; 1
     fba:	5f 01       	movw	r10, r30
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <u8g2_font_decode_glyph+0x134>
     fbe:	95 01       	movw	r18, r10
     fc0:	2c 0d       	add	r18, r12
     fc2:	31 1d       	adc	r19, r1
     fc4:	c7 fc       	sbrc	r12, 7
     fc6:	3a 95       	dec	r19
     fc8:	ac 01       	movw	r20, r24
     fca:	46 19       	sub	r20, r6
     fcc:	51 09       	sbc	r21, r1
     fce:	67 fc       	sbrc	r6, 7
     fd0:	53 95       	inc	r21
     fd2:	8c 01       	movw	r16, r24
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	ca 01       	movw	r24, r20
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <u8g2_font_decode_glyph+0x134>
     fde:	8c 01       	movw	r16, r24
     fe0:	95 01       	movw	r18, r10
     fe2:	ac 01       	movw	r20, r24
     fe4:	b5 01       	movw	r22, r10
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <u8g2_IsIntersection>
     fec:	88 23       	and	r24, r24
     fee:	79 f1       	breq	.+94     	; 0x104e <u8g2_font_decode_glyph+0x1a0>
     ff0:	fe 01       	movw	r30, r28
     ff2:	e8 5b       	subi	r30, 0xB8	; 184
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	16 82       	std	Z+6, r1	; 0x06
     ff8:	17 82       	std	Z+7, r1	; 0x07
     ffa:	fe 01       	movw	r30, r28
     ffc:	e7 5a       	subi	r30, 0xA7	; 167
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	60 81       	ld	r22, Z
    1002:	c7 01       	movw	r24, r14
    1004:	0e 94 4a 06 	call	0xc94	; 0xc94 <u8g2_font_decode_get_unsigned_bits>
    1008:	08 2f       	mov	r16, r24
    100a:	fe 01       	movw	r30, r28
    100c:	e6 5a       	subi	r30, 0xA6	; 166
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	60 81       	ld	r22, Z
    1012:	c7 01       	movw	r24, r14
    1014:	0e 94 4a 06 	call	0xc94	; 0xc94 <u8g2_font_decode_get_unsigned_bits>
    1018:	18 2f       	mov	r17, r24
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	60 2f       	mov	r22, r16
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 e6 06 	call	0xdcc	; 0xdcc <u8g2_font_decode_len>
    1024:	41 e0       	ldi	r20, 0x01	; 1
    1026:	61 2f       	mov	r22, r17
    1028:	ce 01       	movw	r24, r28
    102a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <u8g2_font_decode_len>
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	c7 01       	movw	r24, r14
    1032:	0e 94 4a 06 	call	0xc94	; 0xc94 <u8g2_font_decode_get_unsigned_bits>
    1036:	81 11       	cpse	r24, r1
    1038:	f0 cf       	rjmp	.-32     	; 0x101a <u8g2_font_decode_glyph+0x16c>
    103a:	fe 01       	movw	r30, r28
    103c:	e8 5b       	subi	r30, 0xB8	; 184
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	87 81       	ldd	r24, Z+7	; 0x07
    1042:	8c 15       	cp	r24, r12
    1044:	d4 f2       	brlt	.-76     	; 0xffa <u8g2_font_decode_glyph+0x14c>
    1046:	84 85       	ldd	r24, Z+12	; 0x0c
    1048:	cc 58       	subi	r28, 0x8C	; 140
    104a:	df 4f       	sbci	r29, 0xFF	; 255
    104c:	88 83       	st	Y, r24
    104e:	8d 2d       	mov	r24, r13
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	9f 90       	pop	r9
    1066:	8f 90       	pop	r8
    1068:	7f 90       	pop	r7
    106a:	6f 90       	pop	r6
    106c:	08 95       	ret

0000106e <u8g2_font_get_glyph_data>:
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	fc 01       	movw	r30, r24
    107c:	ec 5b       	subi	r30, 0xBC	; 188
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	c0 81       	ld	r28, Z
    1082:	d1 81       	ldd	r29, Z+1	; 0x01
    1084:	67 96       	adiw	r28, 0x17	; 23
    1086:	6f 3f       	cpi	r22, 0xFF	; 255
    1088:	71 05       	cpc	r23, r1
    108a:	09 f0       	breq	.+2      	; 0x108e <u8g2_font_get_glyph_data+0x20>
    108c:	38 f5       	brcc	.+78     	; 0x10dc <u8g2_font_get_glyph_data+0x6e>
    108e:	61 36       	cpi	r22, 0x61	; 97
    1090:	71 05       	cpc	r23, r1
    1092:	30 f0       	brcs	.+12     	; 0x10a0 <u8g2_font_get_glyph_data+0x32>
    1094:	b6 96       	adiw	r30, 0x26	; 38
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	c8 0f       	add	r28, r24
    109c:	d9 1f       	adc	r29, r25
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <u8g2_font_get_glyph_data+0x46>
    10a0:	61 34       	cpi	r22, 0x41	; 65
    10a2:	71 05       	cpc	r23, r1
    10a4:	38 f0       	brcs	.+14     	; 0x10b4 <u8g2_font_get_glyph_data+0x46>
    10a6:	fc 01       	movw	r30, r24
    10a8:	e8 59       	subi	r30, 0x98	; 152
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	c8 0f       	add	r28, r24
    10b2:	d9 1f       	adc	r29, r25
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	fc 01       	movw	r30, r24
    10ba:	24 91       	lpm	r18, Z
    10bc:	22 23       	and	r18, r18
    10be:	09 f4       	brne	.+2      	; 0x10c2 <u8g2_font_get_glyph_data+0x54>
    10c0:	3c c0       	rjmp	.+120    	; 0x113a <u8g2_font_get_glyph_data+0xcc>
    10c2:	fe 01       	movw	r30, r28
    10c4:	24 91       	lpm	r18, Z
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	62 17       	cp	r22, r18
    10ca:	73 07       	cpc	r23, r19
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <u8g2_font_get_glyph_data+0x64>
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	39 c0       	rjmp	.+114    	; 0x1144 <u8g2_font_get_glyph_data+0xd6>
    10d2:	fc 01       	movw	r30, r24
    10d4:	84 91       	lpm	r24, Z
    10d6:	c8 0f       	add	r28, r24
    10d8:	d1 1d       	adc	r29, r1
    10da:	ec cf       	rjmp	.-40     	; 0x10b4 <u8g2_font_get_glyph_data+0x46>
    10dc:	8b 01       	movw	r16, r22
    10de:	fc 01       	movw	r30, r24
    10e0:	e4 59       	subi	r30, 0x94	; 148
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	c8 0f       	add	r28, r24
    10ea:	d9 1f       	adc	r29, r25
    10ec:	7e 01       	movw	r14, r28
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	c7 01       	movw	r24, r14
    10f2:	0e 94 c0 05 	call	0xb80	; 0xb80 <u8g2_font_get_word>
    10f6:	c8 0f       	add	r28, r24
    10f8:	d9 1f       	adc	r29, r25
    10fa:	62 e0       	ldi	r22, 0x02	; 2
    10fc:	c7 01       	movw	r24, r14
    10fe:	0e 94 c0 05 	call	0xb80	; 0xb80 <u8g2_font_get_word>
    1102:	f4 e0       	ldi	r31, 0x04	; 4
    1104:	ef 0e       	add	r14, r31
    1106:	f1 1c       	adc	r15, r1
    1108:	80 17       	cp	r24, r16
    110a:	91 07       	cpc	r25, r17
    110c:	80 f3       	brcs	.-32     	; 0x10ee <u8g2_font_get_glyph_data+0x80>
    110e:	fe 01       	movw	r30, r28
    1110:	84 91       	lpm	r24, Z
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	98 2f       	mov	r25, r24
    1116:	88 27       	eor	r24, r24
    1118:	31 96       	adiw	r30, 0x01	; 1
    111a:	e4 91       	lpm	r30, Z
    111c:	8e 2b       	or	r24, r30
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	79 f0       	breq	.+30     	; 0x1140 <u8g2_font_get_glyph_data+0xd2>
    1122:	08 17       	cp	r16, r24
    1124:	19 07       	cpc	r17, r25
    1126:	19 f4       	brne	.+6      	; 0x112e <u8g2_font_get_glyph_data+0xc0>
    1128:	ce 01       	movw	r24, r28
    112a:	03 96       	adiw	r24, 0x03	; 3
    112c:	0b c0       	rjmp	.+22     	; 0x1144 <u8g2_font_get_glyph_data+0xd6>
    112e:	fe 01       	movw	r30, r28
    1130:	32 96       	adiw	r30, 0x02	; 2
    1132:	e4 91       	lpm	r30, Z
    1134:	ce 0f       	add	r28, r30
    1136:	d1 1d       	adc	r29, r1
    1138:	ea cf       	rjmp	.-44     	; 0x110e <u8g2_font_get_glyph_data+0xa0>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <u8g2_font_get_glyph_data+0xd6>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	08 95       	ret

00001152 <u8g2_font_draw_glyph>:
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	fc 01       	movw	r30, r24
    115a:	e6 5b       	subi	r30, 0xB6	; 182
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	71 83       	std	Z+1, r23	; 0x01
    1160:	60 83       	st	Z, r22
    1162:	32 96       	adiw	r30, 0x02	; 2
    1164:	51 83       	std	Z+1, r21	; 0x01
    1166:	40 83       	st	Z, r20
    1168:	b9 01       	movw	r22, r18
    116a:	0e 94 37 08 	call	0x106e	; 0x106e <u8g2_font_get_glyph_data>
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	41 f0       	breq	.+16     	; 0x1182 <u8g2_font_draw_glyph+0x30>
    1172:	bc 01       	movw	r22, r24
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 57 07 	call	0xeae	; 0xeae <u8g2_font_decode_glyph>
    117a:	08 2e       	mov	r0, r24
    117c:	00 0c       	add	r0, r0
    117e:	99 0b       	sbc	r25, r25
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <u8g2_font_draw_glyph+0x34>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <u8g2_DrawGlyph>:
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	ec 01       	movw	r28, r24
    119e:	8b 01       	movw	r16, r22
    11a0:	7a 01       	movw	r14, r20
    11a2:	69 01       	movw	r12, r18
    11a4:	fc 01       	movw	r30, r24
    11a6:	ea 5a       	subi	r30, 0xAA	; 170
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	80 81       	ld	r24, Z
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	89 f0       	breq	.+34     	; 0x11d2 <u8g2_DrawGlyph+0x46>
    11b0:	28 f0       	brcs	.+10     	; 0x11bc <u8g2_DrawGlyph+0x30>
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	c9 f0       	breq	.+50     	; 0x11e8 <u8g2_DrawGlyph+0x5c>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	11 f1       	breq	.+68     	; 0x11fe <u8g2_DrawGlyph+0x72>
    11ba:	2b c0       	rjmp	.+86     	; 0x1212 <u8g2_DrawGlyph+0x86>
    11bc:	fe 01       	movw	r30, r28
    11be:	ea 5b       	subi	r30, 0xBA	; 186
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	01 90       	ld	r0, Z+
    11c4:	f0 81       	ld	r31, Z
    11c6:	e0 2d       	mov	r30, r0
    11c8:	ce 01       	movw	r24, r28
    11ca:	09 95       	icall
    11cc:	e8 0e       	add	r14, r24
    11ce:	f9 1e       	adc	r15, r25
    11d0:	20 c0       	rjmp	.+64     	; 0x1212 <u8g2_DrawGlyph+0x86>
    11d2:	fe 01       	movw	r30, r28
    11d4:	ea 5b       	subi	r30, 0xBA	; 186
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	01 90       	ld	r0, Z+
    11da:	f0 81       	ld	r31, Z
    11dc:	e0 2d       	mov	r30, r0
    11de:	ce 01       	movw	r24, r28
    11e0:	09 95       	icall
    11e2:	08 1b       	sub	r16, r24
    11e4:	19 0b       	sbc	r17, r25
    11e6:	15 c0       	rjmp	.+42     	; 0x1212 <u8g2_DrawGlyph+0x86>
    11e8:	fe 01       	movw	r30, r28
    11ea:	ea 5b       	subi	r30, 0xBA	; 186
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	01 90       	ld	r0, Z+
    11f0:	f0 81       	ld	r31, Z
    11f2:	e0 2d       	mov	r30, r0
    11f4:	ce 01       	movw	r24, r28
    11f6:	09 95       	icall
    11f8:	e8 1a       	sub	r14, r24
    11fa:	f9 0a       	sbc	r15, r25
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <u8g2_DrawGlyph+0x86>
    11fe:	fe 01       	movw	r30, r28
    1200:	ea 5b       	subi	r30, 0xBA	; 186
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	01 90       	ld	r0, Z+
    1206:	f0 81       	ld	r31, Z
    1208:	e0 2d       	mov	r30, r0
    120a:	ce 01       	movw	r24, r28
    120c:	09 95       	icall
    120e:	08 0f       	add	r16, r24
    1210:	19 1f       	adc	r17, r25
    1212:	96 01       	movw	r18, r12
    1214:	a7 01       	movw	r20, r14
    1216:	b8 01       	movw	r22, r16
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 a9 08 	call	0x1152	; 0x1152 <u8g2_font_draw_glyph>
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	08 95       	ret

00001230 <u8g2_draw_string>:
    1230:	af 92       	push	r10
    1232:	bf 92       	push	r11
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
    1246:	5b 01       	movw	r10, r22
    1248:	6a 01       	movw	r12, r20
    124a:	89 01       	movw	r16, r18
    124c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <u8x8_utf8_init>
    1250:	e1 2c       	mov	r14, r1
    1252:	f1 2c       	mov	r15, r1
    1254:	ea 81       	ldd	r30, Y+2	; 0x02
    1256:	fb 81       	ldd	r31, Y+3	; 0x03
    1258:	d8 01       	movw	r26, r16
    125a:	6c 91       	ld	r22, X
    125c:	ce 01       	movw	r24, r28
    125e:	09 95       	icall
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	bf ef       	ldi	r27, 0xFF	; 255
    1264:	9b 07       	cpc	r25, r27
    1266:	39 f1       	breq	.+78     	; 0x12b6 <u8g2_draw_string+0x86>
    1268:	0f 5f       	subi	r16, 0xFF	; 255
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	8e 3f       	cpi	r24, 0xFE	; 254
    126e:	2f ef       	ldi	r18, 0xFF	; 255
    1270:	92 07       	cpc	r25, r18
    1272:	81 f3       	breq	.-32     	; 0x1254 <u8g2_draw_string+0x24>
    1274:	9c 01       	movw	r18, r24
    1276:	a6 01       	movw	r20, r12
    1278:	b5 01       	movw	r22, r10
    127a:	ce 01       	movw	r24, r28
    127c:	0e 94 c6 08 	call	0x118c	; 0x118c <u8g2_DrawGlyph>
    1280:	9c 01       	movw	r18, r24
    1282:	fe 01       	movw	r30, r28
    1284:	ea 5a       	subi	r30, 0xAA	; 170
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	90 81       	ld	r25, Z
    128a:	91 30       	cpi	r25, 0x01	; 1
    128c:	49 f0       	breq	.+18     	; 0x12a0 <u8g2_draw_string+0x70>
    128e:	28 f0       	brcs	.+10     	; 0x129a <u8g2_draw_string+0x6a>
    1290:	92 30       	cpi	r25, 0x02	; 2
    1292:	49 f0       	breq	.+18     	; 0x12a6 <u8g2_draw_string+0x76>
    1294:	93 30       	cpi	r25, 0x03	; 3
    1296:	51 f0       	breq	.+20     	; 0x12ac <u8g2_draw_string+0x7c>
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <u8g2_draw_string+0x80>
    129a:	a2 0e       	add	r10, r18
    129c:	b3 1e       	adc	r11, r19
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <u8g2_draw_string+0x80>
    12a0:	c2 0e       	add	r12, r18
    12a2:	d3 1e       	adc	r13, r19
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <u8g2_draw_string+0x80>
    12a6:	a2 1a       	sub	r10, r18
    12a8:	b3 0a       	sbc	r11, r19
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <u8g2_draw_string+0x80>
    12ac:	c2 1a       	sub	r12, r18
    12ae:	d3 0a       	sbc	r13, r19
    12b0:	e2 0e       	add	r14, r18
    12b2:	f3 1e       	adc	r15, r19
    12b4:	cf cf       	rjmp	.-98     	; 0x1254 <u8g2_draw_string+0x24>
    12b6:	c7 01       	movw	r24, r14
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	08 95       	ret

000012ce <u8g2_DrawStr>:
    12ce:	e1 e6       	ldi	r30, 0x61	; 97
    12d0:	fc e0       	ldi	r31, 0x0C	; 12
    12d2:	dc 01       	movw	r26, r24
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	fc 93       	st	X, r31
    12d8:	ee 93       	st	-X, r30
    12da:	12 97       	sbiw	r26, 0x02	; 2
    12dc:	0e 94 18 09 	call	0x1230	; 0x1230 <u8g2_draw_string>
    12e0:	08 95       	ret

000012e2 <u8g2_UpdateRefHeight>:
    12e2:	fc 01       	movw	r30, r24
    12e4:	ec 5b       	subi	r30, 0xBC	; 188
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	20 81       	ld	r18, Z
    12ea:	31 81       	ldd	r19, Z+1	; 0x01
    12ec:	23 2b       	or	r18, r19
    12ee:	e1 f1       	breq	.+120    	; 0x1368 <u8g2_UpdateRefHeight+0x86>
    12f0:	b0 96       	adiw	r30, 0x20	; 32
    12f2:	20 81       	ld	r18, Z
    12f4:	3c 96       	adiw	r30, 0x0c	; 12
    12f6:	20 83       	st	Z, r18
    12f8:	3b 97       	sbiw	r30, 0x0b	; 11
    12fa:	40 81       	ld	r20, Z
    12fc:	3c 96       	adiw	r30, 0x0c	; 12
    12fe:	40 83       	st	Z, r20
    1300:	32 97       	sbiw	r30, 0x02	; 2
    1302:	30 81       	ld	r19, Z
    1304:	33 23       	and	r19, r19
    1306:	81 f1       	breq	.+96     	; 0x1368 <u8g2_UpdateRefHeight+0x86>
    1308:	31 30       	cpi	r19, 0x01	; 1
    130a:	79 f4       	brne	.+30     	; 0x132a <u8g2_UpdateRefHeight+0x48>
    130c:	39 97       	sbiw	r30, 0x09	; 9
    130e:	30 81       	ld	r19, Z
    1310:	23 17       	cp	r18, r19
    1312:	14 f4       	brge	.+4      	; 0x1318 <u8g2_UpdateRefHeight+0x36>
    1314:	3a 96       	adiw	r30, 0x0a	; 10
    1316:	30 83       	st	Z, r19
    1318:	fc 01       	movw	r30, r24
    131a:	e9 59       	subi	r30, 0x99	; 153
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	20 81       	ld	r18, Z
    1320:	24 17       	cp	r18, r20
    1322:	14 f5       	brge	.+68     	; 0x1368 <u8g2_UpdateRefHeight+0x86>
    1324:	3a 96       	adiw	r30, 0x0a	; 10
    1326:	20 83       	st	Z, r18
    1328:	08 95       	ret
    132a:	02 2e       	mov	r0, r18
    132c:	00 0c       	add	r0, r0
    132e:	33 0b       	sbc	r19, r19
    1330:	fc 01       	movw	r30, r24
    1332:	ef 59       	subi	r30, 0x9F	; 159
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	e0 81       	ld	r30, Z
    1338:	dc 01       	movw	r26, r24
    133a:	ad 59       	subi	r26, 0x9D	; 157
    133c:	bf 4f       	sbci	r27, 0xFF	; 255
    133e:	5c 91       	ld	r21, X
    1340:	65 2f       	mov	r22, r21
    1342:	05 2e       	mov	r0, r21
    1344:	00 0c       	add	r0, r0
    1346:	77 0b       	sbc	r23, r23
    1348:	6e 0f       	add	r22, r30
    134a:	71 1d       	adc	r23, r1
    134c:	e7 fd       	sbrc	r30, 7
    134e:	7a 95       	dec	r23
    1350:	26 17       	cp	r18, r22
    1352:	37 07       	cpc	r19, r23
    1354:	1c f4       	brge	.+6      	; 0x135c <u8g2_UpdateRefHeight+0x7a>
    1356:	1d 96       	adiw	r26, 0x0d	; 13
    1358:	e5 0f       	add	r30, r21
    135a:	ec 93       	st	X, r30
    135c:	54 17       	cp	r21, r20
    135e:	24 f4       	brge	.+8      	; 0x1368 <u8g2_UpdateRefHeight+0x86>
    1360:	fc 01       	movw	r30, r24
    1362:	ef 58       	subi	r30, 0x8F	; 143
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	50 83       	st	Z, r21
    1368:	08 95       	ret

0000136a <u8g2_SetFontRefHeightText>:
    136a:	fc 01       	movw	r30, r24
    136c:	e1 59       	subi	r30, 0x91	; 145
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	10 82       	st	Z, r1
    1372:	0e 94 71 09 	call	0x12e2	; 0x12e2 <u8g2_UpdateRefHeight>
    1376:	08 95       	ret

00001378 <u8g2_SetFontPosBaseline>:
    1378:	8a 5b       	subi	r24, 0xBA	; 186
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	2c ec       	ldi	r18, 0xCC	; 204
    137e:	35 e0       	ldi	r19, 0x05	; 5
    1380:	fc 01       	movw	r30, r24
    1382:	31 83       	std	Z+1, r19	; 0x01
    1384:	20 83       	st	Z, r18
    1386:	08 95       	ret

00001388 <u8g2_SetFontPosTop>:
    1388:	8a 5b       	subi	r24, 0xBA	; 186
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	2f ec       	ldi	r18, 0xCF	; 207
    138e:	35 e0       	ldi	r19, 0x05	; 5
    1390:	fc 01       	movw	r30, r24
    1392:	31 83       	std	Z+1, r19	; 0x01
    1394:	20 83       	st	Z, r18
    1396:	08 95       	ret

00001398 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
  if ( u8g2->font != font )
    139c:	fc 01       	movw	r30, r24
    139e:	ec 5b       	subi	r30, 0xBC	; 188
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	20 81       	ld	r18, Z
    13a4:	31 81       	ldd	r19, Z+1	; 0x01
    13a6:	26 17       	cp	r18, r22
    13a8:	37 07       	cpc	r19, r23
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <u8g2_SetFont+0x28>
    13ac:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    13ae:	71 83       	std	Z+1, r23	; 0x01
    13b0:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    13b2:	89 5a       	subi	r24, 0xA9	; 169
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
  u8g2_uint_t a = *ap;
    13ca:	ec 01       	movw	r28, r24
    13cc:	a8 81       	ld	r26, Y
    13ce:	b9 81       	ldd	r27, Y+1	; 0x01
  u8g2_uint_t b;
  b  = a;
  b += *len;
    13d0:	eb 01       	movw	r28, r22
    13d2:	e8 81       	ld	r30, Y
    13d4:	f9 81       	ldd	r31, Y+1	; 0x01
    13d6:	ea 0f       	add	r30, r26
    13d8:	fb 1f       	adc	r31, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    13da:	ea 17       	cp	r30, r26
    13dc:	fb 07       	cpc	r31, r27
    13de:	38 f4       	brcc	.+14     	; 0x13ee <u8g2_clip_intersection2+0x28>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    13e0:	a2 17       	cp	r26, r18
    13e2:	b3 07       	cpc	r27, r19
    13e4:	18 f4       	brcc	.+6      	; 0x13ec <u8g2_clip_intersection2+0x26>
    {
      b = d;
      b--;
    13e6:	f9 01       	movw	r30, r18
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <u8g2_clip_intersection2+0x28>
    }
    else
    {
      a = c;
    13ec:	da 01       	movw	r26, r20
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    13ee:	a2 17       	cp	r26, r18
    13f0:	b3 07       	cpc	r27, r19
    13f2:	a8 f4       	brcc	.+42     	; 0x141e <u8g2_clip_intersection2+0x58>
    return 0;
  if ( b <= c )
    13f4:	4e 17       	cp	r20, r30
    13f6:	5f 07       	cpc	r21, r31
    13f8:	a0 f4       	brcc	.+40     	; 0x1422 <u8g2_clip_intersection2+0x5c>
    return 0;
  if ( a < c )		
    13fa:	a4 17       	cp	r26, r20
    13fc:	b5 07       	cpc	r27, r21
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <u8g2_clip_intersection2+0x3c>
    1400:	ad 01       	movw	r20, r26
    a = c;
  if ( b > d )
    1402:	2e 17       	cp	r18, r30
    1404:	3f 07       	cpc	r19, r31
    1406:	08 f0       	brcs	.+2      	; 0x140a <u8g2_clip_intersection2+0x44>
    1408:	9f 01       	movw	r18, r30
    b = d;
  
  *ap = a;
    140a:	fc 01       	movw	r30, r24
    140c:	51 83       	std	Z+1, r21	; 0x01
    140e:	40 83       	st	Z, r20
  b -= a;
    1410:	24 1b       	sub	r18, r20
    1412:	35 0b       	sbc	r19, r21
  *len = b;
    1414:	eb 01       	movw	r28, r22
    1416:	39 83       	std	Y+1, r19	; 0x01
    1418:	28 83       	st	Y, r18
  return 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <u8g2_clip_intersection2+0x5e>
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <u8g2_clip_intersection2+0x5e>
  if ( b <= c )
    return 0;
    1422:	80 e0       	ldi	r24, 0x00	; 0
  
  *ap = a;
  b -= a;
  *len = b;
  return 1;
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    142a:	0f 93       	push	r16

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    142c:	dc 01       	movw	r26, r24
    142e:	9a 96       	adiw	r26, 0x2a	; 42
    1430:	ed 91       	ld	r30, X+
    1432:	fc 91       	ld	r31, X
    1434:	9b 97       	sbiw	r26, 0x2b	; 43
    1436:	4e 1b       	sub	r20, r30
    1438:	5f 0b       	sbc	r21, r31
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    143a:	5e 96       	adiw	r26, 0x1e	; 30
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	5f 97       	sbiw	r26, 0x1f	; 31
    1442:	09 95       	icall
}
    1444:	0f 91       	pop	r16
    1446:	08 95       	ret

00001448 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <u8g2_DrawHVLine+0xe>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <u8g2_DrawHVLine+0x10>
    1458:	00 d0       	rcall	.+0      	; 0x145a <u8g2_DrawHVLine+0x12>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	7a 83       	std	Y+2, r23	; 0x02
    1460:	69 83       	std	Y+1, r22	; 0x01
    1462:	5c 83       	std	Y+4, r21	; 0x04
    1464:	4b 83       	std	Y+3, r20	; 0x03
    1466:	3e 83       	std	Y+6, r19	; 0x06
    1468:	2d 83       	std	Y+5, r18	; 0x05
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    146a:	fc 01       	movw	r30, r24
    146c:	e2 59       	subi	r30, 0x92	; 146
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	20 81       	ld	r18, Z
    1472:	22 23       	and	r18, r18
    1474:	09 f4       	brne	.+2      	; 0x1478 <u8g2_DrawHVLine+0x30>
    1476:	74 c0       	rjmp	.+232    	; 0x1560 <u8g2_DrawHVLine+0x118>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	21 15       	cp	r18, r1
    147e:	31 05       	cpc	r19, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <u8g2_DrawHVLine+0x3c>
    1482:	6e c0       	rjmp	.+220    	; 0x1560 <u8g2_DrawHVLine+0x118>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	b0 f0       	brcs	.+44     	; 0x14b6 <u8g2_DrawHVLine+0x6e>
      {
	if ( dir == 2 )
    148a:	02 30       	cpi	r16, 0x02	; 2
    148c:	41 f4       	brne	.+16     	; 0x149e <u8g2_DrawHVLine+0x56>
	{
	  x -= len;
    148e:	62 1b       	sub	r22, r18
    1490:	73 0b       	sbc	r23, r19
    1492:	9b 01       	movw	r18, r22
	  x++;
    1494:	2f 5f       	subi	r18, 0xFF	; 255
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	3a 83       	std	Y+2, r19	; 0x02
    149a:	29 83       	std	Y+1, r18	; 0x01
    149c:	0c c0       	rjmp	.+24     	; 0x14b6 <u8g2_DrawHVLine+0x6e>
	}
	else if ( dir == 3 )
    149e:	03 30       	cpi	r16, 0x03	; 3
    14a0:	51 f4       	brne	.+20     	; 0x14b6 <u8g2_DrawHVLine+0x6e>
	{
	  y -= len;
    14a2:	4b 81       	ldd	r20, Y+3	; 0x03
    14a4:	5c 81       	ldd	r21, Y+4	; 0x04
    14a6:	da 01       	movw	r26, r20
    14a8:	a2 1b       	sub	r26, r18
    14aa:	b3 0b       	sbc	r27, r19
    14ac:	9d 01       	movw	r18, r26
	  y++;
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	3c 83       	std	Y+4, r19	; 0x04
    14b4:	2b 83       	std	Y+3, r18	; 0x03
    14b6:	7c 01       	movw	r14, r24
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    14b8:	10 2f       	mov	r17, r16
    14ba:	11 70       	andi	r17, 0x01	; 1
    14bc:	00 fd       	sbrc	r16, 0
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <u8g2_DrawHVLine+0xb2>
      {
	if ( y < u8g2->user_y0 )
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 ad       	ldd	r18, Z+56	; 0x38
    14c4:	31 ad       	ldd	r19, Z+57	; 0x39
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	82 17       	cp	r24, r18
    14cc:	93 07       	cpc	r25, r19
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <u8g2_DrawHVLine+0x8a>
    14d0:	47 c0       	rjmp	.+142    	; 0x1560 <u8g2_DrawHVLine+0x118>
	  return;
	if ( y >= u8g2->user_y1 )
    14d2:	22 ad       	ldd	r18, Z+58	; 0x3a
    14d4:	33 ad       	ldd	r19, Z+59	; 0x3b
    14d6:	82 17       	cp	r24, r18
    14d8:	93 07       	cpc	r25, r19
    14da:	08 f0       	brcs	.+2      	; 0x14de <u8g2_DrawHVLine+0x96>
    14dc:	41 c0       	rjmp	.+130    	; 0x1560 <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    14de:	26 a9       	ldd	r18, Z+54	; 0x36
    14e0:	37 a9       	ldd	r19, Z+55	; 0x37
    14e2:	44 a9       	ldd	r20, Z+52	; 0x34
    14e4:	55 a9       	ldd	r21, Z+53	; 0x35
    14e6:	be 01       	movw	r22, r28
    14e8:	6b 5f       	subi	r22, 0xFB	; 251
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	ce 01       	movw	r24, r28
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <u8g2_clip_intersection2>
    14f4:	81 11       	cpse	r24, r1
    14f6:	23 c0       	rjmp	.+70     	; 0x153e <u8g2_DrawHVLine+0xf6>
    14f8:	33 c0       	rjmp	.+102    	; 0x1560 <u8g2_DrawHVLine+0x118>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    14fa:	dc 01       	movw	r26, r24
    14fc:	d4 96       	adiw	r26, 0x34	; 52
    14fe:	2d 91       	ld	r18, X+
    1500:	3c 91       	ld	r19, X
    1502:	d5 97       	sbiw	r26, 0x35	; 53
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	82 17       	cp	r24, r18
    150a:	93 07       	cpc	r25, r19
    150c:	48 f1       	brcs	.+82     	; 0x1560 <u8g2_DrawHVLine+0x118>
	  return;
	if ( x >= u8g2->user_x1 )
    150e:	d6 96       	adiw	r26, 0x36	; 54
    1510:	2d 91       	ld	r18, X+
    1512:	3c 91       	ld	r19, X
    1514:	d7 97       	sbiw	r26, 0x37	; 55
    1516:	82 17       	cp	r24, r18
    1518:	93 07       	cpc	r25, r19
    151a:	10 f5       	brcc	.+68     	; 0x1560 <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    151c:	da 96       	adiw	r26, 0x3a	; 58
    151e:	2d 91       	ld	r18, X+
    1520:	3c 91       	ld	r19, X
    1522:	db 97       	sbiw	r26, 0x3b	; 59
    1524:	d8 96       	adiw	r26, 0x38	; 56
    1526:	4d 91       	ld	r20, X+
    1528:	5c 91       	ld	r21, X
    152a:	d9 97       	sbiw	r26, 0x39	; 57
    152c:	be 01       	movw	r22, r28
    152e:	6b 5f       	subi	r22, 0xFB	; 251
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	ce 01       	movw	r24, r28
    1534:	03 96       	adiw	r24, 0x03	; 3
    1536:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <u8g2_clip_intersection2>
    153a:	88 23       	and	r24, r24
    153c:	89 f0       	breq	.+34     	; 0x1560 <u8g2_DrawHVLine+0x118>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    153e:	d7 01       	movw	r26, r14
    1540:	90 96       	adiw	r26, 0x20	; 32
    1542:	ed 91       	ld	r30, X+
    1544:	fc 91       	ld	r31, X
    1546:	91 97       	sbiw	r26, 0x21	; 33
    1548:	04 80       	ldd	r0, Z+4	; 0x04
    154a:	f5 81       	ldd	r31, Z+5	; 0x05
    154c:	e0 2d       	mov	r30, r0
    154e:	2d 81       	ldd	r18, Y+5	; 0x05
    1550:	3e 81       	ldd	r19, Y+6	; 0x06
    1552:	4b 81       	ldd	r20, Y+3	; 0x03
    1554:	5c 81       	ldd	r21, Y+4	; 0x04
    1556:	69 81       	ldd	r22, Y+1	; 0x01
    1558:	7a 81       	ldd	r23, Y+2	; 0x02
    155a:	01 2f       	mov	r16, r17
    155c:	c7 01       	movw	r24, r14
    155e:	09 95       	icall
    }
}
    1560:	26 96       	adiw	r28, 0x06	; 6
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	08 95       	ret

0000157a <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    157a:	46 17       	cp	r20, r22
    157c:	57 07       	cpc	r21, r23
    157e:	40 f4       	brcc	.+16     	; 0x1590 <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    1580:	82 17       	cp	r24, r18
    1582:	93 07       	cpc	r25, r19
    1584:	68 f0       	brcs	.+26     	; 0x15a0 <u8g2_is_intersection_decision_tree+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    1586:	24 17       	cp	r18, r20
    1588:	35 07       	cpc	r19, r21
    158a:	60 f4       	brcc	.+24     	; 0x15a4 <u8g2_is_intersection_decision_tree+0x2a>
      {
	return 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1590:	82 17       	cp	r24, r18
    1592:	93 07       	cpc	r25, r19
    1594:	48 f4       	brcc	.+18     	; 0x15a8 <u8g2_is_intersection_decision_tree+0x2e>
    {
      if ( v0 > v1 )	// v0 > v1
    1596:	24 17       	cp	r18, r20
    1598:	35 07       	cpc	r19, r21
    159a:	40 f4       	brcc	.+16     	; 0x15ac <u8g2_is_intersection_decision_tree+0x32>
      {
	return 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
    15ae:	08 95       	ret

000015b0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	ec 01       	movw	r28, r24
    15c2:	7b 01       	movw	r14, r22
    15c4:	69 01       	movw	r12, r18
    15c6:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    15c8:	6a ad       	ldd	r22, Y+58	; 0x3a
    15ca:	7b ad       	ldd	r23, Y+59	; 0x3b
    15cc:	88 ad       	ldd	r24, Y+56	; 0x38
    15ce:	99 ad       	ldd	r25, Y+57	; 0x39
    15d0:	0e 94 bd 0a 	call	0x157a	; 0x157a <u8g2_is_intersection_decision_tree>
    15d4:	88 23       	and	r24, r24
    15d6:	41 f0       	breq	.+16     	; 0x15e8 <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    15d8:	6e a9       	ldd	r22, Y+54	; 0x36
    15da:	7f a9       	ldd	r23, Y+55	; 0x37
    15dc:	96 01       	movw	r18, r12
    15de:	a7 01       	movw	r20, r14
    15e0:	8c a9       	ldd	r24, Y+52	; 0x34
    15e2:	9d a9       	ldd	r25, Y+53	; 0x35
    15e4:	0e 94 bd 0a 	call	0x157a	; 0x157a <u8g2_is_intersection_decision_tree>
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	08 95       	ret

000015fa <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	dc 01       	movw	r26, r24
    1604:	ca 01       	movw	r24, r20
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    1606:	54 2f       	mov	r21, r20
    1608:	57 70       	andi	r21, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    160a:	c1 e0       	ldi	r28, 0x01	; 1
    160c:	d0 e0       	ldi	r29, 0x00	; 0
    160e:	05 2e       	mov	r0, r21
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    1612:	cc 0f       	add	r28, r28
    1614:	dd 1f       	adc	r29, r29
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    161a:	1c 2f       	mov	r17, r28

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    161c:	fd 01       	movw	r30, r26
    161e:	ec 58       	subi	r30, 0x8C	; 140
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	e0 81       	ld	r30, Z
    1624:	e2 30       	cpi	r30, 0x02	; 2
    1626:	10 f0       	brcs	.+4      	; 0x162c <u8g2_ll_hvline_vertical_top_lsb+0x32>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	01 c0       	rjmp	.+2      	; 0x162e <u8g2_ll_hvline_vertical_top_lsb+0x34>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    162c:	4c 2f       	mov	r20, r28
  if ( u8g2->draw_color != 1 )
    162e:	e1 30       	cpi	r30, 0x01	; 1
    1630:	09 f4       	brne	.+2      	; 0x1634 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    1632:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    1634:	88 7f       	andi	r24, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1636:	ed 91       	ld	r30, X+
    1638:	fc 91       	ld	r31, X
    163a:	11 97       	sbiw	r26, 0x01	; 1
    163c:	c0 89       	ldd	r28, Z+16	; 0x10
    163e:	c8 9f       	mul	r28, r24
    1640:	f0 01       	movw	r30, r0
    1642:	c9 9f       	mul	r28, r25
    1644:	f0 0d       	add	r31, r0
    1646:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
    1648:	92 96       	adiw	r26, 0x22	; 34
    164a:	8d 91       	ld	r24, X+
    164c:	9c 91       	ld	r25, X
    164e:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
    1650:	6e 0f       	add	r22, r30
    1652:	7f 1f       	adc	r23, r31
    1654:	fc 01       	movw	r30, r24
    1656:	e6 0f       	add	r30, r22
    1658:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    165a:	01 11       	cpse	r16, r1
    165c:	08 c0       	rjmp	.+16     	; 0x166e <u8g2_ll_hvline_vertical_top_lsb+0x74>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    165e:	80 81       	ld	r24, Z
    1660:	84 2b       	or	r24, r20
	*ptr ^= xor_mask;
    1662:	81 27       	eor	r24, r17
    1664:	81 93       	st	Z+, r24
	ptr++;
	len--;
    1666:	21 50       	subi	r18, 0x01	; 1
    1668:	31 09       	sbc	r19, r1
      } while( len != 0 );
    166a:	c9 f7       	brne	.-14     	; 0x165e <u8g2_ll_hvline_vertical_top_lsb+0x64>
    166c:	21 c0       	rjmp	.+66     	; 0x16b0 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    166e:	90 81       	ld	r25, Z
    1670:	94 2b       	or	r25, r20
      *ptr ^= xor_mask;
    1672:	91 27       	eor	r25, r17
    1674:	90 83       	st	Z, r25
      
      bit_pos++;
    1676:	5f 5f       	subi	r21, 0xFF	; 255
      bit_pos &= 7;
    1678:	57 70       	andi	r21, 0x07	; 7

      len--;
    167a:	21 50       	subi	r18, 0x01	; 1
    167c:	31 09       	sbc	r19, r1

      if ( bit_pos == 0 )
    167e:	51 11       	cpse	r21, r1
    1680:	10 c0       	rjmp	.+32     	; 0x16a2 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    1682:	96 96       	adiw	r26, 0x26	; 38
    1684:	8d 91       	ld	r24, X+
    1686:	9c 91       	ld	r25, X
    1688:	97 97       	sbiw	r26, 0x27	; 39
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    168e:	ed 01       	movw	r28, r26
    1690:	cc 58       	subi	r28, 0x8C	; 140
    1692:	df 4f       	sbci	r29, 0xFF	; 255
    1694:	88 81       	ld	r24, Y
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	08 f4       	brcc	.+2      	; 0x169c <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
    169a:	41 e0       	ldi	r20, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	21 f4       	brne	.+8      	; 0x16a8 <u8g2_ll_hvline_vertical_top_lsb+0xae>
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    16a2:	44 0f       	add	r20, r20
	xor_mask <<= 1;
    16a4:	11 0f       	add	r17, r17
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    16a8:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	f9 f6       	brne	.-66     	; 0x166e <u8g2_ll_hvline_vertical_top_lsb+0x74>
  }
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	fc 01       	movw	r30, r24
    16c0:	a0 81       	ld	r26, Z
    16c2:	b1 81       	ldd	r27, Z+1	; 0x01
    16c4:	84 a1       	ldd	r24, Z+36	; 0x24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9c 01       	movw	r18, r24
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	22 0f       	add	r18, r18
    16d4:	33 1f       	adc	r19, r19
    16d6:	31 a7       	std	Z+41, r19	; 0x29
    16d8:	20 a7       	std	Z+40, r18	; 0x28
    16da:	50 96       	adiw	r26, 0x10	; 16
    16dc:	2c 91       	ld	r18, X
    16de:	50 97       	sbiw	r26, 0x10	; 16
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	22 0f       	add	r18, r18
    16e8:	33 1f       	adc	r19, r19
    16ea:	22 0f       	add	r18, r18
    16ec:	33 1f       	adc	r19, r19
    16ee:	37 a3       	std	Z+39, r19	; 0x27
    16f0:	26 a3       	std	Z+38, r18	; 0x26
    16f2:	75 a1       	ldd	r23, Z+37	; 0x25
    16f4:	27 2f       	mov	r18, r23
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	a9 01       	movw	r20, r18
    16fa:	44 0f       	add	r20, r20
    16fc:	55 1f       	adc	r21, r21
    16fe:	44 0f       	add	r20, r20
    1700:	55 1f       	adc	r21, r21
    1702:	44 0f       	add	r20, r20
    1704:	55 1f       	adc	r21, r21
    1706:	53 a7       	std	Z+43, r21	; 0x2b
    1708:	42 a7       	std	Z+42, r20	; 0x2a
    170a:	28 0f       	add	r18, r24
    170c:	39 1f       	adc	r19, r25
    170e:	51 96       	adiw	r26, 0x11	; 17
    1710:	6c 91       	ld	r22, X
    1712:	51 97       	sbiw	r26, 0x11	; 17
    1714:	c6 2f       	mov	r28, r22
    1716:	d0 e0       	ldi	r29, 0x00	; 0
    1718:	c2 17       	cp	r28, r18
    171a:	d3 07       	cpc	r29, r19
    171c:	18 f4       	brcc	.+6      	; 0x1724 <u8g2_update_dimension_common+0x6a>
    171e:	ce 01       	movw	r24, r28
    1720:	87 1b       	sub	r24, r23
    1722:	91 09       	sbc	r25, r1
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	55 a7       	std	Z+45, r21	; 0x2d
    1732:	44 a7       	std	Z+44, r20	; 0x2c
    1734:	84 0f       	add	r24, r20
    1736:	95 1f       	adc	r25, r21
    1738:	97 a7       	std	Z+47, r25	; 0x2f
    173a:	86 a7       	std	Z+46, r24	; 0x2e
    173c:	54 96       	adiw	r26, 0x14	; 20
    173e:	8d 91       	ld	r24, X+
    1740:	9c 91       	ld	r25, X
    1742:	55 97       	sbiw	r26, 0x15	; 21
    1744:	91 ab       	std	Z+49, r25	; 0x31
    1746:	80 ab       	std	Z+48, r24	; 0x30
    1748:	56 96       	adiw	r26, 0x16	; 22
    174a:	8d 91       	ld	r24, X+
    174c:	9c 91       	ld	r25, X
    174e:	57 97       	sbiw	r26, 0x17	; 23
    1750:	93 ab       	std	Z+51, r25	; 0x33
    1752:	82 ab       	std	Z+50, r24	; 0x32
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <u8g2_update_dimension_r0>:
    175a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <u8g2_update_dimension_common>
    175e:	08 95       	ret

00001760 <u8g2_apply_clip_window>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ec 01       	movw	r28, r24
    176a:	fc 01       	movw	r30, r24
    176c:	ee 5b       	subi	r30, 0xBE	; 190
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	00 81       	ld	r16, Z
    1772:	11 81       	ldd	r17, Z+1	; 0x01
    1774:	2e ad       	ldd	r18, Y+62	; 0x3e
    1776:	3f ad       	ldd	r19, Y+63	; 0x3f
    1778:	32 97       	sbiw	r30, 0x02	; 2
    177a:	40 81       	ld	r20, Z
    177c:	51 81       	ldd	r21, Z+1	; 0x01
    177e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1780:	7d ad       	ldd	r23, Y+61	; 0x3d
    1782:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <u8g2_IsIntersection>
    1786:	81 11       	cpse	r24, r1
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <u8g2_apply_clip_window+0x32>
    178a:	c2 59       	subi	r28, 0x92	; 146
    178c:	df 4f       	sbci	r29, 0xFF	; 255
    178e:	18 82       	st	Y, r1
    1790:	2f c0       	rjmp	.+94     	; 0x17f0 <u8g2_apply_clip_window+0x90>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	fe 01       	movw	r30, r28
    1796:	e2 59       	subi	r30, 0x92	; 146
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 83       	st	Z, r24
    179c:	2c a9       	ldd	r18, Y+52	; 0x34
    179e:	3d a9       	ldd	r19, Y+53	; 0x35
    17a0:	8c ad       	ldd	r24, Y+60	; 0x3c
    17a2:	9d ad       	ldd	r25, Y+61	; 0x3d
    17a4:	28 17       	cp	r18, r24
    17a6:	39 07       	cpc	r19, r25
    17a8:	10 f4       	brcc	.+4      	; 0x17ae <u8g2_apply_clip_window+0x4e>
    17aa:	9d ab       	std	Y+53, r25	; 0x35
    17ac:	8c ab       	std	Y+52, r24	; 0x34
    17ae:	2e a9       	ldd	r18, Y+54	; 0x36
    17b0:	3f a9       	ldd	r19, Y+55	; 0x37
    17b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    17b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    17b6:	82 17       	cp	r24, r18
    17b8:	93 07       	cpc	r25, r19
    17ba:	10 f4       	brcc	.+4      	; 0x17c0 <u8g2_apply_clip_window+0x60>
    17bc:	9f ab       	std	Y+55, r25	; 0x37
    17be:	8e ab       	std	Y+54, r24	; 0x36
    17c0:	28 ad       	ldd	r18, Y+56	; 0x38
    17c2:	39 ad       	ldd	r19, Y+57	; 0x39
    17c4:	fe 01       	movw	r30, r28
    17c6:	e0 5c       	subi	r30, 0xC0	; 192
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	28 17       	cp	r18, r24
    17d0:	39 07       	cpc	r19, r25
    17d2:	10 f4       	brcc	.+4      	; 0x17d8 <u8g2_apply_clip_window+0x78>
    17d4:	99 af       	std	Y+57, r25	; 0x39
    17d6:	88 af       	std	Y+56, r24	; 0x38
    17d8:	2a ad       	ldd	r18, Y+58	; 0x3a
    17da:	3b ad       	ldd	r19, Y+59	; 0x3b
    17dc:	fe 01       	movw	r30, r28
    17de:	ee 5b       	subi	r30, 0xBE	; 190
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	82 17       	cp	r24, r18
    17e8:	93 07       	cpc	r25, r19
    17ea:	10 f4       	brcc	.+4      	; 0x17f0 <u8g2_apply_clip_window+0x90>
    17ec:	9b af       	std	Y+59, r25	; 0x3b
    17ee:	8a af       	std	Y+58, r24	; 0x3a
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <u8g2_update_page_win_r0>:
    17fa:	fc 01       	movw	r30, r24
    17fc:	15 aa       	std	Z+53, r1	; 0x35
    17fe:	14 aa       	std	Z+52, r1	; 0x34
    1800:	80 a9       	ldd	r24, Z+48	; 0x30
    1802:	91 a9       	ldd	r25, Z+49	; 0x31
    1804:	97 ab       	std	Z+55, r25	; 0x37
    1806:	86 ab       	std	Z+54, r24	; 0x36
    1808:	84 a5       	ldd	r24, Z+44	; 0x2c
    180a:	95 a5       	ldd	r25, Z+45	; 0x2d
    180c:	91 af       	std	Z+57, r25	; 0x39
    180e:	80 af       	std	Z+56, r24	; 0x38
    1810:	86 a5       	ldd	r24, Z+46	; 0x2e
    1812:	97 a5       	ldd	r25, Z+47	; 0x2f
    1814:	93 af       	std	Z+59, r25	; 0x3b
    1816:	82 af       	std	Z+58, r24	; 0x3a
    1818:	cf 01       	movw	r24, r30
    181a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <u8g2_apply_clip_window>
    181e:	08 95       	ret

00001820 <u8g2_draw_l90_r0>:
    1820:	0f 93       	push	r16
    1822:	0e 94 15 0a 	call	0x142a	; 0x142a <u8g2_draw_hv_line_2dir>
    1826:	0f 91       	pop	r16
    1828:	08 95       	ret

0000182a <u8g2_SetMaxClipWindow>:
    182a:	dc 01       	movw	r26, r24
    182c:	dd 96       	adiw	r26, 0x3d	; 61
    182e:	1c 92       	st	X, r1
    1830:	1e 92       	st	-X, r1
    1832:	dc 97       	sbiw	r26, 0x3c	; 60
    1834:	fc 01       	movw	r30, r24
    1836:	e0 5c       	subi	r30, 0xC0	; 192
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	11 82       	std	Z+1, r1	; 0x01
    183c:	10 82       	st	Z, r1
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	3f ef       	ldi	r19, 0xFF	; 255
    1842:	fc 01       	movw	r30, r24
    1844:	37 af       	std	Z+63, r19	; 0x3f
    1846:	26 af       	std	Z+62, r18	; 0x3e
    1848:	ee 5b       	subi	r30, 0xBE	; 190
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	31 83       	std	Z+1, r19	; 0x01
    184e:	20 83       	st	Z, r18
    1850:	90 96       	adiw	r26, 0x20	; 32
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	91 97       	sbiw	r26, 0x21	; 33
    1858:	02 80       	ldd	r0, Z+2	; 0x02
    185a:	f3 81       	ldd	r31, Z+3	; 0x03
    185c:	e0 2d       	mov	r30, r0
    185e:	09 95       	icall
    1860:	08 95       	ret

00001862 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    186c:	fc 01       	movw	r30, r24
    186e:	ec 5b       	subi	r30, 0xBC	; 188
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	11 82       	std	Z+1, r1	; 0x01
    1874:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1876:	3f 8f       	std	Y+31, r19	; 0x1f
    1878:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    187a:	7b a3       	std	Y+35, r23	; 0x23
    187c:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    187e:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    1880:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    1882:	3f 96       	adiw	r30, 0x0f	; 15
    1884:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    1886:	b0 96       	adiw	r30, 0x20	; 32
    1888:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    188a:	34 97       	sbiw	r30, 0x04	; 4
    188c:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    188e:	35 96       	adiw	r30, 0x05	; 5
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1894:	31 96       	adiw	r30, 0x01	; 1
    1896:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1898:	19 a3       	std	Y+33, r17	; 0x21
    189a:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    189c:	d8 01       	movw	r26, r16
    189e:	ed 91       	ld	r30, X+
    18a0:	fc 91       	ld	r31, X
    18a2:	ce 01       	movw	r24, r28
    18a4:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    18a6:	ce 01       	movw	r24, r28
    18a8:	0e 94 15 0c 	call	0x182a	; 0x182a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    18ac:	ce 01       	movw	r24, r28
    18ae:	0e 94 bc 09 	call	0x1378	; 0x1378 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    18b2:	ca 5a       	subi	r28, 0xAA	; 170
    18b4:	df 4f       	sbci	r29, 0xFF	; 255
    18b6:	18 82       	st	Y, r1
#endif
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    18c2:	66 23       	and	r22, r22
    18c4:	29 f0       	breq	.+10     	; 0x18d0 <u8x8_ascii_next+0xe>
    18c6:	6a 30       	cpi	r22, 0x0A	; 10
    18c8:	31 f0       	breq	.+12     	; 0x18d6 <u8x8_ascii_next+0x14>
    18ca:	86 2f       	mov	r24, r22
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	08 95       	ret
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	9f ef       	ldi	r25, 0xFF	; 255
    18d4:	08 95       	ret
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	08 95       	ret

000018dc <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    18dc:	fc 01       	movw	r30, r24
    18de:	10 8e       	std	Z+24, r1	; 0x18
    18e0:	08 95       	ret

000018e2 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
    18e2:	46 2f       	mov	r20, r22
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
    18e4:	dc 01       	movw	r26, r24
    18e6:	18 96       	adiw	r26, 0x08	; 8
    18e8:	ed 91       	ld	r30, X+
    18ea:	fc 91       	ld	r31, X
    18ec:	19 97       	sbiw	r26, 0x09	; 9
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	60 e2       	ldi	r22, 0x20	; 32
    18f4:	09 95       	icall
}
    18f6:	08 95       	ret

000018f8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    18f8:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    18fa:	dc 01       	movw	r26, r24
    18fc:	18 96       	adiw	r26, 0x08	; 8
    18fe:	ed 91       	ld	r30, X+
    1900:	fc 91       	ld	r31, X
    1902:	19 97       	sbiw	r26, 0x09	; 9
    1904:	46 2f       	mov	r20, r22
    1906:	67 e1       	ldi	r22, 0x17	; 23
    1908:	09 95       	icall
}
    190a:	08 95       	ret

0000190c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	1f 92       	push	r1
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    1918:	ae 01       	movw	r20, r28
    191a:	4f 5f       	subi	r20, 0xFF	; 255
    191c:	5f 4f       	sbci	r21, 0xFF	; 255
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <u8x8_byte_SendBytes>
}
    1924:	0f 90       	pop	r0
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret

0000192c <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    192c:	46 2f       	mov	r20, r22
    192e:	dc 01       	movw	r26, r24
    1930:	16 96       	adiw	r26, 0x06	; 6
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X
    1936:	17 97       	sbiw	r26, 0x07	; 7
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	65 e1       	ldi	r22, 0x15	; 21
    193e:	09 95       	icall
    1940:	08 95       	ret

00001942 <u8x8_cad_SendArg>:
    1942:	46 2f       	mov	r20, r22
    1944:	dc 01       	movw	r26, r24
    1946:	16 96       	adiw	r26, 0x06	; 6
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	17 97       	sbiw	r26, 0x07	; 7
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	66 e1       	ldi	r22, 0x16	; 22
    1954:	09 95       	icall
    1956:	08 95       	ret

00001958 <u8x8_cad_SendData>:
    1958:	9a 01       	movw	r18, r20
    195a:	dc 01       	movw	r26, r24
    195c:	16 96       	adiw	r26, 0x06	; 6
    195e:	ed 91       	ld	r30, X+
    1960:	fc 91       	ld	r31, X
    1962:	17 97       	sbiw	r26, 0x07	; 7
    1964:	46 2f       	mov	r20, r22
    1966:	67 e1       	ldi	r22, 0x17	; 23
    1968:	09 95       	icall
    196a:	08 95       	ret

0000196c <u8x8_cad_StartTransfer>:
    196c:	dc 01       	movw	r26, r24
    196e:	16 96       	adiw	r26, 0x06	; 6
    1970:	ed 91       	ld	r30, X+
    1972:	fc 91       	ld	r31, X
    1974:	17 97       	sbiw	r26, 0x07	; 7
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	68 e1       	ldi	r22, 0x18	; 24
    197e:	09 95       	icall
    1980:	08 95       	ret

00001982 <u8x8_cad_EndTransfer>:
    1982:	dc 01       	movw	r26, r24
    1984:	16 96       	adiw	r26, 0x06	; 6
    1986:	ed 91       	ld	r30, X+
    1988:	fc 91       	ld	r31, X
    198a:	17 97       	sbiw	r26, 0x07	; 7
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	69 e1       	ldi	r22, 0x19	; 25
    1994:	09 95       	icall
    1996:	08 95       	ret

00001998 <u8x8_cad_SendSequence>:
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	1f 92       	push	r1
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	7c 01       	movw	r14, r24
    19ac:	8b 01       	movw	r16, r22
    19ae:	d8 01       	movw	r26, r16
    19b0:	6d 91       	ld	r22, X+
    19b2:	8d 01       	movw	r16, r26
    19b4:	67 31       	cpi	r22, 0x17	; 23
    19b6:	b9 f0       	breq	.+46     	; 0x19e6 <u8x8_cad_SendSequence+0x4e>
    19b8:	18 f4       	brcc	.+6      	; 0x19c0 <u8x8_cad_SendSequence+0x28>
    19ba:	65 31       	cpi	r22, 0x15	; 21
    19bc:	30 f4       	brcc	.+12     	; 0x19ca <u8x8_cad_SendSequence+0x32>
    19be:	33 c0       	rjmp	.+102    	; 0x1a26 <u8x8_cad_SendSequence+0x8e>
    19c0:	6a 31       	cpi	r22, 0x1A	; 26
    19c2:	e8 f0       	brcs	.+58     	; 0x19fe <u8x8_cad_SendSequence+0x66>
    19c4:	6e 3f       	cpi	r22, 0xFE	; 254
    19c6:	31 f1       	breq	.+76     	; 0x1a14 <u8x8_cad_SendSequence+0x7c>
    19c8:	2e c0       	rjmp	.+92     	; 0x1a26 <u8x8_cad_SendSequence+0x8e>
    19ca:	fd 01       	movw	r30, r26
    19cc:	41 91       	ld	r20, Z+
    19ce:	8f 01       	movw	r16, r30
    19d0:	49 83       	std	Y+1, r20	; 0x01
    19d2:	d7 01       	movw	r26, r14
    19d4:	16 96       	adiw	r26, 0x06	; 6
    19d6:	ed 91       	ld	r30, X+
    19d8:	fc 91       	ld	r31, X
    19da:	17 97       	sbiw	r26, 0x07	; 7
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	c7 01       	movw	r24, r14
    19e2:	09 95       	icall
    19e4:	e4 cf       	rjmp	.-56     	; 0x19ae <u8x8_cad_SendSequence+0x16>
    19e6:	fd 01       	movw	r30, r26
    19e8:	81 91       	ld	r24, Z+
    19ea:	8f 01       	movw	r16, r30
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	ae 01       	movw	r20, r28
    19f0:	4f 5f       	subi	r20, 0xFF	; 255
    19f2:	5f 4f       	sbci	r21, 0xFF	; 255
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	c7 01       	movw	r24, r14
    19f8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <u8x8_cad_SendData>
    19fc:	d8 cf       	rjmp	.-80     	; 0x19ae <u8x8_cad_SendSequence+0x16>
    19fe:	d7 01       	movw	r26, r14
    1a00:	16 96       	adiw	r26, 0x06	; 6
    1a02:	ed 91       	ld	r30, X+
    1a04:	fc 91       	ld	r31, X
    1a06:	17 97       	sbiw	r26, 0x07	; 7
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	c7 01       	movw	r24, r14
    1a10:	09 95       	icall
    1a12:	cd cf       	rjmp	.-102    	; 0x19ae <u8x8_cad_SendSequence+0x16>
    1a14:	fd 01       	movw	r30, r26
    1a16:	41 91       	ld	r20, Z+
    1a18:	8f 01       	movw	r16, r30
    1a1a:	49 83       	std	Y+1, r20	; 0x01
    1a1c:	69 e2       	ldi	r22, 0x29	; 41
    1a1e:	c7 01       	movw	r24, r14
    1a20:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1a24:	c4 cf       	rjmp	.-120    	; 0x19ae <u8x8_cad_SendSequence+0x16>
    1a26:	0f 90       	pop	r0
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	08 95       	ret

00001a36 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	8c 01       	movw	r16, r24
    1a44:	c6 2f       	mov	r28, r22
    1a46:	d4 2f       	mov	r29, r20
    1a48:	79 01       	movw	r14, r18
  switch(msg)
    1a4a:	66 31       	cpi	r22, 0x16	; 22
    1a4c:	a1 f0       	breq	.+40     	; 0x1a76 <u8x8_cad_001+0x40>
    1a4e:	28 f4       	brcc	.+10     	; 0x1a5a <u8x8_cad_001+0x24>
    1a50:	64 31       	cpi	r22, 0x14	; 20
    1a52:	e9 f0       	breq	.+58     	; 0x1a8e <u8x8_cad_001+0x58>
    1a54:	65 31       	cpi	r22, 0x15	; 21
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <u8x8_cad_001+0x2e>
    1a58:	25 c0       	rjmp	.+74     	; 0x1aa4 <u8x8_cad_001+0x6e>
    1a5a:	67 31       	cpi	r22, 0x17	; 23
    1a5c:	a9 f0       	breq	.+42     	; 0x1a88 <u8x8_cad_001+0x52>
    1a5e:	6a 31       	cpi	r22, 0x1A	; 26
    1a60:	08 f5       	brcc	.+66     	; 0x1aa4 <u8x8_cad_001+0x6e>
    1a62:	15 c0       	rjmp	.+42     	; 0x1a8e <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1a6a:	6d 2f       	mov	r22, r29
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	0e 94 86 0c 	call	0x190c	; 0x190c <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1a74:	18 c0       	rjmp	.+48     	; 0x1aa6 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1a7c:	6d 2f       	mov	r22, r29
    1a7e:	c8 01       	movw	r24, r16
    1a80:	0e 94 86 0c 	call	0x190c	; 0x190c <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1a8e:	d8 01       	movw	r26, r16
    1a90:	18 96       	adiw	r26, 0x08	; 8
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	19 97       	sbiw	r26, 0x09	; 9
    1a98:	97 01       	movw	r18, r14
    1a9a:	4d 2f       	mov	r20, r29
    1a9c:	6c 2f       	mov	r22, r28
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	09 95       	icall
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <u8x8_cad_001+0x70>
    default:
      return 0;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	08 95       	ret

00001ab4 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	71 83       	std	Z+1, r23	; 0x01
    1ab8:	60 83       	st	Z, r22
    1aba:	fb 01       	movw	r30, r22
    1abc:	22 89       	ldd	r18, Z+18	; 0x12
    1abe:	fc 01       	movw	r30, r24
    1ac0:	24 8b       	std	Z+20, r18	; 0x14
    1ac2:	08 95       	ret

00001ac4 <u8x8_d_helper_display_init>:
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	ec 01       	movw	r28, r24
    1aca:	ea 85       	ldd	r30, Y+10	; 0x0a
    1acc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	68 e2       	ldi	r22, 0x28	; 40
    1ad6:	09 95       	icall
    1ad8:	ee 81       	ldd	r30, Y+6	; 0x06
    1ada:	ff 81       	ldd	r31, Y+7	; 0x07
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	64 e1       	ldi	r22, 0x14	; 20
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	09 95       	icall
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	6b e4       	ldi	r22, 0x4B	; 75
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1af2:	e8 81       	ld	r30, Y
    1af4:	f9 81       	ldd	r31, Y+1	; 0x01
    1af6:	44 81       	ldd	r20, Z+4	; 0x04
    1af8:	69 e2       	ldi	r22, 0x29	; 41
    1afa:	ce 01       	movw	r24, r28
    1afc:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	6b e4       	ldi	r22, 0x4B	; 75
    1b04:	ce 01       	movw	r24, r28
    1b06:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1b0a:	e8 81       	ld	r30, Y
    1b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b0e:	44 81       	ldd	r20, Z+4	; 0x04
    1b10:	69 e2       	ldi	r22, 0x29	; 41
    1b12:	ce 01       	movw	r24, r28
    1b14:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	6b e4       	ldi	r22, 0x4B	; 75
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1b22:	e8 81       	ld	r30, Y
    1b24:	f9 81       	ldd	r31, Y+1	; 0x01
    1b26:	45 81       	ldd	r20, Z+5	; 0x05
    1b28:	69 e2       	ldi	r22, 0x29	; 41
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <u8x8_gpio_call>
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <u8x8_DrawTile>:
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <u8x8_DrawTile+0xa>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <u8x8_DrawTile+0xc>
    1b42:	1f 92       	push	r1
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	6c 83       	std	Y+4, r22	; 0x04
    1b4a:	4d 83       	std	Y+5, r20	; 0x05
    1b4c:	2b 83       	std	Y+3, r18	; 0x03
    1b4e:	1a 83       	std	Y+2, r17	; 0x02
    1b50:	09 83       	std	Y+1, r16	; 0x01
    1b52:	dc 01       	movw	r26, r24
    1b54:	14 96       	adiw	r26, 0x04	; 4
    1b56:	ed 91       	ld	r30, X+
    1b58:	fc 91       	ld	r31, X
    1b5a:	15 97       	sbiw	r26, 0x05	; 5
    1b5c:	9e 01       	movw	r18, r28
    1b5e:	2f 5f       	subi	r18, 0xFF	; 255
    1b60:	3f 4f       	sbci	r19, 0xFF	; 255
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	6f e0       	ldi	r22, 0x0F	; 15
    1b66:	09 95       	icall
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <u8x8_SetupMemory>:
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	14 96       	adiw	r26, 0x04	; 4
    1b80:	ed 91       	ld	r30, X+
    1b82:	fc 91       	ld	r31, X
    1b84:	15 97       	sbiw	r26, 0x05	; 5
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	69 e0       	ldi	r22, 0x09	; 9
    1b8e:	09 95       	icall
    1b90:	08 95       	ret

00001b92 <u8x8_InitDisplay>:
    1b92:	dc 01       	movw	r26, r24
    1b94:	14 96       	adiw	r26, 0x04	; 4
    1b96:	ed 91       	ld	r30, X+
    1b98:	fc 91       	ld	r31, X
    1b9a:	15 97       	sbiw	r26, 0x05	; 5
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	6a e0       	ldi	r22, 0x0A	; 10
    1ba4:	09 95       	icall
    1ba6:	08 95       	ret

00001ba8 <u8x8_SetPowerSave>:
    1ba8:	46 2f       	mov	r20, r22
    1baa:	dc 01       	movw	r26, r24
    1bac:	14 96       	adiw	r26, 0x04	; 4
    1bae:	ed 91       	ld	r30, X+
    1bb0:	fc 91       	ld	r31, X
    1bb2:	15 97       	sbiw	r26, 0x05	; 5
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	6b e0       	ldi	r22, 0x0B	; 11
    1bba:	09 95       	icall
    1bbc:	08 95       	ret

00001bbe <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	14 96       	adiw	r26, 0x04	; 4
    1bc2:	ed 91       	ld	r30, X+
    1bc4:	fc 91       	ld	r31, X
    1bc6:	15 97       	sbiw	r26, 0x05	; 5
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	60 e1       	ldi	r22, 0x10	; 16
    1bd0:	09 95       	icall
    1bd2:	08 95       	ret

00001bd4 <u8x8_d_ssd1306_sh1106_generic>:
      break;
    default:
      return 0;
  }
  return 1;
}
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	8c 01       	movw	r16, r24
    1be2:	c4 2f       	mov	r28, r20
    1be4:	79 01       	movw	r14, r18
    1be6:	6d 30       	cpi	r22, 0x0D	; 13
    1be8:	b9 f0       	breq	.+46     	; 0x1c18 <u8x8_d_ssd1306_sh1106_generic+0x44>
    1bea:	18 f4       	brcc	.+6      	; 0x1bf2 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    1bec:	6b 30       	cpi	r22, 0x0B	; 11
    1bee:	31 f0       	breq	.+12     	; 0x1bfc <u8x8_d_ssd1306_sh1106_generic+0x28>
    1bf0:	72 c0       	rjmp	.+228    	; 0x1cd6 <u8x8_d_ssd1306_sh1106_generic+0x102>
    1bf2:	6e 30       	cpi	r22, 0x0E	; 14
    1bf4:	69 f1       	breq	.+90     	; 0x1c50 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    1bf6:	6f 30       	cpi	r22, 0x0F	; 15
    1bf8:	d1 f1       	breq	.+116    	; 0x1c6e <u8x8_d_ssd1306_sh1106_generic+0x9a>
    1bfa:	6d c0       	rjmp	.+218    	; 0x1cd6 <u8x8_d_ssd1306_sh1106_generic+0x102>
    1bfc:	41 11       	cpse	r20, r1
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <u8x8_d_ssd1306_sh1106_generic+0x38>
    1c00:	61 e3       	ldi	r22, 0x31	; 49
    1c02:	71 e0       	ldi	r23, 0x01	; 1
    1c04:	0e 94 cc 0c 	call	0x1998	; 0x1998 <u8x8_cad_SendSequence>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	66 c0       	rjmp	.+204    	; 0x1cd8 <u8x8_d_ssd1306_sh1106_generic+0x104>
    1c0c:	6c e2       	ldi	r22, 0x2C	; 44
    1c0e:	71 e0       	ldi	r23, 0x01	; 1
    1c10:	0e 94 cc 0c 	call	0x1998	; 0x1998 <u8x8_cad_SendSequence>
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	60 c0       	rjmp	.+192    	; 0x1cd8 <u8x8_d_ssd1306_sh1106_generic+0x104>
    1c18:	41 11       	cpse	r20, r1
    1c1a:	0d c0       	rjmp	.+26     	; 0x1c36 <u8x8_d_ssd1306_sh1106_generic+0x62>
    1c1c:	65 e2       	ldi	r22, 0x25	; 37
    1c1e:	71 e0       	ldi	r23, 0x01	; 1
    1c20:	0e 94 cc 0c 	call	0x1998	; 0x1998 <u8x8_cad_SendSequence>
    1c24:	d8 01       	movw	r26, r16
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	11 97       	sbiw	r26, 0x01	; 1
    1c2c:	82 89       	ldd	r24, Z+18	; 0x12
    1c2e:	54 96       	adiw	r26, 0x14	; 20
    1c30:	8c 93       	st	X, r24
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	51 c0       	rjmp	.+162    	; 0x1cd8 <u8x8_d_ssd1306_sh1106_generic+0x104>
    1c36:	6e e1       	ldi	r22, 0x1E	; 30
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <u8x8_cad_SendSequence>
    1c3e:	d8 01       	movw	r26, r16
    1c40:	ed 91       	ld	r30, X+
    1c42:	fc 91       	ld	r31, X
    1c44:	11 97       	sbiw	r26, 0x01	; 1
    1c46:	83 89       	ldd	r24, Z+19	; 0x13
    1c48:	54 96       	adiw	r26, 0x14	; 20
    1c4a:	8c 93       	st	X, r24
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	44 c0       	rjmp	.+136    	; 0x1cd8 <u8x8_d_ssd1306_sh1106_generic+0x104>
    1c50:	0e 94 b6 0c 	call	0x196c	; 0x196c <u8x8_cad_StartTransfer>
    1c54:	61 e8       	ldi	r22, 0x81	; 129
    1c56:	c8 01       	movw	r24, r16
    1c58:	0e 94 96 0c 	call	0x192c	; 0x192c <u8x8_cad_SendCmd>
    1c5c:	6c 2f       	mov	r22, r28
    1c5e:	c8 01       	movw	r24, r16
    1c60:	0e 94 a1 0c 	call	0x1942	; 0x1942 <u8x8_cad_SendArg>
    1c64:	c8 01       	movw	r24, r16
    1c66:	0e 94 c1 0c 	call	0x1982	; 0x1982 <u8x8_cad_EndTransfer>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	35 c0       	rjmp	.+106    	; 0x1cd8 <u8x8_d_ssd1306_sh1106_generic+0x104>
    1c6e:	0e 94 b6 0c 	call	0x196c	; 0x196c <u8x8_cad_StartTransfer>
    1c72:	f7 01       	movw	r30, r14
    1c74:	d3 81       	ldd	r29, Z+3	; 0x03
    1c76:	dd 0f       	add	r29, r29
    1c78:	dd 0f       	add	r29, r29
    1c7a:	dd 0f       	add	r29, r29
    1c7c:	d8 01       	movw	r26, r16
    1c7e:	54 96       	adiw	r26, 0x14	; 20
    1c80:	8c 91       	ld	r24, X
    1c82:	d8 0f       	add	r29, r24
    1c84:	60 e4       	ldi	r22, 0x40	; 64
    1c86:	c8 01       	movw	r24, r16
    1c88:	0e 94 96 0c 	call	0x192c	; 0x192c <u8x8_cad_SendCmd>
    1c8c:	6d 2f       	mov	r22, r29
    1c8e:	62 95       	swap	r22
    1c90:	6f 70       	andi	r22, 0x0F	; 15
    1c92:	60 61       	ori	r22, 0x10	; 16
    1c94:	c8 01       	movw	r24, r16
    1c96:	0e 94 96 0c 	call	0x192c	; 0x192c <u8x8_cad_SendCmd>
    1c9a:	6d 2f       	mov	r22, r29
    1c9c:	6f 70       	andi	r22, 0x0F	; 15
    1c9e:	c8 01       	movw	r24, r16
    1ca0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <u8x8_cad_SendArg>
    1ca4:	f7 01       	movw	r30, r14
    1ca6:	64 81       	ldd	r22, Z+4	; 0x04
    1ca8:	60 6b       	ori	r22, 0xB0	; 176
    1caa:	c8 01       	movw	r24, r16
    1cac:	0e 94 a1 0c 	call	0x1942	; 0x1942 <u8x8_cad_SendArg>
    1cb0:	d7 01       	movw	r26, r14
    1cb2:	12 96       	adiw	r26, 0x02	; 2
    1cb4:	6c 91       	ld	r22, X
    1cb6:	12 97       	sbiw	r26, 0x02	; 2
    1cb8:	4d 91       	ld	r20, X+
    1cba:	5c 91       	ld	r21, X
    1cbc:	66 0f       	add	r22, r22
    1cbe:	66 0f       	add	r22, r22
    1cc0:	66 0f       	add	r22, r22
    1cc2:	c8 01       	movw	r24, r16
    1cc4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <u8x8_cad_SendData>
    1cc8:	c1 50       	subi	r28, 0x01	; 1
    1cca:	91 f7       	brne	.-28     	; 0x1cb0 <u8x8_d_ssd1306_sh1106_generic+0xdc>
    1ccc:	c8 01       	movw	r24, r16
    1cce:	0e 94 c1 0c 	call	0x1982	; 0x1982 <u8x8_cad_EndTransfer>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <u8x8_d_ssd1306_sh1106_generic+0x104>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	08 95       	ret

00001ce6 <u8x8_d_ssd1306_128x64_alt0>:

uint8_t u8x8_d_ssd1306_128x64_alt0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	8c 01       	movw	r16, r24
    1cee:	c6 2f       	mov	r28, r22
  
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    1cf0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <u8x8_d_ssd1306_sh1106_generic>
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	15 c0       	rjmp	.+42     	; 0x1d22 <u8x8_d_ssd1306_128x64_alt0+0x3c>
    return 1;
  
  switch(msg)
    1cf8:	c9 30       	cpi	r28, 0x09	; 9
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <u8x8_d_ssd1306_128x64_alt0+0x2e>
    1cfc:	ca 30       	cpi	r28, 0x0A	; 10
    1cfe:	91 f4       	brne	.+36     	; 0x1d24 <u8x8_d_ssd1306_128x64_alt0+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
    1d06:	66 e3       	ldi	r22, 0x36	; 54
    1d08:	71 e0       	ldi	r23, 0x01	; 1
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <u8x8_d_ssd1306_128x64_alt0+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    1d14:	66 e0       	ldi	r22, 0x06	; 6
    1d16:	71 e0       	ldi	r23, 0x01	; 1
    1d18:	c8 01       	movw	r24, r16
    1d1a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <u8x8_d_ssd1306_128x64_alt0+0x3e>

uint8_t u8x8_d_ssd1306_128x64_alt0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	1a 96       	adiw	r26, 0x0a	; 10
    1d30:	ed 91       	ld	r30, X+
    1d32:	fc 91       	ld	r31, X
    1d34:	1b 97       	sbiw	r26, 0x0b	; 11
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	09 95       	icall
    1d3c:	08 95       	ret

00001d3e <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	08 95       	ret

00001d42 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1d42:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1d44:	11 82       	std	Z+1, r1	; 0x01
    1d46:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1d48:	8f e9       	ldi	r24, 0x9F	; 159
    1d4a:	9e e0       	ldi	r25, 0x0E	; 14
    1d4c:	95 83       	std	Z+5, r25	; 0x05
    1d4e:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1d50:	97 83       	std	Z+7, r25	; 0x07
    1d52:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1d54:	91 87       	std	Z+9, r25	; 0x09
    1d56:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1d58:	93 87       	std	Z+11, r25	; 0x0b
    1d5a:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1d5c:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1d5e:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1d60:	14 86       	std	Z+12, r1	; 0x0c
    1d62:	15 86       	std	Z+13, r1	; 0x0d
    1d64:	16 86       	std	Z+14, r1	; 0x0e
    1d66:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1d6c:	82 8f       	std	Z+26, r24	; 0x1a
    1d6e:	08 95       	ret

00001d70 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1d70:	af 92       	push	r10
    1d72:	bf 92       	push	r11
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
    1d86:	5b 01       	movw	r10, r22
    1d88:	6a 01       	movw	r12, r20
    1d8a:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1d8c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1d90:	bd 82       	std	Y+5, r11	; 0x05
    1d92:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1d94:	df 82       	std	Y+7, r13	; 0x07
    1d96:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1d98:	f9 86       	std	Y+9, r15	; 0x09
    1d9a:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1d9c:	1b 87       	std	Y+11, r17	; 0x0b
    1d9e:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1da0:	ce 01       	movw	r24, r28
    1da2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <u8x8_SetupMemory>
}
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	bf 90       	pop	r11
    1db8:	af 90       	pop	r10
    1dba:	08 95       	ret

00001dbc <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1dbc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1dc6:	08 95       	ret

00001dc8 <i2c_start_wait>:
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	94 ea       	ldi	r25, 0xA4	; 164
    1dce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1dd2:	4f ef       	ldi	r20, 0xFF	; 255
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <i2c_start_wait+0x18>
    1ddc:	b9 01       	movw	r22, r18
    1dde:	a8 01       	movw	r20, r16
    1de0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1de4:	99 23       	and	r25, r25
    1de6:	54 f0       	brlt	.+20     	; 0x1dfc <i2c_start_wait+0x34>
    1de8:	8a 01       	movw	r16, r20
    1dea:	9b 01       	movw	r18, r22
    1dec:	01 50       	subi	r16, 0x01	; 1
    1dee:	11 09       	sbc	r17, r1
    1df0:	21 09       	sbc	r18, r1
    1df2:	31 09       	sbc	r19, r1
    1df4:	45 2b       	or	r20, r21
    1df6:	46 2b       	or	r20, r22
    1df8:	47 2b       	or	r20, r23
    1dfa:	81 f7       	brne	.-32     	; 0x1ddc <i2c_start_wait+0x14>
    1dfc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1e00:	98 7f       	andi	r25, 0xF8	; 248
    1e02:	98 30       	cpi	r25, 0x08	; 8
    1e04:	11 f0       	breq	.+4      	; 0x1e0a <i2c_start_wait+0x42>
    1e06:	90 31       	cpi	r25, 0x10	; 16
    1e08:	09 f7       	brne	.-62     	; 0x1dcc <i2c_start_wait+0x4>
    1e0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1e0e:	94 e8       	ldi	r25, 0x84	; 132
    1e10:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e14:	4f ef       	ldi	r20, 0xFF	; 255
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <i2c_start_wait+0x5a>
    1e1e:	b9 01       	movw	r22, r18
    1e20:	a8 01       	movw	r20, r16
    1e22:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e26:	99 23       	and	r25, r25
    1e28:	54 f0       	brlt	.+20     	; 0x1e3e <i2c_start_wait+0x76>
    1e2a:	8a 01       	movw	r16, r20
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	01 50       	subi	r16, 0x01	; 1
    1e30:	11 09       	sbc	r17, r1
    1e32:	21 09       	sbc	r18, r1
    1e34:	31 09       	sbc	r19, r1
    1e36:	45 2b       	or	r20, r21
    1e38:	46 2b       	or	r20, r22
    1e3a:	47 2b       	or	r20, r23
    1e3c:	81 f7       	brne	.-32     	; 0x1e1e <i2c_start_wait+0x56>
    1e3e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1e42:	98 7f       	andi	r25, 0xF8	; 248
    1e44:	90 32       	cpi	r25, 0x20	; 32
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <i2c_start_wait+0x84>
    1e48:	98 35       	cpi	r25, 0x58	; 88
    1e4a:	c9 f4       	brne	.+50     	; 0x1e7e <i2c_start_wait+0xb6>
    1e4c:	94 e9       	ldi	r25, 0x94	; 148
    1e4e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e52:	4f ef       	ldi	r20, 0xFF	; 255
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <i2c_start_wait+0x98>
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	a8 01       	movw	r20, r16
    1e60:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e64:	94 ff       	sbrs	r25, 4
    1e66:	b2 cf       	rjmp	.-156    	; 0x1dcc <i2c_start_wait+0x4>
    1e68:	8a 01       	movw	r16, r20
    1e6a:	9b 01       	movw	r18, r22
    1e6c:	01 50       	subi	r16, 0x01	; 1
    1e6e:	11 09       	sbc	r17, r1
    1e70:	21 09       	sbc	r18, r1
    1e72:	31 09       	sbc	r19, r1
    1e74:	45 2b       	or	r20, r21
    1e76:	46 2b       	or	r20, r22
    1e78:	47 2b       	or	r20, r23
    1e7a:	81 f7       	brne	.-32     	; 0x1e5c <i2c_start_wait+0x94>
    1e7c:	a7 cf       	rjmp	.-178    	; 0x1dcc <i2c_start_wait+0x4>
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1e84:	84 e9       	ldi	r24, 0x94	; 148
    1e86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <i2c_stop+0x14>
    1e94:	db 01       	movw	r26, r22
    1e96:	ca 01       	movw	r24, r20
    1e98:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e9c:	24 ff       	sbrs	r18, 4
    1e9e:	0a c0       	rjmp	.+20     	; 0x1eb4 <i2c_stop+0x30>
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	bd 01       	movw	r22, r26
    1ea4:	41 50       	subi	r20, 0x01	; 1
    1ea6:	51 09       	sbc	r21, r1
    1ea8:	61 09       	sbc	r22, r1
    1eaa:	71 09       	sbc	r23, r1
    1eac:	89 2b       	or	r24, r25
    1eae:	8a 2b       	or	r24, r26
    1eb0:	8b 2b       	or	r24, r27
    1eb2:	81 f7       	brne	.-32     	; 0x1e94 <i2c_stop+0x10>
    1eb4:	08 95       	ret

00001eb6 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1eb6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1eba:	84 e8       	ldi	r24, 0x84	; 132
    1ebc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e0       	ldi	r26, 0x00	; 0
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <i2c_write+0x18>
    1eca:	db 01       	movw	r26, r22
    1ecc:	ca 01       	movw	r24, r20
    1ece:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1ed2:	22 23       	and	r18, r18
    1ed4:	64 f0       	brlt	.+24     	; 0x1eee <i2c_write+0x38>
    1ed6:	ac 01       	movw	r20, r24
    1ed8:	bd 01       	movw	r22, r26
    1eda:	41 50       	subi	r20, 0x01	; 1
    1edc:	51 09       	sbc	r21, r1
    1ede:	61 09       	sbc	r22, r1
    1ee0:	71 09       	sbc	r23, r1
    1ee2:	89 2b       	or	r24, r25
    1ee4:	8a 2b       	or	r24, r26
    1ee6:	8b 2b       	or	r24, r27
    1ee8:	81 f7       	brne	.-32     	; 0x1eca <i2c_write+0x14>
    1eea:	db 01       	movw	r26, r22
    1eec:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1eee:	89 2b       	or	r24, r25
    1ef0:	8a 2b       	or	r24, r26
    1ef2:	8b 2b       	or	r24, r27
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <i2c_write+0x4e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1ef6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1efa:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1efc:	88 32       	cpi	r24, 0x28	; 40
    1efe:	21 f0       	breq	.+8      	; 0x1f08 <i2c_write+0x52>
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
    1f08:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    1f0a:	08 95       	ret

00001f0c <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
	uint8_t *data;
	switch(msg){
    1f12:	68 31       	cpi	r22, 0x18	; 24
    1f14:	f9 f0       	breq	.+62     	; 0x1f54 <u8x8_byte_avr_hw_i2c+0x48>
    1f16:	28 f4       	brcc	.+10     	; 0x1f22 <u8x8_byte_avr_hw_i2c+0x16>
    1f18:	64 31       	cpi	r22, 0x14	; 20
    1f1a:	c1 f0       	breq	.+48     	; 0x1f4c <u8x8_byte_avr_hw_i2c+0x40>
    1f1c:	67 31       	cpi	r22, 0x17	; 23
    1f1e:	81 f0       	breq	.+32     	; 0x1f40 <u8x8_byte_avr_hw_i2c+0x34>
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <u8x8_byte_avr_hw_i2c+0x1e>
    1f22:	69 31       	cpi	r22, 0x19	; 25
    1f24:	e9 f0       	breq	.+58     	; 0x1f60 <u8x8_byte_avr_hw_i2c+0x54>
    1f26:	60 32       	cpi	r22, 0x20	; 32
    1f28:	f9 f0       	breq	.+62     	; 0x1f68 <u8x8_byte_avr_hw_i2c+0x5c>
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
		default:
			return 0;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	1e c0       	rjmp	.+60     	; 0x1f6a <u8x8_byte_avr_hw_i2c+0x5e>
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
    1f2e:	89 01       	movw	r16, r18
    1f30:	0f 5f       	subi	r16, 0xFF	; 255
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	f9 01       	movw	r30, r18
    1f36:	80 81       	ld	r24, Z
    1f38:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1f3c:	4c 2f       	mov	r20, r28
				i2c_write(*data++);
    1f3e:	98 01       	movw	r18, r16
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1f40:	cf ef       	ldi	r28, 0xFF	; 255
    1f42:	c4 0f       	add	r28, r20
    1f44:	41 11       	cpse	r20, r1
    1f46:	f3 cf       	rjmp	.-26     	; 0x1f2e <u8x8_byte_avr_hw_i2c+0x22>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <u8x8_byte_avr_hw_i2c+0x5e>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    1f4c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    1f52:	0b c0       	rjmp	.+22     	; 0x1f6a <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    1f54:	fc 01       	movw	r30, r24
    1f56:	86 89       	ldd	r24, Z+22	; 0x16
    1f58:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    1f60:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <u8x8_byte_avr_hw_i2c+0x5e>
		default:
			return 0;
	}
	return 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
}
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    1f72:	6a 32       	cpi	r22, 0x2A	; 42
    1f74:	11 f1       	breq	.+68     	; 0x1fba <u8x8_avr_delay+0x48>
    1f76:	18 f4       	brcc	.+6      	; 0x1f7e <u8x8_avr_delay+0xc>
    1f78:	69 32       	cpi	r22, 0x29	; 41
    1f7a:	61 f1       	breq	.+88     	; 0x1fd4 <u8x8_avr_delay+0x62>
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <u8x8_avr_delay+0x14>
    1f7e:	6b 32       	cpi	r22, 0x2B	; 43
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <u8x8_avr_delay+0x18>
    1f82:	6c 32       	cpi	r22, 0x2C	; 44
    1f84:	69 f1       	breq	.+90     	; 0x1fe0 <u8x8_avr_delay+0x6e>
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    1f8a:	24 2f       	mov	r18, r20
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	a4 e6       	ldi	r26, 0x64	; 100
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	0e 94 04 12 	call	0x2408	; 0x2408 <__umulhisi3>
    1f96:	24 ef       	ldi	r18, 0xF4	; 244
    1f98:	31 e0       	ldi	r19, 0x01	; 1
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    1fa2:	23 32       	cpi	r18, 0x23	; 35
    1fa4:	f8 f4       	brcc	.+62     	; 0x1fe4 <u8x8_avr_delay+0x72>
				break;

			__asm__ __volatile__ (
    1fa6:	82 2f       	mov	r24, r18
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <u8x8_avr_delay+0x36>
			break;
		default:
			return 0;
	}

	return 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    1fae:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fb0:	9a e1       	ldi	r25, 0x1A	; 26
    1fb2:	9a 95       	dec	r25
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <u8x8_avr_delay+0x40>
    1fb6:	00 c0       	rjmp	.+0      	; 0x1fb8 <u8x8_avr_delay+0x46>
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	84 0f       	add	r24, r20
    1fbe:	41 11       	cpse	r20, r1
    1fc0:	f7 cf       	rjmp	.-18     	; 0x1fb0 <u8x8_avr_delay+0x3e>
			break;
		default:
			return 0;
	}

	return 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fc6:	ef ec       	ldi	r30, 0xCF	; 207
    1fc8:	f7 e0       	ldi	r31, 0x07	; 7
    1fca:	31 97       	sbiw	r30, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <u8x8_avr_delay+0x58>
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <u8x8_avr_delay+0x5e>
    1fd0:	00 00       	nop
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8f ef       	ldi	r24, 0xFF	; 255
    1fd6:	84 0f       	add	r24, r20
    1fd8:	41 11       	cpse	r20, r1
    1fda:	f5 cf       	rjmp	.-22     	; 0x1fc6 <u8x8_avr_delay+0x54>
			break;
		default:
			return 0;
	}

	return 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	08 95       	ret
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	08 95       	ret
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
}
    1fe6:	08 95       	ret

00001fe8 <gripper_setup>:
volatile uint16_t step_count = 0;
volatile uint16_t steps_to_move = 0;

void gripper_setup() {
	// Set STEP_PIN and DIR_PIN as output
	DDRD |= (1 << STEP_PIN) | (1 << DIR_PIN);
    1fe8:	8a b1       	in	r24, 0x0a	; 10
    1fea:	84 61       	ori	r24, 0x14	; 20
    1fec:	8a b9       	out	0x0a, r24	; 10

	// Set up Timer1
	TCCR1A = 0; // Set Timer1 to normal mode
    1fee:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // CTC mode, prescaler 8
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 2000; // Set the compare value for a 1000us delay
    1ff8:	80 ed       	ldi	r24, 0xD0	; 208
    1ffa:	97 e0       	ldi	r25, 0x07	; 7
    1ffc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2000:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Enable Timer1 compare interrupt
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); // Enable global interrupts
    200a:	78 94       	sei
    200c:	08 95       	ret

0000200e <start_stepper_motor>:
		stop_stepper_motor();
	}
}

void start_stepper_motor() {
	step_count = 0;
    200e:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <step_count+0x1>
    2012:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <step_count>
	steps_to_move = 800; // Set the number of steps for a full cycle
    2016:	80 e2       	ldi	r24, 0x20	; 32
    2018:	93 e0       	ldi	r25, 0x03	; 3
    201a:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <steps_to_move+0x1>
    201e:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <steps_to_move>
	TCNT1 = 0; // Reset Timer1 counter
    2022:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    2026:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B |= (1 << CS11); // Start Timer1 with prescaler 8
    202a:	e1 e8       	ldi	r30, 0x81	; 129
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	82 60       	ori	r24, 0x02	; 2
    2032:	80 83       	st	Z, r24
    2034:	08 95       	ret

00002036 <stop_stepper_motor>:
}

void stop_stepper_motor() {
	TCCR1B &= ~(1 << CS11); // Stop Timer1
    2036:	e1 e8       	ldi	r30, 0x81	; 129
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	8d 7f       	andi	r24, 0xFD	; 253
    203e:	80 83       	st	Z, r24
	PORTD &= ~(1 << STEP_PIN); // Ensure STEP_PIN is low
    2040:	8b b1       	in	r24, 0x0b	; 11
    2042:	8b 7f       	andi	r24, 0xFB	; 251
    2044:	8b b9       	out	0x0b, r24	; 11
    2046:	08 95       	ret

00002048 <__vector_11>:
	OCR1A = 2000; // Set the compare value for a 1000us delay
	TIMSK1 = (1 << OCIE1A); // Enable Timer1 compare interrupt
	sei(); // Enable global interrupts
}

ISR(TIMER1_COMPA_vect) {
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
	if (step_count < steps_to_move) {
    206a:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <step_count>
    206e:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <step_count+0x1>
    2072:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <steps_to_move>
    2076:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <steps_to_move+0x1>
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	70 f4       	brcc	.+28     	; 0x209c <__vector_11+0x54>
		PORTD ^= (1 << STEP_PIN); // Toggle STEP_PIN
    2080:	9b b1       	in	r25, 0x0b	; 11
    2082:	84 e0       	ldi	r24, 0x04	; 4
    2084:	89 27       	eor	r24, r25
    2086:	8b b9       	out	0x0b, r24	; 11
		step_count++;
    2088:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <step_count>
    208c:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <step_count+0x1>
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <step_count+0x1>
    2096:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <step_count>
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <__vector_11+0x58>
		} else {
		stop_stepper_motor();
    209c:	0e 94 1b 10 	call	0x2036	; 0x2036 <stop_stepper_motor>
	}
}
    20a0:	ff 91       	pop	r31
    20a2:	ef 91       	pop	r30
    20a4:	bf 91       	pop	r27
    20a6:	af 91       	pop	r26
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	7f 91       	pop	r23
    20ae:	6f 91       	pop	r22
    20b0:	5f 91       	pop	r21
    20b2:	4f 91       	pop	r20
    20b4:	3f 91       	pop	r19
    20b6:	2f 91       	pop	r18
    20b8:	0f 90       	pop	r0
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	0f 90       	pop	r0
    20be:	1f 90       	pop	r1
    20c0:	18 95       	reti

000020c2 <gripper_loop_open>:
	PORTD &= ~(1 << STEP_PIN); // Ensure STEP_PIN is low
}

void gripper_loop_open() {
	// Set direction to HIGH
	PORTD |= (1 << DIR_PIN);
    20c2:	8b b1       	in	r24, 0x0b	; 11
    20c4:	80 61       	ori	r24, 0x10	; 16
    20c6:	8b b9       	out	0x0b, r24	; 11
	start_stepper_motor();
    20c8:	0e 94 07 10 	call	0x200e	; 0x200e <start_stepper_motor>
	while (step_count < steps_to_move); // Wait for the motor to finish
    20cc:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <step_count>
    20d0:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <step_count+0x1>
    20d4:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <steps_to_move>
    20d8:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <steps_to_move+0x1>
    20dc:	28 17       	cp	r18, r24
    20de:	39 07       	cpc	r19, r25
    20e0:	a8 f3       	brcs	.-22     	; 0x20cc <gripper_loop_open+0xa>
}
    20e2:	08 95       	ret

000020e4 <gripper_loop_close>:

void gripper_loop_close() {
	// Set direction to LOW
	PORTD &= ~(1 << DIR_PIN);
    20e4:	8b b1       	in	r24, 0x0b	; 11
    20e6:	8f 7e       	andi	r24, 0xEF	; 239
    20e8:	8b b9       	out	0x0b, r24	; 11
	start_stepper_motor();
    20ea:	0e 94 07 10 	call	0x200e	; 0x200e <start_stepper_motor>
	while (step_count < steps_to_move); // Wait for the motor to finish
    20ee:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <step_count>
    20f2:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <step_count+0x1>
    20f6:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <steps_to_move>
    20fa:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <steps_to_move+0x1>
    20fe:	28 17       	cp	r18, r24
    2100:	39 07       	cpc	r19, r25
    2102:	a8 f3       	brcs	.-22     	; 0x20ee <gripper_loop_close+0xa>
}
    2104:	08 95       	ret

00002106 <UART_init>:

void UART_init(unsigned int ubrr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr >> 8);
    2106:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
    210a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/* Enable receiver */
	UCSR0B = (1 << RXEN0);
    210e:	80 e1       	ldi	r24, 0x10	; 16
    2110:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8 data bits, 1 stop bit */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2114:	86 e0       	ldi	r24, 0x06	; 6
    2116:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    211a:	08 95       	ret

0000211c <UART_receive>:
}

unsigned char UART_receive(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0)));
    211c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2120:	88 23       	and	r24, r24
    2122:	e4 f7       	brge	.-8      	; 0x211c <UART_receive>
	/* Get and return received data from buffer */
	return UDR0;
    2124:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    2128:	08 95       	ret

0000212a <RX_coordinates>:

void RX_coordinates(char *buffer, float *x_coordinate, float *y_coordinate) {
    212a:	af 92       	push	r10
    212c:	bf 92       	push	r11
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	7c 01       	movw	r14, r24
    2140:	6b 01       	movw	r12, r22
    2142:	5a 01       	movw	r10, r20
	// Receive string
	int i = 0;
    2144:	c0 e0       	ldi	r28, 0x00	; 0
    2146:	d0 e0       	ldi	r29, 0x00	; 0
	while (1) {
		buffer[i] = UART_receive();
    2148:	87 01       	movw	r16, r14
    214a:	0c 0f       	add	r16, r28
    214c:	1d 1f       	adc	r17, r29
    214e:	0e 94 8e 10 	call	0x211c	; 0x211c <UART_receive>
    2152:	f8 01       	movw	r30, r16
    2154:	80 83       	st	Z, r24
		if (buffer[i] == '\n') {
    2156:	8a 30       	cpi	r24, 0x0A	; 10
    2158:	49 f4       	brne	.+18     	; 0x216c <RX_coordinates+0x42>
			buffer[i] = '\0';
    215a:	10 82       	st	Z, r1
			break;
		}
		i++;
	}
	// Parse the received string
	char *token = strtok(buffer, ", ");
    215c:	6b e6       	ldi	r22, 0x6B	; 107
    215e:	71 e0       	ldi	r23, 0x01	; 1
    2160:	c7 01       	movw	r24, r14
    2162:	0e 94 22 12 	call	0x2444	; 0x2444 <strtok>
	if (token != NULL) {
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	19 f4       	brne	.+6      	; 0x2170 <RX_coordinates+0x46>
    216a:	18 c0       	rjmp	.+48     	; 0x219c <RX_coordinates+0x72>
		buffer[i] = UART_receive();
		if (buffer[i] == '\n') {
			buffer[i] = '\0';
			break;
		}
		i++;
    216c:	21 96       	adiw	r28, 0x01	; 1
	}
    216e:	ec cf       	rjmp	.-40     	; 0x2148 <RX_coordinates+0x1e>
	// Parse the received string
	char *token = strtok(buffer, ", ");
	if (token != NULL) {
		*x_coordinate = atof(token);
    2170:	0e 94 1e 12 	call	0x243c	; 0x243c <atof>
    2174:	f6 01       	movw	r30, r12
    2176:	60 83       	st	Z, r22
    2178:	71 83       	std	Z+1, r23	; 0x01
    217a:	82 83       	std	Z+2, r24	; 0x02
    217c:	93 83       	std	Z+3, r25	; 0x03
		token = strtok(NULL, ", ");
    217e:	6b e6       	ldi	r22, 0x6B	; 107
    2180:	71 e0       	ldi	r23, 0x01	; 1
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 22 12 	call	0x2444	; 0x2444 <strtok>
		if (token != NULL) {
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	39 f0       	breq	.+14     	; 0x219c <RX_coordinates+0x72>
			*y_coordinate = atof(token);
    218e:	0e 94 1e 12 	call	0x243c	; 0x243c <atof>
    2192:	f5 01       	movw	r30, r10
    2194:	60 83       	st	Z, r22
    2196:	71 83       	std	Z+1, r23	; 0x01
    2198:	82 83       	std	Z+2, r24	; 0x02
    219a:	93 83       	std	Z+3, r25	; 0x03
		}
	}
}
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	df 90       	pop	r13
    21aa:	cf 90       	pop	r12
    21ac:	bf 90       	pop	r11
    21ae:	af 90       	pop	r10
    21b0:	08 95       	ret

000021b2 <read_button>:

uint8_t read_button() {
	// Read the state of the button
	if (PIND & (1 << PIND3)) {
    21b2:	4b 9b       	sbis	0x09, 3	; 9
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <read_button+0x8>
		// Button not pressed
		return 0;
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	08 95       	ret
		} else {
		// Button pressed
		return 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    21bc:	08 95       	ret

000021be <check_membrane_sensor>:

uint8_t check_membrane_sensor() {
	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
    21be:	ea e7       	ldi	r30, 0x7A	; 122
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 64       	ori	r24, 0x40	; 64
    21c6:	80 83       	st	Z, r24
	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));
    21c8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    21cc:	89 2f       	mov	r24, r25
    21ce:	80 74       	andi	r24, 0x40	; 64
    21d0:	96 fd       	sbrc	r25, 6
    21d2:	fa cf       	rjmp	.-12     	; 0x21c8 <check_membrane_sensor+0xa>
	// Read the ADC value
	uint16_t adc_value = ADC;
    21d4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    21d8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	// Return 1 if the box is grabbed, 0 otherwise
	if (adc_value > 256) {
    21dc:	21 30       	cpi	r18, 0x01	; 1
    21de:	31 40       	sbci	r19, 0x01	; 1
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <check_membrane_sensor+0x26>
		return 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
		} else {
		return 0;
	}
}
    21e4:	08 95       	ret

000021e6 <init_adc>:

void init_adc() {
	// Set the reference voltage to AVcc
	ADMUX = (1 << REFS0);
    21e6:	ec e7       	ldi	r30, 0x7C	; 124
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 e4       	ldi	r24, 0x40	; 64
    21ec:	80 83       	st	Z, r24
	// Set the ADC prescaler to 128 (16MHz/128 = 125kHz)
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    21ee:	aa e7       	ldi	r26, 0x7A	; 122
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	87 e0       	ldi	r24, 0x07	; 7
    21f4:	8c 93       	st	X, r24
	// Enable the ADC
	ADCSRA |= (1 << ADEN);
    21f6:	8c 91       	ld	r24, X
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	8c 93       	st	X, r24
	// Set the input channel to PC0
	ADMUX |= (0 << MUX0);
    21fc:	80 81       	ld	r24, Z
    21fe:	80 83       	st	Z, r24
    2200:	08 95       	ret

00002202 <main>:
}

int main(void) {
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	e0 97       	sbiw	r28, 0x30	; 48
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
	// Set up the display
	u8g2_Setup_ssd1306_128x64_alt0_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    2216:	29 eb       	ldi	r18, 0xB9	; 185
    2218:	3f e0       	ldi	r19, 0x0F	; 15
    221a:	46 e8       	ldi	r20, 0x86	; 134
    221c:	5f e0       	ldi	r21, 0x0F	; 15
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	71 e0       	ldi	r23, 0x01	; 1
    2222:	86 eb       	ldi	r24, 0xB6	; 182
    2224:	95 e0       	ldi	r25, 0x05	; 5
    2226:	0e 94 90 05 	call	0xb20	; 0xb20 <u8g2_Setup_ssd1306_128x64_alt0_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    222a:	88 e7       	ldi	r24, 0x78	; 120
    222c:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    2230:	86 eb       	ldi	r24, 0xB6	; 182
    2232:	95 e0       	ldi	r25, 0x05	; 5
    2234:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	86 eb       	ldi	r24, 0xB6	; 182
    223c:	95 e0       	ldi	r25, 0x05	; 5
    223e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <u8x8_SetPowerSave>

	// Initialize the display buffer
	u8g2_ClearBuffer(&u8g2);
    2242:	86 eb       	ldi	r24, 0xB6	; 182
    2244:	95 e0       	ldi	r25, 0x05	; 5
    2246:	0e 94 69 05 	call	0xad2	; 0xad2 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_t0_14b_tf);
    224a:	63 ea       	ldi	r22, 0xA3	; 163
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	86 eb       	ldi	r24, 0xB6	; 182
    2250:	95 e0       	ldi	r25, 0x05	; 5
    2252:	0e 94 cc 09 	call	0x1398	; 0x1398 <u8g2_SetFont>
	u8g2_SetFontRefHeightText(&u8g2);
    2256:	86 eb       	ldi	r24, 0xB6	; 182
    2258:	95 e0       	ldi	r25, 0x05	; 5
    225a:	0e 94 b5 09 	call	0x136a	; 0x136a <u8g2_SetFontRefHeightText>
	u8g2_SetFontPosTop(&u8g2);
    225e:	86 eb       	ldi	r24, 0xB6	; 182
    2260:	95 e0       	ldi	r25, 0x05	; 5
    2262:	0e 94 c4 09 	call	0x1388	; 0x1388 <u8g2_SetFontPosTop>
	u8g2_DrawStr(&u8g2, 0, 0, "Bin Picking Robot");
    2266:	2e e6       	ldi	r18, 0x6E	; 110
    2268:	31 e0       	ldi	r19, 0x01	; 1
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	86 eb       	ldi	r24, 0xB6	; 182
    2274:	95 e0       	ldi	r25, 0x05	; 5
    2276:	0e 94 67 09 	call	0x12ce	; 0x12ce <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
    227a:	86 eb       	ldi	r24, 0xB6	; 182
    227c:	95 e0       	ldi	r25, 0x05	; 5
    227e:	0e 94 7f 05 	call	0xafe	; 0xafe <u8g2_SendBuffer>
	
	// Set up UART
	char buffer[20];
	float x_coordinate = 0.0, y_coordinate = 0.0;
    2282:	1d 8a       	std	Y+21, r1	; 0x15
    2284:	1e 8a       	std	Y+22, r1	; 0x16
    2286:	1f 8a       	std	Y+23, r1	; 0x17
    2288:	18 8e       	std	Y+24, r1	; 0x18
    228a:	19 8e       	std	Y+25, r1	; 0x19
    228c:	1a 8e       	std	Y+26, r1	; 0x1a
    228e:	1b 8e       	std	Y+27, r1	; 0x1b
    2290:	1c 8e       	std	Y+28, r1	; 0x1c
	
	UART_init(MYUBRR);
    2292:	87 e6       	ldi	r24, 0x67	; 103
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0e 94 83 10 	call	0x2106	; 0x2106 <UART_init>
	
	// Set up Gripper
	gripper_setup();
    229a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <gripper_setup>
	
	// Set PD3 as input
	DDRD &= ~(1 << DDD3);
    229e:	8a b1       	in	r24, 0x0a	; 10
    22a0:	87 7f       	andi	r24, 0xF7	; 247
    22a2:	8a b9       	out	0x0a, r24	; 10
	// Enable internal pull-up resistor on PD3
	PORTD |= (1 << PORTD3);
    22a4:	8b b1       	in	r24, 0x0b	; 11
    22a6:	88 60       	ori	r24, 0x08	; 8
    22a8:	8b b9       	out	0x0b, r24	; 11
	
	// Initialize the ADC
	init_adc();
    22aa:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <init_adc>
	
	while (1) {
		// Get coordinates
		RX_coordinates(buffer, &x_coordinate, &y_coordinate);
    22ae:	ae 01       	movw	r20, r28
    22b0:	47 5e       	subi	r20, 0xE7	; 231
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	be 01       	movw	r22, r28
    22b6:	6b 5e       	subi	r22, 0xEB	; 235
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	ce 01       	movw	r24, r28
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	0e 94 95 10 	call	0x212a	; 0x212a <RX_coordinates>
		
		// Convert coordinates to strings
		char x_str[10];
		char y_str[10];
		snprintf(x_str, sizeof(x_str), "X=%.3f", x_coordinate);
    22c2:	88 8d       	ldd	r24, Y+24	; 0x18
    22c4:	8f 93       	push	r24
    22c6:	8f 89       	ldd	r24, Y+23	; 0x17
    22c8:	8f 93       	push	r24
    22ca:	8e 89       	ldd	r24, Y+22	; 0x16
    22cc:	8f 93       	push	r24
    22ce:	8d 89       	ldd	r24, Y+21	; 0x15
    22d0:	8f 93       	push	r24
    22d2:	80 e8       	ldi	r24, 0x80	; 128
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	9f 93       	push	r25
    22d8:	8f 93       	push	r24
    22da:	1f 92       	push	r1
    22dc:	1a e0       	ldi	r17, 0x0A	; 10
    22de:	1f 93       	push	r17
    22e0:	7e 01       	movw	r14, r28
    22e2:	87 e2       	ldi	r24, 0x27	; 39
    22e4:	e8 0e       	add	r14, r24
    22e6:	f1 1c       	adc	r15, r1
    22e8:	ff 92       	push	r15
    22ea:	ef 92       	push	r14
    22ec:	0e 94 55 12 	call	0x24aa	; 0x24aa <snprintf>
		snprintf(y_str, sizeof(y_str), "Y=%.3f", y_coordinate);
    22f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22f2:	8f 93       	push	r24
    22f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f6:	8f 93       	push	r24
    22f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22fa:	8f 93       	push	r24
    22fc:	89 8d       	ldd	r24, Y+25	; 0x19
    22fe:	8f 93       	push	r24
    2300:	87 e8       	ldi	r24, 0x87	; 135
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	1f 92       	push	r1
    230a:	1f 93       	push	r17
    230c:	8e 01       	movw	r16, r28
    230e:	03 5e       	subi	r16, 0xE3	; 227
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	1f 93       	push	r17
    2314:	0f 93       	push	r16
    2316:	0e 94 55 12 	call	0x24aa	; 0x24aa <snprintf>
		
		// Display the received coordinates
		u8g2_ClearBuffer(&u8g2); // Clear buffer for new content
    231a:	86 eb       	ldi	r24, 0xB6	; 182
    231c:	95 e0       	ldi	r25, 0x05	; 5
    231e:	0e 94 69 05 	call	0xad2	; 0xad2 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 10, x_str);
    2322:	97 01       	movw	r18, r14
    2324:	4a e0       	ldi	r20, 0x0A	; 10
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	64 e1       	ldi	r22, 0x14	; 20
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	86 eb       	ldi	r24, 0xB6	; 182
    232e:	95 e0       	ldi	r25, 0x05	; 5
    2330:	0e 94 67 09 	call	0x12ce	; 0x12ce <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 20, 30, y_str);
    2334:	98 01       	movw	r18, r16
    2336:	4e e1       	ldi	r20, 0x1E	; 30
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	64 e1       	ldi	r22, 0x14	; 20
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	86 eb       	ldi	r24, 0xB6	; 182
    2340:	95 e0       	ldi	r25, 0x05	; 5
    2342:	0e 94 67 09 	call	0x12ce	; 0x12ce <u8g2_DrawStr>
		
		// Wait until button press
		while (read_button() == 0) {
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <read_button>
    2354:	88 23       	and	r24, r24
    2356:	e1 f3       	breq	.-8      	; 0x2350 <main+0x14e>
			// Do nothing, just wait
		}

		// Gripper open
		gripper_loop_open();
    2358:	0e 94 61 10 	call	0x20c2	; 0x20c2 <gripper_loop_open>
		// Check membrane sensor
		if (check_membrane_sensor() == 1) {
    235c:	0e 94 df 10 	call	0x21be	; 0x21be <check_membrane_sensor>
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	09 f0       	breq	.+2      	; 0x2366 <main+0x164>
    2364:	a4 cf       	rjmp	.-184    	; 0x22ae <main+0xac>
			// Display "Grabbed the box"
			u8g2_ClearBuffer(&u8g2);
    2366:	86 eb       	ldi	r24, 0xB6	; 182
    2368:	95 e0       	ldi	r25, 0x05	; 5
    236a:	0e 94 69 05 	call	0xad2	; 0xad2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 50, "Grabbed the box");
    236e:	2e e8       	ldi	r18, 0x8E	; 142
    2370:	31 e0       	ldi	r19, 0x01	; 1
    2372:	42 e3       	ldi	r20, 0x32	; 50
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	64 e1       	ldi	r22, 0x14	; 20
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	86 eb       	ldi	r24, 0xB6	; 182
    237c:	95 e0       	ldi	r25, 0x05	; 5
    237e:	0e 94 67 09 	call	0x12ce	; 0x12ce <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    2382:	86 eb       	ldi	r24, 0xB6	; 182
    2384:	95 e0       	ldi	r25, 0x05	; 5
    2386:	0e 94 7f 05 	call	0xafe	; 0xafe <u8g2_SendBuffer>
			
			// Wait until button release
			while (read_button() == 1) {
    238a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <read_button>
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	e1 f3       	breq	.-8      	; 0x238a <main+0x188>
				// Do nothing, just wait
			}
			
			// Gripper close
			gripper_loop_close();
    2392:	0e 94 72 10 	call	0x20e4	; 0x20e4 <gripper_loop_close>
			// Check membrane sensor
			if (check_membrane_sensor() == 0) {
    2396:	0e 94 df 10 	call	0x21be	; 0x21be <check_membrane_sensor>
    239a:	81 11       	cpse	r24, r1
    239c:	88 cf       	rjmp	.-240    	; 0x22ae <main+0xac>
				// Display "Released the box"
				u8g2_ClearBuffer(&u8g2); // Clear buffer for new content
    239e:	86 eb       	ldi	r24, 0xB6	; 182
    23a0:	95 e0       	ldi	r25, 0x05	; 5
    23a2:	0e 94 69 05 	call	0xad2	; 0xad2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 70, "Released the box");
    23a6:	2e e9       	ldi	r18, 0x9E	; 158
    23a8:	31 e0       	ldi	r19, 0x01	; 1
    23aa:	46 e4       	ldi	r20, 0x46	; 70
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	64 e1       	ldi	r22, 0x14	; 20
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	86 eb       	ldi	r24, 0xB6	; 182
    23b4:	95 e0       	ldi	r25, 0x05	; 5
    23b6:	0e 94 67 09 	call	0x12ce	; 0x12ce <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
    23ba:	86 eb       	ldi	r24, 0xB6	; 182
    23bc:	95 e0       	ldi	r25, 0x05	; 5
    23be:	0e 94 7f 05 	call	0xafe	; 0xafe <u8g2_SendBuffer>
			}
		}
	}
    23c2:	75 cf       	rjmp	.-278    	; 0x22ae <main+0xac>

000023c4 <__udivmodsi4>:
    23c4:	a1 e2       	ldi	r26, 0x21	; 33
    23c6:	1a 2e       	mov	r1, r26
    23c8:	aa 1b       	sub	r26, r26
    23ca:	bb 1b       	sub	r27, r27
    23cc:	fd 01       	movw	r30, r26
    23ce:	0d c0       	rjmp	.+26     	; 0x23ea <__udivmodsi4_ep>

000023d0 <__udivmodsi4_loop>:
    23d0:	aa 1f       	adc	r26, r26
    23d2:	bb 1f       	adc	r27, r27
    23d4:	ee 1f       	adc	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	a2 17       	cp	r26, r18
    23da:	b3 07       	cpc	r27, r19
    23dc:	e4 07       	cpc	r30, r20
    23de:	f5 07       	cpc	r31, r21
    23e0:	20 f0       	brcs	.+8      	; 0x23ea <__udivmodsi4_ep>
    23e2:	a2 1b       	sub	r26, r18
    23e4:	b3 0b       	sbc	r27, r19
    23e6:	e4 0b       	sbc	r30, r20
    23e8:	f5 0b       	sbc	r31, r21

000023ea <__udivmodsi4_ep>:
    23ea:	66 1f       	adc	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	88 1f       	adc	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	1a 94       	dec	r1
    23f4:	69 f7       	brne	.-38     	; 0x23d0 <__udivmodsi4_loop>
    23f6:	60 95       	com	r22
    23f8:	70 95       	com	r23
    23fa:	80 95       	com	r24
    23fc:	90 95       	com	r25
    23fe:	9b 01       	movw	r18, r22
    2400:	ac 01       	movw	r20, r24
    2402:	bd 01       	movw	r22, r26
    2404:	cf 01       	movw	r24, r30
    2406:	08 95       	ret

00002408 <__umulhisi3>:
    2408:	a2 9f       	mul	r26, r18
    240a:	b0 01       	movw	r22, r0
    240c:	b3 9f       	mul	r27, r19
    240e:	c0 01       	movw	r24, r0
    2410:	a3 9f       	mul	r26, r19
    2412:	70 0d       	add	r23, r0
    2414:	81 1d       	adc	r24, r1
    2416:	11 24       	eor	r1, r1
    2418:	91 1d       	adc	r25, r1
    241a:	b2 9f       	mul	r27, r18
    241c:	70 0d       	add	r23, r0
    241e:	81 1d       	adc	r24, r1
    2420:	11 24       	eor	r1, r1
    2422:	91 1d       	adc	r25, r1
    2424:	08 95       	ret

00002426 <__muluhisi3>:
    2426:	0e 94 04 12 	call	0x2408	; 0x2408 <__umulhisi3>
    242a:	a5 9f       	mul	r26, r21
    242c:	90 0d       	add	r25, r0
    242e:	b4 9f       	mul	r27, r20
    2430:	90 0d       	add	r25, r0
    2432:	a4 9f       	mul	r26, r20
    2434:	80 0d       	add	r24, r0
    2436:	91 1d       	adc	r25, r1
    2438:	11 24       	eor	r1, r1
    243a:	08 95       	ret

0000243c <atof>:
    243c:	66 27       	eor	r22, r22
    243e:	77 27       	eor	r23, r23
    2440:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <strtod>

00002444 <strtok>:
    2444:	40 eb       	ldi	r20, 0xB0	; 176
    2446:	51 e0       	ldi	r21, 0x01	; 1
    2448:	0e 94 2e 12 	call	0x245c	; 0x245c <strtok_r>
    244c:	08 95       	ret

0000244e <memset>:
    244e:	dc 01       	movw	r26, r24
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <memset+0x6>
    2452:	6d 93       	st	X+, r22
    2454:	41 50       	subi	r20, 0x01	; 1
    2456:	50 40       	sbci	r21, 0x00	; 0
    2458:	e0 f7       	brcc	.-8      	; 0x2452 <memset+0x4>
    245a:	08 95       	ret

0000245c <strtok_r>:
    245c:	fa 01       	movw	r30, r20
    245e:	a1 91       	ld	r26, Z+
    2460:	b0 81       	ld	r27, Z
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	19 f4       	brne	.+6      	; 0x246c <strtok_r+0x10>
    2466:	10 97       	sbiw	r26, 0x00	; 0
    2468:	e1 f0       	breq	.+56     	; 0x24a2 <strtok_r+0x46>
    246a:	cd 01       	movw	r24, r26
    246c:	dc 01       	movw	r26, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0d 90       	ld	r0, X+
    2472:	00 20       	and	r0, r0
    2474:	11 f4       	brne	.+4      	; 0x247a <strtok_r+0x1e>
    2476:	c0 01       	movw	r24, r0
    2478:	13 c0       	rjmp	.+38     	; 0x24a0 <strtok_r+0x44>
    247a:	fb 01       	movw	r30, r22
    247c:	21 91       	ld	r18, Z+
    247e:	22 23       	and	r18, r18
    2480:	19 f0       	breq	.+6      	; 0x2488 <strtok_r+0x2c>
    2482:	20 15       	cp	r18, r0
    2484:	d9 f7       	brne	.-10     	; 0x247c <strtok_r+0x20>
    2486:	f3 cf       	rjmp	.-26     	; 0x246e <strtok_r+0x12>
    2488:	fb 01       	movw	r30, r22
    248a:	21 91       	ld	r18, Z+
    248c:	20 15       	cp	r18, r0
    248e:	19 f4       	brne	.+6      	; 0x2496 <strtok_r+0x3a>
    2490:	1e 92       	st	-X, r1
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	06 c0       	rjmp	.+12     	; 0x24a2 <strtok_r+0x46>
    2496:	22 23       	and	r18, r18
    2498:	c1 f7       	brne	.-16     	; 0x248a <strtok_r+0x2e>
    249a:	0d 90       	ld	r0, X+
    249c:	00 20       	and	r0, r0
    249e:	a1 f7       	brne	.-24     	; 0x2488 <strtok_r+0x2c>
    24a0:	d0 01       	movw	r26, r0
    24a2:	fa 01       	movw	r30, r20
    24a4:	a1 93       	st	Z+, r26
    24a6:	b0 83       	st	Z, r27
    24a8:	08 95       	ret

000024aa <snprintf>:
    24aa:	ae e0       	ldi	r26, 0x0E	; 14
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	eb e5       	ldi	r30, 0x5B	; 91
    24b0:	f2 e1       	ldi	r31, 0x12	; 18
    24b2:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__prologue_saves__+0x1c>
    24b6:	0d 89       	ldd	r16, Y+21	; 0x15
    24b8:	1e 89       	ldd	r17, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	26 e0       	ldi	r18, 0x06	; 6
    24c0:	2c 83       	std	Y+4, r18	; 0x04
    24c2:	1a 83       	std	Y+2, r17	; 0x02
    24c4:	09 83       	std	Y+1, r16	; 0x01
    24c6:	97 ff       	sbrs	r25, 7
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <snprintf+0x24>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e8       	ldi	r25, 0x80	; 128
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	ae 01       	movw	r20, r28
    24d6:	45 5e       	subi	r20, 0xE5	; 229
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255
    24da:	69 8d       	ldd	r22, Y+25	; 0x19
    24dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24de:	ce 01       	movw	r24, r28
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	0e 94 85 12 	call	0x250a	; 0x250a <vfprintf>
    24e6:	4d 81       	ldd	r20, Y+5	; 0x05
    24e8:	5e 81       	ldd	r21, Y+6	; 0x06
    24ea:	57 fd       	sbrc	r21, 7
    24ec:	0a c0       	rjmp	.+20     	; 0x2502 <snprintf+0x58>
    24ee:	2f 81       	ldd	r18, Y+7	; 0x07
    24f0:	38 85       	ldd	r19, Y+8	; 0x08
    24f2:	42 17       	cp	r20, r18
    24f4:	53 07       	cpc	r21, r19
    24f6:	0c f4       	brge	.+2      	; 0x24fa <snprintf+0x50>
    24f8:	9a 01       	movw	r18, r20
    24fa:	f8 01       	movw	r30, r16
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	10 82       	st	Z, r1
    2502:	2e 96       	adiw	r28, 0x0e	; 14
    2504:	e4 e0       	ldi	r30, 0x04	; 4
    2506:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__epilogue_restores__+0x1c>

0000250a <vfprintf>:
    250a:	ab e0       	ldi	r26, 0x0B	; 11
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	eb e8       	ldi	r30, 0x8B	; 139
    2510:	f2 e1       	ldi	r31, 0x12	; 18
    2512:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__>
    2516:	6c 01       	movw	r12, r24
    2518:	7b 01       	movw	r14, r22
    251a:	8a 01       	movw	r16, r20
    251c:	fc 01       	movw	r30, r24
    251e:	17 82       	std	Z+7, r1	; 0x07
    2520:	16 82       	std	Z+6, r1	; 0x06
    2522:	83 81       	ldd	r24, Z+3	; 0x03
    2524:	81 ff       	sbrs	r24, 1
    2526:	cc c1       	rjmp	.+920    	; 0x28c0 <vfprintf+0x3b6>
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	3c 01       	movw	r6, r24
    252e:	f6 01       	movw	r30, r12
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	f7 01       	movw	r30, r14
    2534:	93 fd       	sbrc	r25, 3
    2536:	85 91       	lpm	r24, Z+
    2538:	93 ff       	sbrs	r25, 3
    253a:	81 91       	ld	r24, Z+
    253c:	7f 01       	movw	r14, r30
    253e:	88 23       	and	r24, r24
    2540:	09 f4       	brne	.+2      	; 0x2544 <vfprintf+0x3a>
    2542:	ba c1       	rjmp	.+884    	; 0x28b8 <vfprintf+0x3ae>
    2544:	85 32       	cpi	r24, 0x25	; 37
    2546:	39 f4       	brne	.+14     	; 0x2556 <vfprintf+0x4c>
    2548:	93 fd       	sbrc	r25, 3
    254a:	85 91       	lpm	r24, Z+
    254c:	93 ff       	sbrs	r25, 3
    254e:	81 91       	ld	r24, Z+
    2550:	7f 01       	movw	r14, r30
    2552:	85 32       	cpi	r24, 0x25	; 37
    2554:	29 f4       	brne	.+10     	; 0x2560 <vfprintf+0x56>
    2556:	b6 01       	movw	r22, r12
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    255e:	e7 cf       	rjmp	.-50     	; 0x252e <vfprintf+0x24>
    2560:	91 2c       	mov	r9, r1
    2562:	21 2c       	mov	r2, r1
    2564:	31 2c       	mov	r3, r1
    2566:	ff e1       	ldi	r31, 0x1F	; 31
    2568:	f3 15       	cp	r31, r3
    256a:	d8 f0       	brcs	.+54     	; 0x25a2 <vfprintf+0x98>
    256c:	8b 32       	cpi	r24, 0x2B	; 43
    256e:	79 f0       	breq	.+30     	; 0x258e <vfprintf+0x84>
    2570:	38 f4       	brcc	.+14     	; 0x2580 <vfprintf+0x76>
    2572:	80 32       	cpi	r24, 0x20	; 32
    2574:	79 f0       	breq	.+30     	; 0x2594 <vfprintf+0x8a>
    2576:	83 32       	cpi	r24, 0x23	; 35
    2578:	a1 f4       	brne	.+40     	; 0x25a2 <vfprintf+0x98>
    257a:	23 2d       	mov	r18, r3
    257c:	20 61       	ori	r18, 0x10	; 16
    257e:	1d c0       	rjmp	.+58     	; 0x25ba <vfprintf+0xb0>
    2580:	8d 32       	cpi	r24, 0x2D	; 45
    2582:	61 f0       	breq	.+24     	; 0x259c <vfprintf+0x92>
    2584:	80 33       	cpi	r24, 0x30	; 48
    2586:	69 f4       	brne	.+26     	; 0x25a2 <vfprintf+0x98>
    2588:	23 2d       	mov	r18, r3
    258a:	21 60       	ori	r18, 0x01	; 1
    258c:	16 c0       	rjmp	.+44     	; 0x25ba <vfprintf+0xb0>
    258e:	83 2d       	mov	r24, r3
    2590:	82 60       	ori	r24, 0x02	; 2
    2592:	38 2e       	mov	r3, r24
    2594:	e3 2d       	mov	r30, r3
    2596:	e4 60       	ori	r30, 0x04	; 4
    2598:	3e 2e       	mov	r3, r30
    259a:	2a c0       	rjmp	.+84     	; 0x25f0 <vfprintf+0xe6>
    259c:	f3 2d       	mov	r31, r3
    259e:	f8 60       	ori	r31, 0x08	; 8
    25a0:	1d c0       	rjmp	.+58     	; 0x25dc <vfprintf+0xd2>
    25a2:	37 fc       	sbrc	r3, 7
    25a4:	2d c0       	rjmp	.+90     	; 0x2600 <vfprintf+0xf6>
    25a6:	20 ed       	ldi	r18, 0xD0	; 208
    25a8:	28 0f       	add	r18, r24
    25aa:	2a 30       	cpi	r18, 0x0A	; 10
    25ac:	40 f0       	brcs	.+16     	; 0x25be <vfprintf+0xb4>
    25ae:	8e 32       	cpi	r24, 0x2E	; 46
    25b0:	b9 f4       	brne	.+46     	; 0x25e0 <vfprintf+0xd6>
    25b2:	36 fc       	sbrc	r3, 6
    25b4:	81 c1       	rjmp	.+770    	; 0x28b8 <vfprintf+0x3ae>
    25b6:	23 2d       	mov	r18, r3
    25b8:	20 64       	ori	r18, 0x40	; 64
    25ba:	32 2e       	mov	r3, r18
    25bc:	19 c0       	rjmp	.+50     	; 0x25f0 <vfprintf+0xe6>
    25be:	36 fe       	sbrs	r3, 6
    25c0:	06 c0       	rjmp	.+12     	; 0x25ce <vfprintf+0xc4>
    25c2:	8a e0       	ldi	r24, 0x0A	; 10
    25c4:	98 9e       	mul	r9, r24
    25c6:	20 0d       	add	r18, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	92 2e       	mov	r9, r18
    25cc:	11 c0       	rjmp	.+34     	; 0x25f0 <vfprintf+0xe6>
    25ce:	ea e0       	ldi	r30, 0x0A	; 10
    25d0:	2e 9e       	mul	r2, r30
    25d2:	20 0d       	add	r18, r0
    25d4:	11 24       	eor	r1, r1
    25d6:	22 2e       	mov	r2, r18
    25d8:	f3 2d       	mov	r31, r3
    25da:	f0 62       	ori	r31, 0x20	; 32
    25dc:	3f 2e       	mov	r3, r31
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <vfprintf+0xe6>
    25e0:	8c 36       	cpi	r24, 0x6C	; 108
    25e2:	21 f4       	brne	.+8      	; 0x25ec <vfprintf+0xe2>
    25e4:	83 2d       	mov	r24, r3
    25e6:	80 68       	ori	r24, 0x80	; 128
    25e8:	38 2e       	mov	r3, r24
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <vfprintf+0xe6>
    25ec:	88 36       	cpi	r24, 0x68	; 104
    25ee:	41 f4       	brne	.+16     	; 0x2600 <vfprintf+0xf6>
    25f0:	f7 01       	movw	r30, r14
    25f2:	93 fd       	sbrc	r25, 3
    25f4:	85 91       	lpm	r24, Z+
    25f6:	93 ff       	sbrs	r25, 3
    25f8:	81 91       	ld	r24, Z+
    25fa:	7f 01       	movw	r14, r30
    25fc:	81 11       	cpse	r24, r1
    25fe:	b3 cf       	rjmp	.-154    	; 0x2566 <vfprintf+0x5c>
    2600:	98 2f       	mov	r25, r24
    2602:	9f 7d       	andi	r25, 0xDF	; 223
    2604:	95 54       	subi	r25, 0x45	; 69
    2606:	93 30       	cpi	r25, 0x03	; 3
    2608:	28 f4       	brcc	.+10     	; 0x2614 <vfprintf+0x10a>
    260a:	0c 5f       	subi	r16, 0xFC	; 252
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	9f e3       	ldi	r25, 0x3F	; 63
    2610:	99 83       	std	Y+1, r25	; 0x01
    2612:	0d c0       	rjmp	.+26     	; 0x262e <vfprintf+0x124>
    2614:	83 36       	cpi	r24, 0x63	; 99
    2616:	31 f0       	breq	.+12     	; 0x2624 <vfprintf+0x11a>
    2618:	83 37       	cpi	r24, 0x73	; 115
    261a:	71 f0       	breq	.+28     	; 0x2638 <vfprintf+0x12e>
    261c:	83 35       	cpi	r24, 0x53	; 83
    261e:	09 f0       	breq	.+2      	; 0x2622 <vfprintf+0x118>
    2620:	59 c0       	rjmp	.+178    	; 0x26d4 <vfprintf+0x1ca>
    2622:	21 c0       	rjmp	.+66     	; 0x2666 <vfprintf+0x15c>
    2624:	f8 01       	movw	r30, r16
    2626:	80 81       	ld	r24, Z
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	0e 5f       	subi	r16, 0xFE	; 254
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	88 24       	eor	r8, r8
    2630:	83 94       	inc	r8
    2632:	91 2c       	mov	r9, r1
    2634:	53 01       	movw	r10, r6
    2636:	13 c0       	rjmp	.+38     	; 0x265e <vfprintf+0x154>
    2638:	28 01       	movw	r4, r16
    263a:	f2 e0       	ldi	r31, 0x02	; 2
    263c:	4f 0e       	add	r4, r31
    263e:	51 1c       	adc	r5, r1
    2640:	f8 01       	movw	r30, r16
    2642:	a0 80       	ld	r10, Z
    2644:	b1 80       	ldd	r11, Z+1	; 0x01
    2646:	36 fe       	sbrs	r3, 6
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <vfprintf+0x146>
    264a:	69 2d       	mov	r22, r9
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <vfprintf+0x14a>
    2650:	6f ef       	ldi	r22, 0xFF	; 255
    2652:	7f ef       	ldi	r23, 0xFF	; 255
    2654:	c5 01       	movw	r24, r10
    2656:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <strnlen>
    265a:	4c 01       	movw	r8, r24
    265c:	82 01       	movw	r16, r4
    265e:	f3 2d       	mov	r31, r3
    2660:	ff 77       	andi	r31, 0x7F	; 127
    2662:	3f 2e       	mov	r3, r31
    2664:	16 c0       	rjmp	.+44     	; 0x2692 <vfprintf+0x188>
    2666:	28 01       	movw	r4, r16
    2668:	22 e0       	ldi	r18, 0x02	; 2
    266a:	42 0e       	add	r4, r18
    266c:	51 1c       	adc	r5, r1
    266e:	f8 01       	movw	r30, r16
    2670:	a0 80       	ld	r10, Z
    2672:	b1 80       	ldd	r11, Z+1	; 0x01
    2674:	36 fe       	sbrs	r3, 6
    2676:	03 c0       	rjmp	.+6      	; 0x267e <vfprintf+0x174>
    2678:	69 2d       	mov	r22, r9
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <vfprintf+0x178>
    267e:	6f ef       	ldi	r22, 0xFF	; 255
    2680:	7f ef       	ldi	r23, 0xFF	; 255
    2682:	c5 01       	movw	r24, r10
    2684:	0e 94 d5 15 	call	0x2baa	; 0x2baa <strnlen_P>
    2688:	4c 01       	movw	r8, r24
    268a:	f3 2d       	mov	r31, r3
    268c:	f0 68       	ori	r31, 0x80	; 128
    268e:	3f 2e       	mov	r3, r31
    2690:	82 01       	movw	r16, r4
    2692:	33 fc       	sbrc	r3, 3
    2694:	1b c0       	rjmp	.+54     	; 0x26cc <vfprintf+0x1c2>
    2696:	82 2d       	mov	r24, r2
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	88 16       	cp	r8, r24
    269c:	99 06       	cpc	r9, r25
    269e:	b0 f4       	brcc	.+44     	; 0x26cc <vfprintf+0x1c2>
    26a0:	b6 01       	movw	r22, r12
    26a2:	80 e2       	ldi	r24, 0x20	; 32
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    26aa:	2a 94       	dec	r2
    26ac:	f4 cf       	rjmp	.-24     	; 0x2696 <vfprintf+0x18c>
    26ae:	f5 01       	movw	r30, r10
    26b0:	37 fc       	sbrc	r3, 7
    26b2:	85 91       	lpm	r24, Z+
    26b4:	37 fe       	sbrs	r3, 7
    26b6:	81 91       	ld	r24, Z+
    26b8:	5f 01       	movw	r10, r30
    26ba:	b6 01       	movw	r22, r12
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    26c2:	21 10       	cpse	r2, r1
    26c4:	2a 94       	dec	r2
    26c6:	21 e0       	ldi	r18, 0x01	; 1
    26c8:	82 1a       	sub	r8, r18
    26ca:	91 08       	sbc	r9, r1
    26cc:	81 14       	cp	r8, r1
    26ce:	91 04       	cpc	r9, r1
    26d0:	71 f7       	brne	.-36     	; 0x26ae <vfprintf+0x1a4>
    26d2:	e8 c0       	rjmp	.+464    	; 0x28a4 <vfprintf+0x39a>
    26d4:	84 36       	cpi	r24, 0x64	; 100
    26d6:	11 f0       	breq	.+4      	; 0x26dc <vfprintf+0x1d2>
    26d8:	89 36       	cpi	r24, 0x69	; 105
    26da:	41 f5       	brne	.+80     	; 0x272c <vfprintf+0x222>
    26dc:	f8 01       	movw	r30, r16
    26de:	37 fe       	sbrs	r3, 7
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <vfprintf+0x1e6>
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0c 5f       	subi	r16, 0xFC	; 252
    26ec:	1f 4f       	sbci	r17, 0xFF	; 255
    26ee:	08 c0       	rjmp	.+16     	; 0x2700 <vfprintf+0x1f6>
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	07 2e       	mov	r0, r23
    26f6:	00 0c       	add	r0, r0
    26f8:	88 0b       	sbc	r24, r24
    26fa:	99 0b       	sbc	r25, r25
    26fc:	0e 5f       	subi	r16, 0xFE	; 254
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	f3 2d       	mov	r31, r3
    2702:	ff 76       	andi	r31, 0x6F	; 111
    2704:	3f 2e       	mov	r3, r31
    2706:	97 ff       	sbrs	r25, 7
    2708:	09 c0       	rjmp	.+18     	; 0x271c <vfprintf+0x212>
    270a:	90 95       	com	r25
    270c:	80 95       	com	r24
    270e:	70 95       	com	r23
    2710:	61 95       	neg	r22
    2712:	7f 4f       	sbci	r23, 0xFF	; 255
    2714:	8f 4f       	sbci	r24, 0xFF	; 255
    2716:	9f 4f       	sbci	r25, 0xFF	; 255
    2718:	f0 68       	ori	r31, 0x80	; 128
    271a:	3f 2e       	mov	r3, r31
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	a3 01       	movw	r20, r6
    2722:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__ultoa_invert>
    2726:	88 2e       	mov	r8, r24
    2728:	86 18       	sub	r8, r6
    272a:	45 c0       	rjmp	.+138    	; 0x27b6 <vfprintf+0x2ac>
    272c:	85 37       	cpi	r24, 0x75	; 117
    272e:	31 f4       	brne	.+12     	; 0x273c <vfprintf+0x232>
    2730:	23 2d       	mov	r18, r3
    2732:	2f 7e       	andi	r18, 0xEF	; 239
    2734:	b2 2e       	mov	r11, r18
    2736:	2a e0       	ldi	r18, 0x0A	; 10
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	25 c0       	rjmp	.+74     	; 0x2786 <vfprintf+0x27c>
    273c:	93 2d       	mov	r25, r3
    273e:	99 7f       	andi	r25, 0xF9	; 249
    2740:	b9 2e       	mov	r11, r25
    2742:	8f 36       	cpi	r24, 0x6F	; 111
    2744:	c1 f0       	breq	.+48     	; 0x2776 <vfprintf+0x26c>
    2746:	18 f4       	brcc	.+6      	; 0x274e <vfprintf+0x244>
    2748:	88 35       	cpi	r24, 0x58	; 88
    274a:	79 f0       	breq	.+30     	; 0x276a <vfprintf+0x260>
    274c:	b5 c0       	rjmp	.+362    	; 0x28b8 <vfprintf+0x3ae>
    274e:	80 37       	cpi	r24, 0x70	; 112
    2750:	19 f0       	breq	.+6      	; 0x2758 <vfprintf+0x24e>
    2752:	88 37       	cpi	r24, 0x78	; 120
    2754:	21 f0       	breq	.+8      	; 0x275e <vfprintf+0x254>
    2756:	b0 c0       	rjmp	.+352    	; 0x28b8 <vfprintf+0x3ae>
    2758:	e9 2f       	mov	r30, r25
    275a:	e0 61       	ori	r30, 0x10	; 16
    275c:	be 2e       	mov	r11, r30
    275e:	b4 fe       	sbrs	r11, 4
    2760:	0d c0       	rjmp	.+26     	; 0x277c <vfprintf+0x272>
    2762:	fb 2d       	mov	r31, r11
    2764:	f4 60       	ori	r31, 0x04	; 4
    2766:	bf 2e       	mov	r11, r31
    2768:	09 c0       	rjmp	.+18     	; 0x277c <vfprintf+0x272>
    276a:	34 fe       	sbrs	r3, 4
    276c:	0a c0       	rjmp	.+20     	; 0x2782 <vfprintf+0x278>
    276e:	29 2f       	mov	r18, r25
    2770:	26 60       	ori	r18, 0x06	; 6
    2772:	b2 2e       	mov	r11, r18
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <vfprintf+0x278>
    2776:	28 e0       	ldi	r18, 0x08	; 8
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	05 c0       	rjmp	.+10     	; 0x2786 <vfprintf+0x27c>
    277c:	20 e1       	ldi	r18, 0x10	; 16
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <vfprintf+0x27c>
    2782:	20 e1       	ldi	r18, 0x10	; 16
    2784:	32 e0       	ldi	r19, 0x02	; 2
    2786:	f8 01       	movw	r30, r16
    2788:	b7 fe       	sbrs	r11, 7
    278a:	07 c0       	rjmp	.+14     	; 0x279a <vfprintf+0x290>
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	0c 5f       	subi	r16, 0xFC	; 252
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	06 c0       	rjmp	.+12     	; 0x27a6 <vfprintf+0x29c>
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 5f       	subi	r16, 0xFE	; 254
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	a3 01       	movw	r20, r6
    27a8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__ultoa_invert>
    27ac:	88 2e       	mov	r8, r24
    27ae:	86 18       	sub	r8, r6
    27b0:	fb 2d       	mov	r31, r11
    27b2:	ff 77       	andi	r31, 0x7F	; 127
    27b4:	3f 2e       	mov	r3, r31
    27b6:	36 fe       	sbrs	r3, 6
    27b8:	0d c0       	rjmp	.+26     	; 0x27d4 <vfprintf+0x2ca>
    27ba:	23 2d       	mov	r18, r3
    27bc:	2e 7f       	andi	r18, 0xFE	; 254
    27be:	a2 2e       	mov	r10, r18
    27c0:	89 14       	cp	r8, r9
    27c2:	58 f4       	brcc	.+22     	; 0x27da <vfprintf+0x2d0>
    27c4:	34 fe       	sbrs	r3, 4
    27c6:	0b c0       	rjmp	.+22     	; 0x27de <vfprintf+0x2d4>
    27c8:	32 fc       	sbrc	r3, 2
    27ca:	09 c0       	rjmp	.+18     	; 0x27de <vfprintf+0x2d4>
    27cc:	83 2d       	mov	r24, r3
    27ce:	8e 7e       	andi	r24, 0xEE	; 238
    27d0:	a8 2e       	mov	r10, r24
    27d2:	05 c0       	rjmp	.+10     	; 0x27de <vfprintf+0x2d4>
    27d4:	b8 2c       	mov	r11, r8
    27d6:	a3 2c       	mov	r10, r3
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <vfprintf+0x2d6>
    27da:	b8 2c       	mov	r11, r8
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <vfprintf+0x2d6>
    27de:	b9 2c       	mov	r11, r9
    27e0:	a4 fe       	sbrs	r10, 4
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <vfprintf+0x2f8>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e8 0d       	add	r30, r8
    27e8:	f1 1d       	adc	r31, r1
    27ea:	80 81       	ld	r24, Z
    27ec:	80 33       	cpi	r24, 0x30	; 48
    27ee:	21 f4       	brne	.+8      	; 0x27f8 <vfprintf+0x2ee>
    27f0:	9a 2d       	mov	r25, r10
    27f2:	99 7e       	andi	r25, 0xE9	; 233
    27f4:	a9 2e       	mov	r10, r25
    27f6:	09 c0       	rjmp	.+18     	; 0x280a <vfprintf+0x300>
    27f8:	a2 fe       	sbrs	r10, 2
    27fa:	06 c0       	rjmp	.+12     	; 0x2808 <vfprintf+0x2fe>
    27fc:	b3 94       	inc	r11
    27fe:	b3 94       	inc	r11
    2800:	04 c0       	rjmp	.+8      	; 0x280a <vfprintf+0x300>
    2802:	8a 2d       	mov	r24, r10
    2804:	86 78       	andi	r24, 0x86	; 134
    2806:	09 f0       	breq	.+2      	; 0x280a <vfprintf+0x300>
    2808:	b3 94       	inc	r11
    280a:	a3 fc       	sbrc	r10, 3
    280c:	11 c0       	rjmp	.+34     	; 0x2830 <vfprintf+0x326>
    280e:	a0 fe       	sbrs	r10, 0
    2810:	06 c0       	rjmp	.+12     	; 0x281e <vfprintf+0x314>
    2812:	b2 14       	cp	r11, r2
    2814:	88 f4       	brcc	.+34     	; 0x2838 <vfprintf+0x32e>
    2816:	28 0c       	add	r2, r8
    2818:	92 2c       	mov	r9, r2
    281a:	9b 18       	sub	r9, r11
    281c:	0e c0       	rjmp	.+28     	; 0x283a <vfprintf+0x330>
    281e:	b2 14       	cp	r11, r2
    2820:	60 f4       	brcc	.+24     	; 0x283a <vfprintf+0x330>
    2822:	b6 01       	movw	r22, r12
    2824:	80 e2       	ldi	r24, 0x20	; 32
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    282c:	b3 94       	inc	r11
    282e:	f7 cf       	rjmp	.-18     	; 0x281e <vfprintf+0x314>
    2830:	b2 14       	cp	r11, r2
    2832:	18 f4       	brcc	.+6      	; 0x283a <vfprintf+0x330>
    2834:	2b 18       	sub	r2, r11
    2836:	02 c0       	rjmp	.+4      	; 0x283c <vfprintf+0x332>
    2838:	98 2c       	mov	r9, r8
    283a:	21 2c       	mov	r2, r1
    283c:	a4 fe       	sbrs	r10, 4
    283e:	10 c0       	rjmp	.+32     	; 0x2860 <vfprintf+0x356>
    2840:	b6 01       	movw	r22, r12
    2842:	80 e3       	ldi	r24, 0x30	; 48
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    284a:	a2 fe       	sbrs	r10, 2
    284c:	17 c0       	rjmp	.+46     	; 0x287c <vfprintf+0x372>
    284e:	a1 fc       	sbrc	r10, 1
    2850:	03 c0       	rjmp	.+6      	; 0x2858 <vfprintf+0x34e>
    2852:	88 e7       	ldi	r24, 0x78	; 120
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	02 c0       	rjmp	.+4      	; 0x285c <vfprintf+0x352>
    2858:	88 e5       	ldi	r24, 0x58	; 88
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	b6 01       	movw	r22, r12
    285e:	0c c0       	rjmp	.+24     	; 0x2878 <vfprintf+0x36e>
    2860:	8a 2d       	mov	r24, r10
    2862:	86 78       	andi	r24, 0x86	; 134
    2864:	59 f0       	breq	.+22     	; 0x287c <vfprintf+0x372>
    2866:	a1 fe       	sbrs	r10, 1
    2868:	02 c0       	rjmp	.+4      	; 0x286e <vfprintf+0x364>
    286a:	8b e2       	ldi	r24, 0x2B	; 43
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <vfprintf+0x366>
    286e:	80 e2       	ldi	r24, 0x20	; 32
    2870:	a7 fc       	sbrc	r10, 7
    2872:	8d e2       	ldi	r24, 0x2D	; 45
    2874:	b6 01       	movw	r22, r12
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    287c:	89 14       	cp	r8, r9
    287e:	38 f4       	brcc	.+14     	; 0x288e <vfprintf+0x384>
    2880:	b6 01       	movw	r22, r12
    2882:	80 e3       	ldi	r24, 0x30	; 48
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    288a:	9a 94       	dec	r9
    288c:	f7 cf       	rjmp	.-18     	; 0x287c <vfprintf+0x372>
    288e:	8a 94       	dec	r8
    2890:	f3 01       	movw	r30, r6
    2892:	e8 0d       	add	r30, r8
    2894:	f1 1d       	adc	r31, r1
    2896:	80 81       	ld	r24, Z
    2898:	b6 01       	movw	r22, r12
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    28a0:	81 10       	cpse	r8, r1
    28a2:	f5 cf       	rjmp	.-22     	; 0x288e <vfprintf+0x384>
    28a4:	22 20       	and	r2, r2
    28a6:	09 f4       	brne	.+2      	; 0x28aa <vfprintf+0x3a0>
    28a8:	42 ce       	rjmp	.-892    	; 0x252e <vfprintf+0x24>
    28aa:	b6 01       	movw	r22, r12
    28ac:	80 e2       	ldi	r24, 0x20	; 32
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    28b4:	2a 94       	dec	r2
    28b6:	f6 cf       	rjmp	.-20     	; 0x28a4 <vfprintf+0x39a>
    28b8:	f6 01       	movw	r30, r12
    28ba:	86 81       	ldd	r24, Z+6	; 0x06
    28bc:	97 81       	ldd	r25, Z+7	; 0x07
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <vfprintf+0x3ba>
    28c0:	8f ef       	ldi	r24, 0xFF	; 255
    28c2:	9f ef       	ldi	r25, 0xFF	; 255
    28c4:	2b 96       	adiw	r28, 0x0b	; 11
    28c6:	e2 e1       	ldi	r30, 0x12	; 18
    28c8:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__>

000028cc <strtod>:
    28cc:	a0 e0       	ldi	r26, 0x00	; 0
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	ec e6       	ldi	r30, 0x6C	; 108
    28d2:	f4 e1       	ldi	r31, 0x14	; 20
    28d4:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__prologue_saves__+0xc>
    28d8:	ec 01       	movw	r28, r24
    28da:	6b 01       	movw	r12, r22
    28dc:	61 15       	cp	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	19 f0       	breq	.+6      	; 0x28e8 <strtod+0x1c>
    28e2:	fb 01       	movw	r30, r22
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	7e 01       	movw	r14, r28
    28ea:	ff ef       	ldi	r31, 0xFF	; 255
    28ec:	ef 1a       	sub	r14, r31
    28ee:	ff 0a       	sbc	r15, r31
    28f0:	08 81       	ld	r16, Y
    28f2:	80 2f       	mov	r24, r16
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <isspace>
    28fa:	89 2b       	or	r24, r25
    28fc:	11 f0       	breq	.+4      	; 0x2902 <strtod+0x36>
    28fe:	e7 01       	movw	r28, r14
    2900:	f3 cf       	rjmp	.-26     	; 0x28e8 <strtod+0x1c>
    2902:	0d 32       	cpi	r16, 0x2D	; 45
    2904:	39 f4       	brne	.+14     	; 0x2914 <strtod+0x48>
    2906:	7e 01       	movw	r14, r28
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	e8 0e       	add	r14, r24
    290c:	f1 1c       	adc	r15, r1
    290e:	09 81       	ldd	r16, Y+1	; 0x01
    2910:	11 e0       	ldi	r17, 0x01	; 1
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <strtod+0x58>
    2914:	0b 32       	cpi	r16, 0x2B	; 43
    2916:	29 f4       	brne	.+10     	; 0x2922 <strtod+0x56>
    2918:	7e 01       	movw	r14, r28
    291a:	92 e0       	ldi	r25, 0x02	; 2
    291c:	e9 0e       	add	r14, r25
    291e:	f1 1c       	adc	r15, r1
    2920:	09 81       	ldd	r16, Y+1	; 0x01
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	e7 01       	movw	r28, r14
    2926:	21 97       	sbiw	r28, 0x01	; 1
    2928:	43 e0       	ldi	r20, 0x03	; 3
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	60 e7       	ldi	r22, 0x70	; 112
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	ce 01       	movw	r24, r28
    2932:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strncasecmp_P>
    2936:	89 2b       	or	r24, r25
    2938:	c1 f4       	brne	.+48     	; 0x296a <strtod+0x9e>
    293a:	23 96       	adiw	r28, 0x03	; 3
    293c:	45 e0       	ldi	r20, 0x05	; 5
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	6b e6       	ldi	r22, 0x6B	; 107
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	ce 01       	movw	r24, r28
    2946:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strncasecmp_P>
    294a:	89 2b       	or	r24, r25
    294c:	09 f4       	brne	.+2      	; 0x2950 <strtod+0x84>
    294e:	25 96       	adiw	r28, 0x05	; 5
    2950:	c1 14       	cp	r12, r1
    2952:	d1 04       	cpc	r13, r1
    2954:	19 f0       	breq	.+6      	; 0x295c <strtod+0x90>
    2956:	f6 01       	movw	r30, r12
    2958:	d1 83       	std	Z+1, r29	; 0x01
    295a:	c0 83       	st	Z, r28
    295c:	11 11       	cpse	r17, r1
    295e:	f6 c0       	rjmp	.+492    	; 0x2b4c <strtod+0x280>
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	80 e8       	ldi	r24, 0x80	; 128
    2966:	9f e7       	ldi	r25, 0x7F	; 127
    2968:	fa c0       	rjmp	.+500    	; 0x2b5e <strtod+0x292>
    296a:	43 e0       	ldi	r20, 0x03	; 3
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	68 e6       	ldi	r22, 0x68	; 104
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	ce 01       	movw	r24, r28
    2974:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strncasecmp_P>
    2978:	89 2b       	or	r24, r25
    297a:	59 f4       	brne	.+22     	; 0x2992 <strtod+0xc6>
    297c:	c1 14       	cp	r12, r1
    297e:	d1 04       	cpc	r13, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <strtod+0xb8>
    2982:	e9 c0       	rjmp	.+466    	; 0x2b56 <strtod+0x28a>
    2984:	f2 e0       	ldi	r31, 0x02	; 2
    2986:	ef 0e       	add	r14, r31
    2988:	f1 1c       	adc	r15, r1
    298a:	f6 01       	movw	r30, r12
    298c:	f1 82       	std	Z+1, r15	; 0x01
    298e:	e0 82       	st	Z, r14
    2990:	e2 c0       	rjmp	.+452    	; 0x2b56 <strtod+0x28a>
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	a9 01       	movw	r20, r18
    2998:	c0 e0       	ldi	r28, 0x00	; 0
    299a:	d0 e0       	ldi	r29, 0x00	; 0
    299c:	f7 01       	movw	r30, r14
    299e:	80 ed       	ldi	r24, 0xD0	; 208
    29a0:	a8 2e       	mov	r10, r24
    29a2:	a0 0e       	add	r10, r16
    29a4:	89 e0       	ldi	r24, 0x09	; 9
    29a6:	8a 15       	cp	r24, r10
    29a8:	30 f1       	brcs	.+76     	; 0x29f6 <strtod+0x12a>
    29aa:	91 2f       	mov	r25, r17
    29ac:	92 60       	ori	r25, 0x02	; 2
    29ae:	b9 2e       	mov	r11, r25
    29b0:	81 2f       	mov	r24, r17
    29b2:	88 70       	andi	r24, 0x08	; 8
    29b4:	12 ff       	sbrs	r17, 2
    29b6:	04 c0       	rjmp	.+8      	; 0x29c0 <strtod+0xf4>
    29b8:	81 11       	cpse	r24, r1
    29ba:	24 c0       	rjmp	.+72     	; 0x2a04 <strtod+0x138>
    29bc:	21 96       	adiw	r28, 0x01	; 1
    29be:	22 c0       	rjmp	.+68     	; 0x2a04 <strtod+0x138>
    29c0:	81 11       	cpse	r24, r1
    29c2:	21 97       	sbiw	r28, 0x01	; 1
    29c4:	a5 e0       	ldi	r26, 0x05	; 5
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	0e 94 13 12 	call	0x2426	; 0x2426 <__muluhisi3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	aa 1f       	adc	r26, r26
    29d6:	bb 1f       	adc	r27, r27
    29d8:	9c 01       	movw	r18, r24
    29da:	ad 01       	movw	r20, r26
    29dc:	2a 0d       	add	r18, r10
    29de:	31 1d       	adc	r19, r1
    29e0:	41 1d       	adc	r20, r1
    29e2:	51 1d       	adc	r21, r1
    29e4:	28 39       	cpi	r18, 0x98	; 152
    29e6:	89 e9       	ldi	r24, 0x99	; 153
    29e8:	38 07       	cpc	r19, r24
    29ea:	48 07       	cpc	r20, r24
    29ec:	89 e1       	ldi	r24, 0x19	; 25
    29ee:	58 07       	cpc	r21, r24
    29f0:	48 f0       	brcs	.+18     	; 0x2a04 <strtod+0x138>
    29f2:	16 60       	ori	r17, 0x06	; 6
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <strtod+0x136>
    29f6:	9e ef       	ldi	r25, 0xFE	; 254
    29f8:	a9 12       	cpse	r10, r25
    29fa:	0a c0       	rjmp	.+20     	; 0x2a10 <strtod+0x144>
    29fc:	13 fd       	sbrc	r17, 3
    29fe:	40 c0       	rjmp	.+128    	; 0x2a80 <strtod+0x1b4>
    2a00:	18 60       	ori	r17, 0x08	; 8
    2a02:	b1 2e       	mov	r11, r17
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	e8 1a       	sub	r14, r24
    2a08:	f8 0a       	sbc	r15, r24
    2a0a:	00 81       	ld	r16, Z
    2a0c:	1b 2d       	mov	r17, r11
    2a0e:	c6 cf       	rjmp	.-116    	; 0x299c <strtod+0xd0>
    2a10:	80 2f       	mov	r24, r16
    2a12:	8f 7d       	andi	r24, 0xDF	; 223
    2a14:	85 34       	cpi	r24, 0x45	; 69
    2a16:	a1 f5       	brne	.+104    	; 0x2a80 <strtod+0x1b4>
    2a18:	80 81       	ld	r24, Z
    2a1a:	8d 32       	cpi	r24, 0x2D	; 45
    2a1c:	11 f4       	brne	.+4      	; 0x2a22 <strtod+0x156>
    2a1e:	10 61       	ori	r17, 0x10	; 16
    2a20:	06 c0       	rjmp	.+12     	; 0x2a2e <strtod+0x162>
    2a22:	8b 32       	cpi	r24, 0x2B	; 43
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <strtod+0x162>
    2a26:	31 96       	adiw	r30, 0x01	; 1
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	04 c0       	rjmp	.+8      	; 0x2a36 <strtod+0x16a>
    2a2e:	81 81       	ldd	r24, Z+1	; 0x01
    2a30:	32 96       	adiw	r30, 0x02	; 2
    2a32:	62 e0       	ldi	r22, 0x02	; 2
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	80 53       	subi	r24, 0x30	; 48
    2a38:	8a 30       	cpi	r24, 0x0A	; 10
    2a3a:	18 f0       	brcs	.+6      	; 0x2a42 <strtod+0x176>
    2a3c:	e6 1b       	sub	r30, r22
    2a3e:	f7 0b       	sbc	r31, r23
    2a40:	1f c0       	rjmp	.+62     	; 0x2a80 <strtod+0x1b4>
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	60 38       	cpi	r22, 0x80	; 128
    2a48:	9c e0       	ldi	r25, 0x0C	; 12
    2a4a:	79 07       	cpc	r23, r25
    2a4c:	5c f4       	brge	.+22     	; 0x2a64 <strtod+0x198>
    2a4e:	db 01       	movw	r26, r22
    2a50:	aa 0f       	add	r26, r26
    2a52:	bb 1f       	adc	r27, r27
    2a54:	aa 0f       	add	r26, r26
    2a56:	bb 1f       	adc	r27, r27
    2a58:	6a 0f       	add	r22, r26
    2a5a:	7b 1f       	adc	r23, r27
    2a5c:	66 0f       	add	r22, r22
    2a5e:	77 1f       	adc	r23, r23
    2a60:	68 0f       	add	r22, r24
    2a62:	71 1d       	adc	r23, r1
    2a64:	31 96       	adiw	r30, 0x01	; 1
    2a66:	df 01       	movw	r26, r30
    2a68:	11 97       	sbiw	r26, 0x01	; 1
    2a6a:	8c 91       	ld	r24, X
    2a6c:	80 53       	subi	r24, 0x30	; 48
    2a6e:	8a 30       	cpi	r24, 0x0A	; 10
    2a70:	50 f3       	brcs	.-44     	; 0x2a46 <strtod+0x17a>
    2a72:	14 ff       	sbrs	r17, 4
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <strtod+0x1b0>
    2a76:	71 95       	neg	r23
    2a78:	61 95       	neg	r22
    2a7a:	71 09       	sbc	r23, r1
    2a7c:	c6 0f       	add	r28, r22
    2a7e:	d7 1f       	adc	r29, r23
    2a80:	11 ff       	sbrs	r17, 1
    2a82:	08 c0       	rjmp	.+16     	; 0x2a94 <strtod+0x1c8>
    2a84:	c1 14       	cp	r12, r1
    2a86:	d1 04       	cpc	r13, r1
    2a88:	29 f0       	breq	.+10     	; 0x2a94 <strtod+0x1c8>
    2a8a:	cf 01       	movw	r24, r30
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f6 01       	movw	r30, r12
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
    2a94:	ca 01       	movw	r24, r20
    2a96:	b9 01       	movw	r22, r18
    2a98:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__floatunsisf>
    2a9c:	21 2f       	mov	r18, r17
    2a9e:	23 70       	andi	r18, 0x03	; 3
    2aa0:	23 30       	cpi	r18, 0x03	; 3
    2aa2:	19 f0       	breq	.+6      	; 0x2aaa <strtod+0x1de>
    2aa4:	4b 01       	movw	r8, r22
    2aa6:	5c 01       	movw	r10, r24
    2aa8:	06 c0       	rjmp	.+12     	; 0x2ab6 <strtod+0x1ea>
    2aaa:	4b 01       	movw	r8, r22
    2aac:	5c 01       	movw	r10, r24
    2aae:	b7 fa       	bst	r11, 7
    2ab0:	b0 94       	com	r11
    2ab2:	b7 f8       	bld	r11, 7
    2ab4:	b0 94       	com	r11
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	a9 01       	movw	r20, r18
    2abc:	c5 01       	movw	r24, r10
    2abe:	b4 01       	movw	r22, r8
    2ac0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__cmpsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <strtod+0x1fe>
    2ac8:	3e c0       	rjmp	.+124    	; 0x2b46 <strtod+0x27a>
    2aca:	d7 ff       	sbrs	r29, 7
    2acc:	06 c0       	rjmp	.+12     	; 0x2ada <strtod+0x20e>
    2ace:	d1 95       	neg	r29
    2ad0:	c1 95       	neg	r28
    2ad2:	d1 09       	sbc	r29, r1
    2ad4:	07 e8       	ldi	r16, 0x87	; 135
    2ad6:	10 e0       	ldi	r17, 0x00	; 0
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <strtod+0x212>
    2ada:	0f e9       	ldi	r16, 0x9F	; 159
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	68 01       	movw	r12, r16
    2ae0:	f8 e1       	ldi	r31, 0x18	; 24
    2ae2:	cf 1a       	sub	r12, r31
    2ae4:	d1 08       	sbc	r13, r1
    2ae6:	90 e2       	ldi	r25, 0x20	; 32
    2ae8:	e9 2e       	mov	r14, r25
    2aea:	f1 2c       	mov	r15, r1
    2aec:	ce 15       	cp	r28, r14
    2aee:	df 05       	cpc	r29, r15
    2af0:	74 f0       	brlt	.+28     	; 0x2b0e <strtod+0x242>
    2af2:	f8 01       	movw	r30, r16
    2af4:	25 91       	lpm	r18, Z+
    2af6:	35 91       	lpm	r19, Z+
    2af8:	45 91       	lpm	r20, Z+
    2afa:	54 91       	lpm	r21, Z
    2afc:	c5 01       	movw	r24, r10
    2afe:	b4 01       	movw	r22, r8
    2b00:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__mulsf3>
    2b04:	4b 01       	movw	r8, r22
    2b06:	5c 01       	movw	r10, r24
    2b08:	ce 19       	sub	r28, r14
    2b0a:	df 09       	sbc	r29, r15
    2b0c:	ef cf       	rjmp	.-34     	; 0x2aec <strtod+0x220>
    2b0e:	04 50       	subi	r16, 0x04	; 4
    2b10:	11 09       	sbc	r17, r1
    2b12:	f5 94       	asr	r15
    2b14:	e7 94       	ror	r14
    2b16:	0c 15       	cp	r16, r12
    2b18:	1d 05       	cpc	r17, r13
    2b1a:	41 f7       	brne	.-48     	; 0x2aec <strtod+0x220>
    2b1c:	8a 2d       	mov	r24, r10
    2b1e:	88 0f       	add	r24, r24
    2b20:	8b 2d       	mov	r24, r11
    2b22:	88 1f       	adc	r24, r24
    2b24:	8f 3f       	cpi	r24, 0xFF	; 255
    2b26:	49 f0       	breq	.+18     	; 0x2b3a <strtod+0x26e>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	a9 01       	movw	r20, r18
    2b2e:	c5 01       	movw	r24, r10
    2b30:	b4 01       	movw	r22, r8
    2b32:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__cmpsf2>
    2b36:	81 11       	cpse	r24, r1
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <strtod+0x27a>
    2b3a:	82 e2       	ldi	r24, 0x22	; 34
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	90 93 2d 06 	sts	0x062D, r25	; 0x80062d <errno+0x1>
    2b42:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <errno>
    2b46:	c5 01       	movw	r24, r10
    2b48:	b4 01       	movw	r22, r8
    2b4a:	09 c0       	rjmp	.+18     	; 0x2b5e <strtod+0x292>
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	80 e8       	ldi	r24, 0x80	; 128
    2b52:	9f ef       	ldi	r25, 0xFF	; 255
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <strtod+0x292>
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	80 ec       	ldi	r24, 0xC0	; 192
    2b5c:	9f e7       	ldi	r25, 0x7F	; 127
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	ec e0       	ldi	r30, 0x0C	; 12
    2b64:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__epilogue_restores__+0xc>

00002b68 <isspace>:
    2b68:	91 11       	cpse	r25, r1
    2b6a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__ctype_isfalse>
    2b6e:	80 32       	cpi	r24, 0x20	; 32
    2b70:	19 f0       	breq	.+6      	; 0x2b78 <isspace+0x10>
    2b72:	89 50       	subi	r24, 0x09	; 9
    2b74:	85 50       	subi	r24, 0x05	; 5
    2b76:	c8 f7       	brcc	.-14     	; 0x2b6a <isspace+0x2>
    2b78:	08 95       	ret

00002b7a <strncasecmp_P>:
    2b7a:	fb 01       	movw	r30, r22
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	41 50       	subi	r20, 0x01	; 1
    2b80:	50 40       	sbci	r21, 0x00	; 0
    2b82:	88 f0       	brcs	.+34     	; 0x2ba6 <strncasecmp_P+0x2c>
    2b84:	8d 91       	ld	r24, X+
    2b86:	81 34       	cpi	r24, 0x41	; 65
    2b88:	1c f0       	brlt	.+6      	; 0x2b90 <strncasecmp_P+0x16>
    2b8a:	8b 35       	cpi	r24, 0x5B	; 91
    2b8c:	0c f4       	brge	.+2      	; 0x2b90 <strncasecmp_P+0x16>
    2b8e:	80 5e       	subi	r24, 0xE0	; 224
    2b90:	65 91       	lpm	r22, Z+
    2b92:	61 34       	cpi	r22, 0x41	; 65
    2b94:	1c f0       	brlt	.+6      	; 0x2b9c <strncasecmp_P+0x22>
    2b96:	6b 35       	cpi	r22, 0x5B	; 91
    2b98:	0c f4       	brge	.+2      	; 0x2b9c <strncasecmp_P+0x22>
    2b9a:	60 5e       	subi	r22, 0xE0	; 224
    2b9c:	86 1b       	sub	r24, r22
    2b9e:	61 11       	cpse	r22, r1
    2ba0:	71 f3       	breq	.-36     	; 0x2b7e <strncasecmp_P+0x4>
    2ba2:	99 0b       	sbc	r25, r25
    2ba4:	08 95       	ret
    2ba6:	88 1b       	sub	r24, r24
    2ba8:	fc cf       	rjmp	.-8      	; 0x2ba2 <strncasecmp_P+0x28>

00002baa <strnlen_P>:
    2baa:	fc 01       	movw	r30, r24
    2bac:	05 90       	lpm	r0, Z+
    2bae:	61 50       	subi	r22, 0x01	; 1
    2bb0:	70 40       	sbci	r23, 0x00	; 0
    2bb2:	01 10       	cpse	r0, r1
    2bb4:	d8 f7       	brcc	.-10     	; 0x2bac <strnlen_P+0x2>
    2bb6:	80 95       	com	r24
    2bb8:	90 95       	com	r25
    2bba:	8e 0f       	add	r24, r30
    2bbc:	9f 1f       	adc	r25, r31
    2bbe:	08 95       	ret

00002bc0 <strnlen>:
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	61 50       	subi	r22, 0x01	; 1
    2bc4:	70 40       	sbci	r23, 0x00	; 0
    2bc6:	01 90       	ld	r0, Z+
    2bc8:	01 10       	cpse	r0, r1
    2bca:	d8 f7       	brcc	.-10     	; 0x2bc2 <strnlen+0x2>
    2bcc:	80 95       	com	r24
    2bce:	90 95       	com	r25
    2bd0:	8e 0f       	add	r24, r30
    2bd2:	9f 1f       	adc	r25, r31
    2bd4:	08 95       	ret

00002bd6 <fputc>:
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	fb 01       	movw	r30, r22
    2be0:	23 81       	ldd	r18, Z+3	; 0x03
    2be2:	21 fd       	sbrc	r18, 1
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <fputc+0x16>
    2be6:	8f ef       	ldi	r24, 0xFF	; 255
    2be8:	9f ef       	ldi	r25, 0xFF	; 255
    2bea:	2c c0       	rjmp	.+88     	; 0x2c44 <fputc+0x6e>
    2bec:	22 ff       	sbrs	r18, 2
    2bee:	16 c0       	rjmp	.+44     	; 0x2c1c <fputc+0x46>
    2bf0:	46 81       	ldd	r20, Z+6	; 0x06
    2bf2:	57 81       	ldd	r21, Z+7	; 0x07
    2bf4:	24 81       	ldd	r18, Z+4	; 0x04
    2bf6:	35 81       	ldd	r19, Z+5	; 0x05
    2bf8:	42 17       	cp	r20, r18
    2bfa:	53 07       	cpc	r21, r19
    2bfc:	44 f4       	brge	.+16     	; 0x2c0e <fputc+0x38>
    2bfe:	a0 81       	ld	r26, Z
    2c00:	b1 81       	ldd	r27, Z+1	; 0x01
    2c02:	9d 01       	movw	r18, r26
    2c04:	2f 5f       	subi	r18, 0xFF	; 255
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	31 83       	std	Z+1, r19	; 0x01
    2c0a:	20 83       	st	Z, r18
    2c0c:	8c 93       	st	X, r24
    2c0e:	26 81       	ldd	r18, Z+6	; 0x06
    2c10:	37 81       	ldd	r19, Z+7	; 0x07
    2c12:	2f 5f       	subi	r18, 0xFF	; 255
    2c14:	3f 4f       	sbci	r19, 0xFF	; 255
    2c16:	37 83       	std	Z+7, r19	; 0x07
    2c18:	26 83       	std	Z+6, r18	; 0x06
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <fputc+0x6e>
    2c1c:	8b 01       	movw	r16, r22
    2c1e:	ec 01       	movw	r28, r24
    2c20:	fb 01       	movw	r30, r22
    2c22:	00 84       	ldd	r0, Z+8	; 0x08
    2c24:	f1 85       	ldd	r31, Z+9	; 0x09
    2c26:	e0 2d       	mov	r30, r0
    2c28:	09 95       	icall
    2c2a:	89 2b       	or	r24, r25
    2c2c:	e1 f6       	brne	.-72     	; 0x2be6 <fputc+0x10>
    2c2e:	d8 01       	movw	r26, r16
    2c30:	16 96       	adiw	r26, 0x06	; 6
    2c32:	8d 91       	ld	r24, X+
    2c34:	9c 91       	ld	r25, X
    2c36:	17 97       	sbiw	r26, 0x07	; 7
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	17 96       	adiw	r26, 0x07	; 7
    2c3c:	9c 93       	st	X, r25
    2c3e:	8e 93       	st	-X, r24
    2c40:	16 97       	sbiw	r26, 0x06	; 6
    2c42:	ce 01       	movw	r24, r28
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <__ultoa_invert>:
    2c4e:	fa 01       	movw	r30, r20
    2c50:	aa 27       	eor	r26, r26
    2c52:	28 30       	cpi	r18, 0x08	; 8
    2c54:	51 f1       	breq	.+84     	; 0x2caa <__ultoa_invert+0x5c>
    2c56:	20 31       	cpi	r18, 0x10	; 16
    2c58:	81 f1       	breq	.+96     	; 0x2cba <__ultoa_invert+0x6c>
    2c5a:	e8 94       	clt
    2c5c:	6f 93       	push	r22
    2c5e:	6e 7f       	andi	r22, 0xFE	; 254
    2c60:	6e 5f       	subi	r22, 0xFE	; 254
    2c62:	7f 4f       	sbci	r23, 0xFF	; 255
    2c64:	8f 4f       	sbci	r24, 0xFF	; 255
    2c66:	9f 4f       	sbci	r25, 0xFF	; 255
    2c68:	af 4f       	sbci	r26, 0xFF	; 255
    2c6a:	b1 e0       	ldi	r27, 0x01	; 1
    2c6c:	3e d0       	rcall	.+124    	; 0x2cea <__ultoa_invert+0x9c>
    2c6e:	b4 e0       	ldi	r27, 0x04	; 4
    2c70:	3c d0       	rcall	.+120    	; 0x2cea <__ultoa_invert+0x9c>
    2c72:	67 0f       	add	r22, r23
    2c74:	78 1f       	adc	r23, r24
    2c76:	89 1f       	adc	r24, r25
    2c78:	9a 1f       	adc	r25, r26
    2c7a:	a1 1d       	adc	r26, r1
    2c7c:	68 0f       	add	r22, r24
    2c7e:	79 1f       	adc	r23, r25
    2c80:	8a 1f       	adc	r24, r26
    2c82:	91 1d       	adc	r25, r1
    2c84:	a1 1d       	adc	r26, r1
    2c86:	6a 0f       	add	r22, r26
    2c88:	71 1d       	adc	r23, r1
    2c8a:	81 1d       	adc	r24, r1
    2c8c:	91 1d       	adc	r25, r1
    2c8e:	a1 1d       	adc	r26, r1
    2c90:	20 d0       	rcall	.+64     	; 0x2cd2 <__ultoa_invert+0x84>
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <__ultoa_invert+0x48>
    2c94:	68 94       	set
    2c96:	3f 91       	pop	r19
    2c98:	2a e0       	ldi	r18, 0x0A	; 10
    2c9a:	26 9f       	mul	r18, r22
    2c9c:	11 24       	eor	r1, r1
    2c9e:	30 19       	sub	r19, r0
    2ca0:	30 5d       	subi	r19, 0xD0	; 208
    2ca2:	31 93       	st	Z+, r19
    2ca4:	de f6       	brtc	.-74     	; 0x2c5c <__ultoa_invert+0xe>
    2ca6:	cf 01       	movw	r24, r30
    2ca8:	08 95       	ret
    2caa:	46 2f       	mov	r20, r22
    2cac:	47 70       	andi	r20, 0x07	; 7
    2cae:	40 5d       	subi	r20, 0xD0	; 208
    2cb0:	41 93       	st	Z+, r20
    2cb2:	b3 e0       	ldi	r27, 0x03	; 3
    2cb4:	0f d0       	rcall	.+30     	; 0x2cd4 <__ultoa_invert+0x86>
    2cb6:	c9 f7       	brne	.-14     	; 0x2caa <__ultoa_invert+0x5c>
    2cb8:	f6 cf       	rjmp	.-20     	; 0x2ca6 <__ultoa_invert+0x58>
    2cba:	46 2f       	mov	r20, r22
    2cbc:	4f 70       	andi	r20, 0x0F	; 15
    2cbe:	40 5d       	subi	r20, 0xD0	; 208
    2cc0:	4a 33       	cpi	r20, 0x3A	; 58
    2cc2:	18 f0       	brcs	.+6      	; 0x2cca <__ultoa_invert+0x7c>
    2cc4:	49 5d       	subi	r20, 0xD9	; 217
    2cc6:	31 fd       	sbrc	r19, 1
    2cc8:	40 52       	subi	r20, 0x20	; 32
    2cca:	41 93       	st	Z+, r20
    2ccc:	02 d0       	rcall	.+4      	; 0x2cd2 <__ultoa_invert+0x84>
    2cce:	a9 f7       	brne	.-22     	; 0x2cba <__ultoa_invert+0x6c>
    2cd0:	ea cf       	rjmp	.-44     	; 0x2ca6 <__ultoa_invert+0x58>
    2cd2:	b4 e0       	ldi	r27, 0x04	; 4
    2cd4:	a6 95       	lsr	r26
    2cd6:	97 95       	ror	r25
    2cd8:	87 95       	ror	r24
    2cda:	77 95       	ror	r23
    2cdc:	67 95       	ror	r22
    2cde:	ba 95       	dec	r27
    2ce0:	c9 f7       	brne	.-14     	; 0x2cd4 <__ultoa_invert+0x86>
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	61 05       	cpc	r22, r1
    2ce6:	71 05       	cpc	r23, r1
    2ce8:	08 95       	ret
    2cea:	9b 01       	movw	r18, r22
    2cec:	ac 01       	movw	r20, r24
    2cee:	0a 2e       	mov	r0, r26
    2cf0:	06 94       	lsr	r0
    2cf2:	57 95       	ror	r21
    2cf4:	47 95       	ror	r20
    2cf6:	37 95       	ror	r19
    2cf8:	27 95       	ror	r18
    2cfa:	ba 95       	dec	r27
    2cfc:	c9 f7       	brne	.-14     	; 0x2cf0 <__ultoa_invert+0xa2>
    2cfe:	62 0f       	add	r22, r18
    2d00:	73 1f       	adc	r23, r19
    2d02:	84 1f       	adc	r24, r20
    2d04:	95 1f       	adc	r25, r21
    2d06:	a0 1d       	adc	r26, r0
    2d08:	08 95       	ret

00002d0a <__cmpsf2>:
    2d0a:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__fp_cmp>
    2d0e:	08 f4       	brcc	.+2      	; 0x2d12 <__cmpsf2+0x8>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	08 95       	ret

00002d14 <__floatunsisf>:
    2d14:	e8 94       	clt
    2d16:	09 c0       	rjmp	.+18     	; 0x2d2a <__floatsisf+0x12>

00002d18 <__floatsisf>:
    2d18:	97 fb       	bst	r25, 7
    2d1a:	3e f4       	brtc	.+14     	; 0x2d2a <__floatsisf+0x12>
    2d1c:	90 95       	com	r25
    2d1e:	80 95       	com	r24
    2d20:	70 95       	com	r23
    2d22:	61 95       	neg	r22
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255
    2d26:	8f 4f       	sbci	r24, 0xFF	; 255
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	99 23       	and	r25, r25
    2d2c:	a9 f0       	breq	.+42     	; 0x2d58 <__floatsisf+0x40>
    2d2e:	f9 2f       	mov	r31, r25
    2d30:	96 e9       	ldi	r25, 0x96	; 150
    2d32:	bb 27       	eor	r27, r27
    2d34:	93 95       	inc	r25
    2d36:	f6 95       	lsr	r31
    2d38:	87 95       	ror	r24
    2d3a:	77 95       	ror	r23
    2d3c:	67 95       	ror	r22
    2d3e:	b7 95       	ror	r27
    2d40:	f1 11       	cpse	r31, r1
    2d42:	f8 cf       	rjmp	.-16     	; 0x2d34 <__floatsisf+0x1c>
    2d44:	fa f4       	brpl	.+62     	; 0x2d84 <__floatsisf+0x6c>
    2d46:	bb 0f       	add	r27, r27
    2d48:	11 f4       	brne	.+4      	; 0x2d4e <__floatsisf+0x36>
    2d4a:	60 ff       	sbrs	r22, 0
    2d4c:	1b c0       	rjmp	.+54     	; 0x2d84 <__floatsisf+0x6c>
    2d4e:	6f 5f       	subi	r22, 0xFF	; 255
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255
    2d52:	8f 4f       	sbci	r24, 0xFF	; 255
    2d54:	9f 4f       	sbci	r25, 0xFF	; 255
    2d56:	16 c0       	rjmp	.+44     	; 0x2d84 <__floatsisf+0x6c>
    2d58:	88 23       	and	r24, r24
    2d5a:	11 f0       	breq	.+4      	; 0x2d60 <__floatsisf+0x48>
    2d5c:	96 e9       	ldi	r25, 0x96	; 150
    2d5e:	11 c0       	rjmp	.+34     	; 0x2d82 <__floatsisf+0x6a>
    2d60:	77 23       	and	r23, r23
    2d62:	21 f0       	breq	.+8      	; 0x2d6c <__floatsisf+0x54>
    2d64:	9e e8       	ldi	r25, 0x8E	; 142
    2d66:	87 2f       	mov	r24, r23
    2d68:	76 2f       	mov	r23, r22
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <__floatsisf+0x5e>
    2d6c:	66 23       	and	r22, r22
    2d6e:	71 f0       	breq	.+28     	; 0x2d8c <__floatsisf+0x74>
    2d70:	96 e8       	ldi	r25, 0x86	; 134
    2d72:	86 2f       	mov	r24, r22
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	2a f0       	brmi	.+10     	; 0x2d84 <__floatsisf+0x6c>
    2d7a:	9a 95       	dec	r25
    2d7c:	66 0f       	add	r22, r22
    2d7e:	77 1f       	adc	r23, r23
    2d80:	88 1f       	adc	r24, r24
    2d82:	da f7       	brpl	.-10     	; 0x2d7a <__floatsisf+0x62>
    2d84:	88 0f       	add	r24, r24
    2d86:	96 95       	lsr	r25
    2d88:	87 95       	ror	r24
    2d8a:	97 f9       	bld	r25, 7
    2d8c:	08 95       	ret

00002d8e <__fp_cmp>:
    2d8e:	99 0f       	add	r25, r25
    2d90:	00 08       	sbc	r0, r0
    2d92:	55 0f       	add	r21, r21
    2d94:	aa 0b       	sbc	r26, r26
    2d96:	e0 e8       	ldi	r30, 0x80	; 128
    2d98:	fe ef       	ldi	r31, 0xFE	; 254
    2d9a:	16 16       	cp	r1, r22
    2d9c:	17 06       	cpc	r1, r23
    2d9e:	e8 07       	cpc	r30, r24
    2da0:	f9 07       	cpc	r31, r25
    2da2:	c0 f0       	brcs	.+48     	; 0x2dd4 <__fp_cmp+0x46>
    2da4:	12 16       	cp	r1, r18
    2da6:	13 06       	cpc	r1, r19
    2da8:	e4 07       	cpc	r30, r20
    2daa:	f5 07       	cpc	r31, r21
    2dac:	98 f0       	brcs	.+38     	; 0x2dd4 <__fp_cmp+0x46>
    2dae:	62 1b       	sub	r22, r18
    2db0:	73 0b       	sbc	r23, r19
    2db2:	84 0b       	sbc	r24, r20
    2db4:	95 0b       	sbc	r25, r21
    2db6:	39 f4       	brne	.+14     	; 0x2dc6 <__fp_cmp+0x38>
    2db8:	0a 26       	eor	r0, r26
    2dba:	61 f0       	breq	.+24     	; 0x2dd4 <__fp_cmp+0x46>
    2dbc:	23 2b       	or	r18, r19
    2dbe:	24 2b       	or	r18, r20
    2dc0:	25 2b       	or	r18, r21
    2dc2:	21 f4       	brne	.+8      	; 0x2dcc <__fp_cmp+0x3e>
    2dc4:	08 95       	ret
    2dc6:	0a 26       	eor	r0, r26
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <__fp_cmp+0x3e>
    2dca:	a1 40       	sbci	r26, 0x01	; 1
    2dcc:	a6 95       	lsr	r26
    2dce:	8f ef       	ldi	r24, 0xFF	; 255
    2dd0:	81 1d       	adc	r24, r1
    2dd2:	81 1d       	adc	r24, r1
    2dd4:	08 95       	ret

00002dd6 <__mulsf3>:
    2dd6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__mulsf3x>
    2dda:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__fp_round>
    2dde:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <__fp_pscA>
    2de2:	38 f0       	brcs	.+14     	; 0x2df2 <__mulsf3+0x1c>
    2de4:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__fp_pscB>
    2de8:	20 f0       	brcs	.+8      	; 0x2df2 <__mulsf3+0x1c>
    2dea:	95 23       	and	r25, r21
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <__mulsf3+0x1c>
    2dee:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_inf>
    2df2:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__fp_nan>
    2df6:	11 24       	eor	r1, r1
    2df8:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__fp_szero>

00002dfc <__mulsf3x>:
    2dfc:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__fp_split3>
    2e00:	70 f3       	brcs	.-36     	; 0x2dde <__mulsf3+0x8>

00002e02 <__mulsf3_pse>:
    2e02:	95 9f       	mul	r25, r21
    2e04:	c1 f3       	breq	.-16     	; 0x2df6 <__mulsf3+0x20>
    2e06:	95 0f       	add	r25, r21
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	55 1f       	adc	r21, r21
    2e0c:	62 9f       	mul	r22, r18
    2e0e:	f0 01       	movw	r30, r0
    2e10:	72 9f       	mul	r23, r18
    2e12:	bb 27       	eor	r27, r27
    2e14:	f0 0d       	add	r31, r0
    2e16:	b1 1d       	adc	r27, r1
    2e18:	63 9f       	mul	r22, r19
    2e1a:	aa 27       	eor	r26, r26
    2e1c:	f0 0d       	add	r31, r0
    2e1e:	b1 1d       	adc	r27, r1
    2e20:	aa 1f       	adc	r26, r26
    2e22:	64 9f       	mul	r22, r20
    2e24:	66 27       	eor	r22, r22
    2e26:	b0 0d       	add	r27, r0
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	66 1f       	adc	r22, r22
    2e2c:	82 9f       	mul	r24, r18
    2e2e:	22 27       	eor	r18, r18
    2e30:	b0 0d       	add	r27, r0
    2e32:	a1 1d       	adc	r26, r1
    2e34:	62 1f       	adc	r22, r18
    2e36:	73 9f       	mul	r23, r19
    2e38:	b0 0d       	add	r27, r0
    2e3a:	a1 1d       	adc	r26, r1
    2e3c:	62 1f       	adc	r22, r18
    2e3e:	83 9f       	mul	r24, r19
    2e40:	a0 0d       	add	r26, r0
    2e42:	61 1d       	adc	r22, r1
    2e44:	22 1f       	adc	r18, r18
    2e46:	74 9f       	mul	r23, r20
    2e48:	33 27       	eor	r19, r19
    2e4a:	a0 0d       	add	r26, r0
    2e4c:	61 1d       	adc	r22, r1
    2e4e:	23 1f       	adc	r18, r19
    2e50:	84 9f       	mul	r24, r20
    2e52:	60 0d       	add	r22, r0
    2e54:	21 1d       	adc	r18, r1
    2e56:	82 2f       	mov	r24, r18
    2e58:	76 2f       	mov	r23, r22
    2e5a:	6a 2f       	mov	r22, r26
    2e5c:	11 24       	eor	r1, r1
    2e5e:	9f 57       	subi	r25, 0x7F	; 127
    2e60:	50 40       	sbci	r21, 0x00	; 0
    2e62:	9a f0       	brmi	.+38     	; 0x2e8a <__mulsf3_pse+0x88>
    2e64:	f1 f0       	breq	.+60     	; 0x2ea2 <__mulsf3_pse+0xa0>
    2e66:	88 23       	and	r24, r24
    2e68:	4a f0       	brmi	.+18     	; 0x2e7c <__mulsf3_pse+0x7a>
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	bb 1f       	adc	r27, r27
    2e70:	66 1f       	adc	r22, r22
    2e72:	77 1f       	adc	r23, r23
    2e74:	88 1f       	adc	r24, r24
    2e76:	91 50       	subi	r25, 0x01	; 1
    2e78:	50 40       	sbci	r21, 0x00	; 0
    2e7a:	a9 f7       	brne	.-22     	; 0x2e66 <__mulsf3_pse+0x64>
    2e7c:	9e 3f       	cpi	r25, 0xFE	; 254
    2e7e:	51 05       	cpc	r21, r1
    2e80:	80 f0       	brcs	.+32     	; 0x2ea2 <__mulsf3_pse+0xa0>
    2e82:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_inf>
    2e86:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__fp_szero>
    2e8a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e8c:	e4 f3       	brlt	.-8      	; 0x2e86 <__mulsf3_pse+0x84>
    2e8e:	98 3e       	cpi	r25, 0xE8	; 232
    2e90:	d4 f3       	brlt	.-12     	; 0x2e86 <__mulsf3_pse+0x84>
    2e92:	86 95       	lsr	r24
    2e94:	77 95       	ror	r23
    2e96:	67 95       	ror	r22
    2e98:	b7 95       	ror	r27
    2e9a:	f7 95       	ror	r31
    2e9c:	e7 95       	ror	r30
    2e9e:	9f 5f       	subi	r25, 0xFF	; 255
    2ea0:	c1 f7       	brne	.-16     	; 0x2e92 <__mulsf3_pse+0x90>
    2ea2:	fe 2b       	or	r31, r30
    2ea4:	88 0f       	add	r24, r24
    2ea6:	91 1d       	adc	r25, r1
    2ea8:	96 95       	lsr	r25
    2eaa:	87 95       	ror	r24
    2eac:	97 f9       	bld	r25, 7
    2eae:	08 95       	ret

00002eb0 <__ctype_isfalse>:
    2eb0:	99 27       	eor	r25, r25
    2eb2:	88 27       	eor	r24, r24

00002eb4 <__ctype_istrue>:
    2eb4:	08 95       	ret

00002eb6 <__fp_inf>:
    2eb6:	97 f9       	bld	r25, 7
    2eb8:	9f 67       	ori	r25, 0x7F	; 127
    2eba:	80 e8       	ldi	r24, 0x80	; 128
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	08 95       	ret

00002ec2 <__fp_nan>:
    2ec2:	9f ef       	ldi	r25, 0xFF	; 255
    2ec4:	80 ec       	ldi	r24, 0xC0	; 192
    2ec6:	08 95       	ret

00002ec8 <__fp_pscA>:
    2ec8:	00 24       	eor	r0, r0
    2eca:	0a 94       	dec	r0
    2ecc:	16 16       	cp	r1, r22
    2ece:	17 06       	cpc	r1, r23
    2ed0:	18 06       	cpc	r1, r24
    2ed2:	09 06       	cpc	r0, r25
    2ed4:	08 95       	ret

00002ed6 <__fp_pscB>:
    2ed6:	00 24       	eor	r0, r0
    2ed8:	0a 94       	dec	r0
    2eda:	12 16       	cp	r1, r18
    2edc:	13 06       	cpc	r1, r19
    2ede:	14 06       	cpc	r1, r20
    2ee0:	05 06       	cpc	r0, r21
    2ee2:	08 95       	ret

00002ee4 <__fp_round>:
    2ee4:	09 2e       	mov	r0, r25
    2ee6:	03 94       	inc	r0
    2ee8:	00 0c       	add	r0, r0
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <__fp_round+0xc>
    2eec:	88 23       	and	r24, r24
    2eee:	52 f0       	brmi	.+20     	; 0x2f04 <__fp_round+0x20>
    2ef0:	bb 0f       	add	r27, r27
    2ef2:	40 f4       	brcc	.+16     	; 0x2f04 <__fp_round+0x20>
    2ef4:	bf 2b       	or	r27, r31
    2ef6:	11 f4       	brne	.+4      	; 0x2efc <__fp_round+0x18>
    2ef8:	60 ff       	sbrs	r22, 0
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <__fp_round+0x20>
    2efc:	6f 5f       	subi	r22, 0xFF	; 255
    2efe:	7f 4f       	sbci	r23, 0xFF	; 255
    2f00:	8f 4f       	sbci	r24, 0xFF	; 255
    2f02:	9f 4f       	sbci	r25, 0xFF	; 255
    2f04:	08 95       	ret

00002f06 <__fp_split3>:
    2f06:	57 fd       	sbrc	r21, 7
    2f08:	90 58       	subi	r25, 0x80	; 128
    2f0a:	44 0f       	add	r20, r20
    2f0c:	55 1f       	adc	r21, r21
    2f0e:	59 f0       	breq	.+22     	; 0x2f26 <__fp_splitA+0x10>
    2f10:	5f 3f       	cpi	r21, 0xFF	; 255
    2f12:	71 f0       	breq	.+28     	; 0x2f30 <__fp_splitA+0x1a>
    2f14:	47 95       	ror	r20

00002f16 <__fp_splitA>:
    2f16:	88 0f       	add	r24, r24
    2f18:	97 fb       	bst	r25, 7
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	61 f0       	breq	.+24     	; 0x2f36 <__fp_splitA+0x20>
    2f1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2f20:	79 f0       	breq	.+30     	; 0x2f40 <__fp_splitA+0x2a>
    2f22:	87 95       	ror	r24
    2f24:	08 95       	ret
    2f26:	12 16       	cp	r1, r18
    2f28:	13 06       	cpc	r1, r19
    2f2a:	14 06       	cpc	r1, r20
    2f2c:	55 1f       	adc	r21, r21
    2f2e:	f2 cf       	rjmp	.-28     	; 0x2f14 <__fp_split3+0xe>
    2f30:	46 95       	lsr	r20
    2f32:	f1 df       	rcall	.-30     	; 0x2f16 <__fp_splitA>
    2f34:	08 c0       	rjmp	.+16     	; 0x2f46 <__fp_splitA+0x30>
    2f36:	16 16       	cp	r1, r22
    2f38:	17 06       	cpc	r1, r23
    2f3a:	18 06       	cpc	r1, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	f1 cf       	rjmp	.-30     	; 0x2f22 <__fp_splitA+0xc>
    2f40:	86 95       	lsr	r24
    2f42:	71 05       	cpc	r23, r1
    2f44:	61 05       	cpc	r22, r1
    2f46:	08 94       	sec
    2f48:	08 95       	ret

00002f4a <__fp_zero>:
    2f4a:	e8 94       	clt

00002f4c <__fp_szero>:
    2f4c:	bb 27       	eor	r27, r27
    2f4e:	66 27       	eor	r22, r22
    2f50:	77 27       	eor	r23, r23
    2f52:	cb 01       	movw	r24, r22
    2f54:	97 f9       	bld	r25, 7
    2f56:	08 95       	ret

00002f58 <__prologue_saves__>:
    2f58:	2f 92       	push	r2
    2f5a:	3f 92       	push	r3
    2f5c:	4f 92       	push	r4
    2f5e:	5f 92       	push	r5
    2f60:	6f 92       	push	r6
    2f62:	7f 92       	push	r7
    2f64:	8f 92       	push	r8
    2f66:	9f 92       	push	r9
    2f68:	af 92       	push	r10
    2f6a:	bf 92       	push	r11
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	ca 1b       	sub	r28, r26
    2f82:	db 0b       	sbc	r29, r27
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	09 94       	ijmp

00002f90 <__epilogue_restores__>:
    2f90:	2a 88       	ldd	r2, Y+18	; 0x12
    2f92:	39 88       	ldd	r3, Y+17	; 0x11
    2f94:	48 88       	ldd	r4, Y+16	; 0x10
    2f96:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f98:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa2:	b9 84       	ldd	r11, Y+9	; 0x09
    2fa4:	c8 84       	ldd	r12, Y+8	; 0x08
    2fa6:	df 80       	ldd	r13, Y+7	; 0x07
    2fa8:	ee 80       	ldd	r14, Y+6	; 0x06
    2faa:	fd 80       	ldd	r15, Y+5	; 0x05
    2fac:	0c 81       	ldd	r16, Y+4	; 0x04
    2fae:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fb4:	ce 0f       	add	r28, r30
    2fb6:	d1 1d       	adc	r29, r1
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	ed 01       	movw	r28, r26
    2fc4:	08 95       	ret

00002fc6 <_exit>:
    2fc6:	f8 94       	cli

00002fc8 <__stop_program>:
    2fc8:	ff cf       	rjmp	.-2      	; 0x2fc8 <__stop_program>
