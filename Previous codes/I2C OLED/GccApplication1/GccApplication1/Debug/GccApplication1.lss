
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00002076  0000210a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  00800188  00800188  00002192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002c80  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005b214  00000000  00000000  00004e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024da  00000000  00000000  00060098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000fdbc  00000000  00000000  00062572  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000118f8  00000000  00000000  00072330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00015078  00000000  00000000  00083c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0006df63  00000000  00000000  00098ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002b48  00000000  00000000  00106c03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__ctors_end>
       4:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
       8:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
       c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      10:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      14:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      18:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      1c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      20:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      24:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      28:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      2c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      30:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      34:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      38:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      3c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      40:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      44:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      48:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      4c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      50:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      54:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      58:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      5c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      60:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>
      64:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 00       	.word	0x00bf	; ????
      6a:	03 03       	mulsu	r16, r19
      6c:	03 04       	cpc	r0, r3
      6e:	03 05       	cpc	r16, r3
      70:	04 07       	cpc	r16, r20
      72:	0d 00       	.word	0x000d	; ????
      74:	fe 09       	sbc	r31, r14
      76:	fe 0b       	sbc	r31, r30
      78:	ff 01       	movw	r30, r30
      7a:	7f 02       	muls	r23, r31
      7c:	fb 09       	sbc	r31, r11
      7e:	53 20       	and	r5, r3
      80:	05 00       	.word	0x0005	; ????
      82:	ee 07       	cpc	r30, r30
      84:	21 07       	cpc	r18, r17
      86:	d2 c3       	rjmp	.+1956   	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
      88:	c7 13       	cpse	r28, r23
      8a:	01 22       	and	r0, r17
      8c:	08 9d       	mul	r16, r8
      8e:	de 87       	std	Y+14, r29	; 0x0e
      90:	84 45       	sbci	r24, 0x54	; 84
      92:	00 23       	and	r16, r16
      94:	0f ce       	rjmp	.-994    	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
      96:	c2 4f       	sbci	r28, 0xF2	; 242
      98:	28 cb       	rjmp	.-2480   	; 0xfffff6ea <__eeprom_end+0xff7ef6ea>
      9a:	a1 12       	cpse	r10, r17
      9c:	8a 1c       	adc	r8, r10
      9e:	2a a1       	ldd	r18, Y+34	; 0x22
      a0:	2c 00       	.word	0x002c	; ????
      a2:	24 12       	cpse	r2, r20
      a4:	e6 ba       	out	0x16, r14	; 22
      a6:	5f 34       	cpi	r21, 0x4F	; 79
      a8:	76 89       	ldd	r23, Z+22	; 0x16
      aa:	4c 62       	ori	r20, 0x2C	; 44
      ac:	c3 59       	subi	r28, 0x93	; 147
      ae:	64 12       	cpse	r6, r20
      b0:	b9 45       	sbci	r27, 0x59	; 89
      b2:	63 00       	.word	0x0063	; ????
      b4:	25 10       	cpse	r2, r5
      b6:	ce c2       	rjmp	.+1436   	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
      b8:	4f 8c       	ldd	r4, Y+31	; 0x1f
      ba:	32 49       	sbci	r19, 0x92	; 146
      bc:	a1 49       	sbci	r26, 0x91	; 145
      be:	62 94       	swap	r6
      c0:	94 09       	sbc	r25, r4
      c2:	2d 02       	muls	r18, r29
      c4:	26 10       	cpse	r2, r6
      c6:	ce c2       	rjmp	.+1436   	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
      c8:	97 4c       	sbci	r25, 0xC7	; 199
      ca:	12 92       	st	-Z, r1
      cc:	c4 64       	ori	r28, 0x44	; 68
      ce:	93 49       	sbci	r25, 0x93	; 147
      d0:	64 a2       	std	Z+36, r6	; 0x24
      d2:	49 22       	and	r4, r25
      d4:	27 08       	sbc	r2, r7
      d6:	23 db       	rcall	.-2490   	; 0xfffff71e <__eeprom_end+0xff7ef71e>
      d8:	8f 84       	ldd	r8, Y+15	; 0x0f
      da:	12 02       	muls	r17, r18
      dc:	28 0c       	add	r2, r8
      de:	64 bf       	out	0x34, r22	; 52
      e0:	97 44       	sbci	r25, 0x47	; 71
      e2:	24 11       	cpse	r18, r4
      e4:	e9 4d       	sbci	r30, 0xD9	; 217
      e6:	24 13       	cpse	r18, r20
      e8:	29 0d       	add	r18, r9
      ea:	64 bf       	out	0x34, r22	; 52
      ec:	87 4c       	sbci	r24, 0xC7	; 199
      ee:	24 13       	cpse	r18, r20
      f0:	e9 45       	sbci	r30, 0x59	; 89
      f2:	24 11       	cpse	r18, r4
      f4:	01 2a       	or	r0, r17
      f6:	0e be       	out	0x3e, r0	; 62
      f8:	c6 5f       	subi	r28, 0xF6	; 246
      fa:	48 92       	.word	0x9248	; ????
      fc:	52 12       	cpse	r5, r18
      fe:	55 52       	subi	r21, 0x25	; 37
     100:	44 31       	cpi	r20, 0x14	; 20
     102:	00 2b       	or	r16, r16
     104:	0b b6       	in	r0, 0x3b	; 59
     106:	c6 97       	sbiw	r24, 0x36	; 54
     108:	50 74       	andi	r21, 0x40	; 64
     10a:	28 09       	sbc	r18, r8
     10c:	45 00       	.word	0x0045	; ????
     10e:	2c 08       	sbc	r2, r12
     110:	23 bb       	out	0x13, r18	; 19
     112:	8f 84       	ldd	r8, Y+15	; 0x0f
     114:	12 02       	muls	r17, r18
     116:	2d 07       	cpc	r18, r29
     118:	96 ce       	rjmp	.-724    	; 0xfffffe46 <__eeprom_end+0xff7efe46>
     11a:	c7 a1       	ldd	r28, Z+39	; 0x27
     11c:	00 2e       	mov	r0, r16
     11e:	06 92       	lac	Z, r0
     120:	c3 07       	cpc	r28, r19
     122:	01 2f       	mov	r16, r17
     124:	0e e6       	ldi	r16, 0x6E	; 110
     126:	be a7       	std	Y+46, r27	; 0x2e
     128:	9a 50       	subi	r25, 0x0A	; 10
     12a:	4d 28       	or	r4, r13
     12c:	13 aa       	std	Z+51, r1	; 0x33
     12e:	09 85       	ldd	r16, Y+9	; 0x09
     130:	00 30       	cpi	r16, 0x00	; 0
     132:	0c ce       	rjmp	.-1000   	; 0xfffffd4c <__eeprom_end+0xff7efd4c>
     134:	c2 97       	sbiw	r24, 0x32	; 50
     136:	8c 22       	and	r8, r28
     138:	e2 49       	sbci	r30, 0x92	; 146
     13a:	42 13       	cpse	r20, r18
     13c:	01 31       	cpi	r16, 0x11	; 17
     13e:	0a 4c       	sbci	r16, 0xCA	; 202
     140:	c3 97       	sbiw	r24, 0x33	; 51
     142:	e4 10       	cpse	r14, r4
     144:	11 e9       	ldi	r17, 0x91	; 145
     146:	01 32       	cpi	r16, 0x21	; 33
     148:	0d ce       	rjmp	.-998    	; 0xfffffd64 <__eeprom_end+0xff7efd64>
     14a:	c2 0f       	add	r28, r18
     14c:	45 44       	sbci	r20, 0x45	; 69
     14e:	12 ca       	rjmp	.-3036   	; 0xfffff574 <__eeprom_end+0xff7ef574>
     150:	d4 62       	ori	r29, 0x24	; 36
     152:	07 03       	mulsu	r16, r23
     154:	33 0e       	add	r3, r19
     156:	ce c2       	rjmp	.+1436   	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
     158:	0f 45       	sbci	r16, 0x5F	; 95
     15a:	44 12       	cpse	r4, r20
     15c:	8a a6       	std	Y+42, r8	; 0x2a
     15e:	24 92       	xch	Z, r2
     160:	84 02       	muls	r24, r20
     162:	34 0f       	add	r19, r20
     164:	ce c2       	rjmp	.+1436   	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
     166:	9f 6c       	ori	r25, 0xCF	; 207
     168:	29 22       	and	r2, r25
     16a:	8a 48       	sbci	r24, 0x8A	; 138
     16c:	42 12       	cpse	r4, r18
     16e:	9b 50       	subi	r25, 0x0B	; 11
     170:	02 35       	cpi	r16, 0x52	; 82
     172:	0e ce       	rjmp	.-996    	; 0xfffffd90 <__eeprom_end+0xff7efd90>
     174:	c2 0f       	add	r28, r18
     176:	89 14       	cp	r8, r9
     178:	25 85       	ldd	r18, Z+13	; 0x0d
     17a:	84 24       	eor	r8, r4
     17c:	92 84       	ldd	r9, Z+10	; 0x0a
     17e:	02 36       	cpi	r16, 0x62	; 98
     180:	0e ce       	rjmp	.-996    	; 0xfffffd9e <__eeprom_end+0xff7efd9e>
     182:	c2 d7       	rcall	.+3972   	; 0x1108 <u8g2_font_get_glyph_data+0xd6>
     184:	48 26       	eor	r4, r24
     186:	14 56       	subi	r17, 0x64	; 100
     188:	44 4c       	sbci	r20, 0xC4	; 196
     18a:	12 0a       	sbc	r1, r18
     18c:	00 37       	cpi	r16, 0x70	; 112
     18e:	0d ce       	rjmp	.-998    	; 0xfffffdaa <__eeprom_end+0xff7efdaa>
     190:	c2 c7       	rjmp	.+3972   	; 0x1116 <u8g2_font_draw_glyph>
     192:	c1 16       	cp	r12, r17
     194:	94 09       	sbc	r25, r4
     196:	65 42       	sbci	r22, 0x25	; 37
     198:	35 00       	.word	0x0035	; ????
     19a:	38 10       	cpse	r3, r8
     19c:	ce c2       	rjmp	.+1436   	; 0x73a <__EEPROM_REGION_LENGTH__+0x33a>
     19e:	0f 45       	sbci	r16, 0x5F	; 95
     1a0:	44 92       	xch	Z, r4
     1a2:	48 42       	sbci	r20, 0x28	; 40
     1a4:	a4 48       	sbci	r26, 0x84	; 132
     1a6:	89 24       	eor	r8, r9
     1a8:	a1 00       	.word	0x00a1	; ????
     1aa:	39 0d       	add	r19, r9
     1ac:	ce c2       	rjmp	.+1436   	; 0x74a <__EEPROM_REGION_LENGTH__+0x34a>
     1ae:	0f 45       	sbci	r16, 0x5F	; 95
     1b0:	c4 24       	eor	r12, r4
     1b2:	29 aa       	std	Y+49, r2	; 0x31
     1b4:	89 46       	sbci	r24, 0x69	; 105
     1b6:	00 3a       	cpi	r16, 0xA0	; 160
     1b8:	07 b2       	in	r0, 0x17	; 23
     1ba:	c3 07       	cpc	r28, r19
     1bc:	91 00       	.word	0x0091	; ????
     1be:	3b 09       	sbc	r19, r11
     1c0:	43 bb       	out	0x13, r20	; 19
     1c2:	8f ba       	out	0x1f, r8	; 31
     1c4:	84 12       	cpse	r8, r20
     1c6:	02 3c       	cpi	r16, 0xC2	; 194
     1c8:	08 ce       	rjmp	.-1008   	; 0xfffffdda <__eeprom_end+0xff7efdda>
     1ca:	c2 a7       	std	Z+42, r28	; 0x2a
     1cc:	4c 57       	subi	r20, 0x7C	; 124
     1ce:	1d 3d       	cpi	r17, 0xDD	; 221
     1d0:	08 ae       	std	Y+56, r0	; 0x38
     1d2:	ca c7       	rjmp	.+3988   	; 0x1168 <u8g2_DrawGlyph+0x18>
     1d4:	a1 7c       	andi	r26, 0xC1	; 193
     1d6:	28 3e       	cpi	r18, 0xE8	; 232
     1d8:	09 ce       	rjmp	.-1006   	; 0xfffffdec <__eeprom_end+0xff7efdec>
     1da:	c2 87       	std	Z+10, r28	; 0x0a
     1dc:	54 37       	cpi	r21, 0x74	; 116
     1de:	1d 01       	movw	r2, r26
     1e0:	3f 0f       	add	r19, r31
     1e2:	d6 c2       	rjmp	.+1452   	; 0x790 <__EEPROM_REGION_LENGTH__+0x390>
     1e4:	0f 45       	sbci	r16, 0x5F	; 95
     1e6:	44 12       	cpse	r4, r20
     1e8:	ca 14       	cp	r12, r10
     1ea:	e5 30       	cpi	r30, 0x05	; 5
     1ec:	a1 08       	sbc	r10, r1
     1ee:	00 40       	sbci	r16, 0x00	; 0
     1f0:	0f ce       	rjmp	.-994    	; 0xfffffe10 <__eeprom_end+0xff7efe10>
     1f2:	c2 d7       	rcall	.+3972   	; 0x1178 <u8g2_DrawGlyph+0x28>
     1f4:	48 42       	sbci	r20, 0x28	; 40
     1f6:	89 48       	sbci	r24, 0x89	; 137
     1f8:	2a 21       	and	r18, r10
     1fa:	89 65       	ori	r24, 0x59	; 89
     1fc:	22 25       	eor	r18, r2
     1fe:	41 0e       	add	r4, r17
     200:	ce c2       	rjmp	.+1436   	; 0x79e <__EEPROM_REGION_LENGTH__+0x39e>
     202:	97 50       	subi	r25, 0x07	; 7
     204:	8d 14       	cp	r8, r13
     206:	11 45       	sbci	r17, 0x51	; 81
     208:	24 b7       	in	r18, 0x34	; 52
     20a:	99 00       	.word	0x0099	; ????
     20c:	42 0d       	add	r20, r2
     20e:	ce c2       	rjmp	.+1436   	; 0x7ac <__EEPROM_REGION_LENGTH__+0x3ac>
     210:	47 45       	sbci	r20, 0x57	; 87
     212:	c4 14       	cp	r12, r4
     214:	a9 88       	ldd	r10, Y+17	; 0x11
     216:	98 2e       	mov	r9, r24
     218:	00 43       	sbci	r16, 0x30	; 48
     21a:	0c ce       	rjmp	.-1000   	; 0xfffffe34 <__eeprom_end+0xff7efe34>
     21c:	c2 d7       	rcall	.+3972   	; 0x11a2 <u8g2_DrawGlyph+0x52>
     21e:	48 42       	sbci	r20, 0x28	; 40
     220:	d4 55       	subi	r29, 0x54	; 84
     222:	22 9a       	sbi	0x04, 2	; 4
     224:	00 44       	sbci	r16, 0x40	; 64
     226:	0c ce       	rjmp	.-1000   	; 0xfffffe40 <__eeprom_end+0xff7efe40>
     228:	c2 07       	cpc	r28, r18
     22a:	49 14       	cp	r4, r9
     22c:	11 f1       	breq	.+68     	; 0x272 <__trampolines_end+0x20a>
     22e:	29 42       	sbci	r18, 0x29	; 41
     230:	02 45       	sbci	r16, 0x52	; 82
     232:	0e ce       	rjmp	.-996    	; 0xfffffe50 <__eeprom_end+0xff7efe50>
     234:	c2 c7       	rjmp	.+3972   	; 0x11ba <u8g2_DrawGlyph+0x6a>
     236:	21 36       	cpi	r18, 0x61	; 97
     238:	14 45       	sbci	r17, 0x54	; 84
     23a:	2a a2       	std	Y+34, r2	; 0x22
     23c:	88 50       	subi	r24, 0x08	; 8
     23e:	76 46       	sbci	r23, 0x66	; 102
     240:	0f ce       	rjmp	.-994    	; 0xfffffe60 <__eeprom_end+0xff7efe60>
     242:	c2 c7       	rjmp	.+3972   	; 0x11c8 <u8g2_DrawGlyph+0x78>
     244:	21 36       	cpi	r18, 0x61	; 97
     246:	14 45       	sbci	r17, 0x54	; 84
     248:	2a a2       	std	Y+34, r2	; 0x22
     24a:	88 50       	subi	r24, 0x08	; 8
     24c:	11 00       	.word	0x0011	; ????
     24e:	47 0d       	add	r20, r7
     250:	ce c2       	rjmp	.+1436   	; 0x7ee <__EEPROM_REGION_LENGTH__+0x3ee>
     252:	d7 48       	sbci	r29, 0x87	; 135
     254:	42 54       	subi	r20, 0x42	; 66
     256:	29 91       	ld	r18, Y+
     258:	24 4a       	sbci	r18, 0xA4	; 164
     25a:	04 48       	sbci	r16, 0x84	; 132
     25c:	0b ce       	rjmp	.-1002   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     25e:	c2 87       	std	Z+10, r28	; 0x0a
     260:	88 d3       	rcall	.+1808   	; 0x972 <__stack+0x73>
     262:	61 c4       	rjmp	.+2242   	; 0xb26 <u8g2_Setup_sh1106_64x32_1+0x42>
     264:	49 00       	.word	0x0049	; ????
     266:	49 09       	sbc	r20, r9
     268:	ce c2       	rjmp	.+1436   	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     26a:	87 49       	sbci	r24, 0x97	; 151
     26c:	a8 4f       	sbci	r26, 0xF8	; 248
     26e:	06 4a       	sbci	r16, 0xA6	; 166
     270:	0b ce       	rjmp	.-1002   	; 0xfffffe88 <__eeprom_end+0xff7efe88>
     272:	c2 17       	cp	r28, r18
     274:	4d a8       	ldd	r4, Y+53	; 0x35
     276:	8b 4e       	sbci	r24, 0xEB	; 235
     278:	23 00       	.word	0x0023	; ????
     27a:	4b 0e       	add	r4, r27
     27c:	ce c2       	rjmp	.+1436   	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     27e:	87 88       	ldd	r8, Z+23	; 0x17
     280:	14 91       	lpm	r17, Z
     282:	84 98       	cbi	0x10, 4	; 16
     284:	24 3a       	cpi	r18, 0xA4	; 164
     286:	91 04       	cpc	r9, r1
     288:	4c 08       	sbc	r4, r12
     28a:	ce c2       	rjmp	.+1436   	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     28c:	87 50       	subi	r24, 0x07	; 7
     28e:	bf 1d       	adc	r27, r15
     290:	4d 0f       	add	r20, r29
     292:	ce c2       	rjmp	.+1436   	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     294:	47 70       	andi	r20, 0x07	; 7
     296:	74 38       	cpi	r23, 0x84	; 132
     298:	44 22       	and	r4, r20
     29a:	93 c8       	rjmp	.-3802   	; 0xfffff3c2 <__eeprom_end+0xff7ef3c2>
     29c:	6c 4d       	sbci	r22, 0xDC	; 220
     29e:	00 4e       	sbci	r16, 0xE0	; 224
     2a0:	0c ce       	rjmp	.-1000   	; 0xfffffeba <__eeprom_end+0xff7efeba>
     2a2:	c2 87       	std	Z+10, r28	; 0x0a
     2a4:	8c 44       	sbci	r24, 0x4C	; 76
     2a6:	92 e8       	ldi	r25, 0x82	; 130
     2a8:	c4 36       	cpi	r28, 0x64	; 100
     2aa:	13 4f       	sbci	r17, 0xF3	; 243
     2ac:	0b ce       	rjmp	.-1002   	; 0xfffffec4 <__eeprom_end+0xff7efec4>
     2ae:	c2 0f       	add	r28, r18
     2b0:	45 c4       	rjmp	.+2186   	; 0xb3c <u8g2_font_get_byte+0x2>
     2b2:	4f 12       	cpse	r4, r31
     2b4:	0a 00       	.word	0x000a	; ????
     2b6:	50 0b       	sbc	r21, r16
     2b8:	ce c2       	rjmp	.+1436   	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     2ba:	47 45       	sbci	r20, 0x57	; 87
     2bc:	c4 74       	andi	r28, 0x44	; 68
     2be:	11 6a       	ori	r17, 0xA1	; 161
     2c0:	04 51       	subi	r16, 0x14	; 20
     2c2:	0d de       	rcall	.-998    	; 0xfffffede <__eeprom_end+0xff7efede>
     2c4:	ba 0f       	add	r27, r26
     2c6:	45 c4       	rjmp	.+2186   	; 0xb52 <u8g2_font_get_word+0xe>
     2c8:	53 85       	ldd	r21, Z+11	; 0x0b
     2ca:	32 a1       	ldd	r19, Z+34	; 0x22
     2cc:	4a 03       	fmul	r20, r18
     2ce:	52 0e       	add	r5, r18
     2d0:	ce c2       	rjmp	.+1436   	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     2d2:	47 45       	sbci	r20, 0x57	; 87
     2d4:	c4 74       	andi	r28, 0x44	; 68
     2d6:	91 84       	ldd	r9, Z+9	; 0x09
     2d8:	24 4a       	sbci	r18, 0xA4	; 164
     2da:	24 01       	movw	r4, r8
     2dc:	53 0e       	add	r5, r19
     2de:	ce c2       	rjmp	.+1436   	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     2e0:	0f 45       	sbci	r16, 0x5F	; 95
     2e2:	44 1c       	adc	r4, r4
     2e4:	12 87       	std	Z+10, r17	; 0x0a
     2e6:	24 09       	sbc	r18, r4
     2e8:	05 00       	.word	0x0005	; ????
     2ea:	54 0b       	sbc	r21, r20
     2ec:	ce c2       	rjmp	.+1436   	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     2ee:	c7 45       	sbci	r28, 0x57	; 87
     2f0:	12 12       	cpse	r1, r18
     2f2:	ea 13       	cpse	r30, r26
     2f4:	00 55       	subi	r16, 0x50	; 80
     2f6:	0a ce       	rjmp	.-1004   	; 0xffffff0c <__eeprom_end+0xff7eff0c>
     2f8:	c2 87       	std	Z+10, r28	; 0x0a
     2fa:	88 3f       	cpi	r24, 0xF8	; 248
     2fc:	49 28       	or	r4, r9
     2fe:	00 56       	subi	r16, 0x60	; 96
     300:	10 ce       	rjmp	.-992    	; 0xffffff22 <__eeprom_end+0xff7eff22>
     302:	c2 87       	std	Z+10, r28	; 0x0a
     304:	6c 16       	cp	r6, r28
     306:	d1 12       	cpse	r13, r17
     308:	92 c4       	rjmp	.+2340   	; 0xc2e <u8g2_read_font_info+0xba>
     30a:	66 42       	sbci	r22, 0x26	; 38
     30c:	69 08       	sbc	r6, r9
     30e:	00 57       	subi	r16, 0x70	; 112
     310:	10 ce       	rjmp	.-992    	; 0xffffff32 <__eeprom_end+0xff7eff32>
     312:	c2 87       	std	Z+10, r28	; 0x0a
     314:	6c 4b       	sbci	r22, 0xBC	; 188
     316:	64 12       	cpse	r6, r20
     318:	b9 90       	ld	r11, Y+
     31a:	24 21       	and	r18, r4
     31c:	49 04       	cpc	r4, r9
     31e:	00 58       	subi	r16, 0x80	; 128
     320:	0f ce       	rjmp	.-994    	; 0xffffff40 <__eeprom_end+0xff7eff40>
     322:	c2 87       	std	Z+10, r28	; 0x0a
     324:	88 24       	eor	r8, r8
     326:	91 84       	ldd	r9, Z+9	; 0x09
     328:	86 c2       	rjmp	.+1292   	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     32a:	51 44       	sbci	r21, 0x41	; 65
     32c:	89 24       	eor	r8, r9
     32e:	59 0c       	add	r5, r9
     330:	ce c2       	rjmp	.+1436   	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
     332:	87 88       	ldd	r8, Z+23	; 0x17
     334:	24 91       	lpm	r18, Z
     336:	84 86       	std	Z+12, r8	; 0x0c
     338:	7a 02       	muls	r23, r26
     33a:	5a 0b       	sbc	r21, r26
     33c:	ce c2       	rjmp	.+1436   	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     33e:	c7 4d       	sbci	r28, 0xD7	; 215
     340:	51 a6       	std	Z+41, r5	; 0x29
     342:	28 93       	.word	0x9328	; ????
     344:	1d 5b       	subi	r17, 0xBD	; 189
     346:	08 e5       	ldi	r16, 0x58	; 88
     348:	be c7       	rjmp	.+3964   	; 0x12c6 <u8g2_UpdateRefHeight+0x20>
     34a:	4d ff       	.word	0xff4d	; ????
     34c:	56 5c       	subi	r21, 0xC6	; 198
     34e:	0e e6       	ldi	r16, 0x6E	; 110
     350:	be 87       	std	Y+14, r27	; 0x0e
     352:	50 2a       	or	r5, r16
     354:	54 15       	cp	r21, r4
     356:	4a 85       	ldd	r20, Y+10	; 0x0a
     358:	aa 42       	sbci	r26, 0x2A	; 42
     35a:	01 5d       	subi	r16, 0xD1	; 209
     35c:	08 e5       	ldi	r16, 0x58	; 88
     35e:	be 47       	sbci	r27, 0x7E	; 126
     360:	4d ff       	.word	0xff4d	; ????
     362:	76 5e       	subi	r23, 0xE6	; 230
     364:	08 9e       	mul	r0, r24
     366:	da 97       	sbiw	r26, 0x3a	; 58
     368:	8c 22       	and	r8, r28
     36a:	12 5f       	subi	r17, 0xF2	; 242
     36c:	07 96       	adiw	r24, 0x07	; 7
     36e:	be c7       	rjmp	.+3964   	; 0x12ec <u8g2_UpdateRefHeight+0x46>
     370:	a1 00       	.word	0x00a1	; ????
     372:	60 08       	sbc	r6, r0
     374:	23 db       	rcall	.-2490   	; 0xfffff9bc <__eeprom_end+0xff7ef9bc>
     376:	87 44       	sbci	r24, 0x47	; 71
     378:	24 0a       	sbc	r2, r20
     37a:	61 0c       	add	r6, r1
     37c:	be c2       	rjmp	.+1404   	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
     37e:	0f 49       	sbci	r16, 0x9F	; 159
     380:	22 94       	swap	r2
     382:	9c 48       	sbci	r25, 0x8C	; 140
     384:	92 02       	muls	r25, r18
     386:	62 0e       	add	r6, r18
     388:	d6 c2       	rjmp	.+1452   	; 0x936 <__stack+0x37>
     38a:	87 50       	subi	r24, 0x07	; 7
     38c:	8b 64       	ori	r24, 0x4B	; 75
     38e:	42 62       	ori	r20, 0x22	; 34
     390:	aa 50       	subi	r26, 0x0A	; 10
     392:	24 00       	.word	0x0024	; ????
     394:	63 0b       	sbc	r22, r19
     396:	be c2       	rjmp	.+1404   	; 0x914 <__stack+0x15>
     398:	0f 45       	sbci	r16, 0x5F	; 95
     39a:	44 d4       	rcall	.+2184   	; 0xc24 <u8g2_read_font_info+0xb0>
     39c:	24 a1       	ldd	r18, Z+36	; 0x24
     39e:	00 64       	ori	r16, 0x40	; 64
     3a0:	0c d6       	rcall	.+3096   	; 0xfba <u8g2_font_decode_glyph+0x148>
     3a2:	c2 a7       	std	Z+42, r28	; 0x2a
     3a4:	16 09       	sbc	r17, r6
     3a6:	a5 c4       	rjmp	.+2378   	; 0xcf2 <u8g2_font_setup_decode+0x3a>
     3a8:	65 a2       	std	Z+37, r6	; 0x25
     3aa:	00 65       	ori	r16, 0x50	; 80
     3ac:	0d be       	out	0x3d, r0	; 61
     3ae:	c2 0f       	add	r28, r18
     3b0:	45 44       	sbci	r20, 0x45	; 69
     3b2:	3a 0c       	add	r3, r10
     3b4:	45 12       	cpse	r4, r21
     3b6:	0a 00       	.word	0x000a	; ????
     3b8:	66 0d       	add	r22, r6
     3ba:	d6 c2       	rjmp	.+1452   	; 0x968 <__stack+0x69>
     3bc:	df 48       	sbci	r29, 0x8F	; 143
     3be:	12 12       	cpse	r1, r18
     3c0:	8a 4c       	sbci	r24, 0xCA	; 202
     3c2:	42 9d       	mul	r20, r2
     3c4:	00 67       	ori	r16, 0x70	; 112
     3c6:	0c ce       	rjmp	.-1000   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
     3c8:	ba cf       	rjmp	.-140    	; 0x33e <__trampolines_end+0x2d6>
     3ca:	89 cb       	rjmp	.-2286   	; 0xfffffade <__eeprom_end+0xff7efade>
     3cc:	44 91       	lpm	r20, Z
     3ce:	24 a1       	ldd	r18, Z+36	; 0x24
     3d0:	00 68       	ori	r16, 0x80	; 128
     3d2:	0c d6       	rcall	.+3096   	; 0xfec <u8g2_font_decode_glyph+0x17a>
     3d4:	c2 87       	std	Z+10, r28	; 0x0a
     3d6:	50 8b       	std	Z+16, r21	; 0x10
     3d8:	64 42       	sbci	r22, 0x24	; 36
     3da:	e2 49       	sbci	r30, 0x92	; 146
     3dc:	00 69       	ori	r16, 0x90	; 144
     3de:	0b d6       	rcall	.+3094   	; 0xff6 <u8g2_font_decode_glyph+0x184>
     3e0:	c2 97       	sbiw	r24, 0x32	; 50
     3e2:	50 0e       	add	r5, r16
     3e4:	1a ea       	ldi	r17, 0xAA	; 170
     3e6:	c9 00       	.word	0x00c9	; ????
     3e8:	6a 0c       	add	r6, r10
     3ea:	e5 ba       	out	0x15, r14	; 21
     3ec:	9f 32       	cpi	r25, 0x2F	; 47
     3ee:	4d 6f       	ori	r20, 0xFD	; 253
     3f0:	14 c9       	rjmp	.-3544   	; 0xfffff61a <__eeprom_end+0xff7ef61a>
     3f2:	04 00       	.word	0x0004	; ????
     3f4:	6b 0f       	add	r22, r27
     3f6:	d6 c2       	rjmp	.+1452   	; 0x9a4 <__stack+0xa5>
     3f8:	87 50       	subi	r24, 0x07	; 7
     3fa:	13 29       	or	r17, r3
     3fc:	22 09       	sbc	r18, r2
     3fe:	91 24       	eor	r9, r1
     400:	4a 24       	eor	r4, r10
     402:	01 6c       	ori	r16, 0xC1	; 193
     404:	08 d6       	rcall	.+3088   	; 0x1016 <u8g2_font_decode_glyph+0x1a4>
     406:	c2 cf       	rjmp	.-124    	; 0x38c <__trampolines_end+0x324>
     408:	50 7f       	andi	r21, 0xF0	; 240
     40a:	32 6d       	ori	r19, 0xD2	; 210
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	c2 87       	std	Z+10, r28	; 0x0a
     410:	44 72       	andi	r20, 0x24	; 36
     412:	b8 44       	sbci	r27, 0x48	; 72
     414:	26 91       	elpm	r18, Z
     416:	49 64       	ori	r20, 0x49	; 73
     418:	92 00       	.word	0x0092	; ????
     41a:	6e 0a       	sbc	r6, r30
     41c:	be c2       	rjmp	.+1404   	; 0x99a <__stack+0x9b>
     41e:	87 44       	sbci	r24, 0x47	; 71
     420:	32 21       	and	r19, r2
     422:	f1 24       	eor	r15, r1
     424:	6f 0a       	sbc	r6, r31
     426:	be c2       	rjmp	.+1404   	; 0x9a4 <__stack+0xa5>
     428:	0f 45       	sbci	r16, 0x5F	; 95
     42a:	c4 93       	xch	Z, r28
     42c:	84 02       	muls	r24, r20
     42e:	70 0e       	add	r7, r16
     430:	ce ba       	out	0x1e, r12	; 30
     432:	87 44       	sbci	r24, 0x47	; 71
     434:	32 21       	and	r19, r2
     436:	31 55       	subi	r19, 0x51	; 81
     438:	28 8a       	std	Y+16, r2	; 0x10
     43a:	42 00       	.word	0x0042	; ????
     43c:	71 0b       	sbc	r23, r17
     43e:	ce ba       	out	0x1e, r12	; 30
     440:	8f 84       	ldd	r8, Y+15	; 0x0f
     442:	52 e2       	ldi	r21, 0x22	; 34
     444:	32 51       	subi	r19, 0x12	; 18
     446:	54 72       	andi	r21, 0x24	; 36
     448:	0a be       	out	0x3a, r0	; 58
     44a:	c2 c7       	rjmp	.+3972   	; 0x13d0 <u8g2_clip_intersection2+0x46>
     44c:	44 52       	subi	r20, 0x24	; 36
     44e:	11 ea       	ldi	r17, 0xA1	; 161
     450:	06 73       	andi	r16, 0x36	; 54
     452:	0b be       	out	0x3b, r0	; 59
     454:	c2 0f       	add	r28, r18
     456:	45 44       	sbci	r20, 0x45	; 69
     458:	65 92       	las	Z, r6
     45a:	50 00       	.word	0x0050	; ????
     45c:	74 0c       	add	r7, r4
     45e:	ce c2       	rjmp	.+1436   	; 0x9fc <__do_clear_bss+0x2>
     460:	8f 50       	subi	r24, 0x0F	; 15
     462:	56 12       	cpse	r5, r22
     464:	ea 22       	and	r14, r26
     466:	9a 00       	.word	0x009a	; ????
     468:	75 09       	sbc	r23, r5
     46a:	be c2       	rjmp	.+1404   	; 0x9e8 <__do_copy_data+0x4>
     46c:	87 88       	ldd	r8, Z+23	; 0x17
     46e:	2f 13       	cpse	r18, r31
     470:	05 76       	andi	r16, 0x65	; 101
     472:	0d be       	out	0x3d, r0	; 61
     474:	c2 87       	std	Z+10, r28	; 0x0a
     476:	6c 16       	cp	r6, r28
     478:	d1 12       	cpse	r13, r17
     47a:	9b 49       	sbci	r25, 0x9B	; 155
     47c:	43 00       	.word	0x0043	; ????
     47e:	77 10       	cpse	r7, r7
     480:	be c2       	rjmp	.+1404   	; 0x9fe <__do_clear_bss+0x4>
     482:	87 6c       	ori	r24, 0xC7	; 199
     484:	12 99       	sbic	0x02, 2	; 2
     486:	44 26       	eor	r4, r20
     488:	91 8b       	std	Z+17, r25	; 0x11
     48a:	24 24       	eor	r2, r4
     48c:	89 00       	.word	0x0089	; ????
     48e:	78 0d       	add	r23, r8
     490:	be c2       	rjmp	.+1404   	; 0xa0e <.do_clear_bss_start+0xa>
     492:	87 88       	ldd	r8, Z+23	; 0x17
     494:	14 1a       	sub	r1, r20
     496:	0a 47       	sbci	r16, 0x7A	; 122
     498:	21 92       	st	Z+, r2
     49a:	00 79       	andi	r16, 0x90	; 144
     49c:	11 ce       	rjmp	.-990    	; 0xc0 <__trampolines_end+0x58>
     49e:	ba 87       	std	Y+10, r27	; 0x0a
     4a0:	6c 16       	cp	r6, r28
     4a2:	91 84       	ldd	r9, Z+9	; 0x09
     4a4:	24 b1       	in	r18, 0x04	; 4
     4a6:	99 34       	cpi	r25, 0x49	; 73
     4a8:	14 11       	cpse	r17, r4
     4aa:	cd 00       	.word	0x00cd	; ????
     4ac:	7a 09       	sbc	r23, r10
     4ae:	be c2       	rjmp	.+1404   	; 0xa2c <u8g2_send_tile_row+0x16>
     4b0:	c7 69       	ori	r28, 0x97	; 151
     4b2:	a6 6d       	ori	r26, 0xD6	; 214
     4b4:	74 7b       	andi	r23, 0xB4	; 180
     4b6:	0c e6       	ldi	r16, 0x6C	; 108
     4b8:	be df       	rcall	.-132    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     4ba:	48 a8       	ldd	r4, Y+48	; 0x30
     4bc:	69 36       	cpi	r22, 0x69	; 105
     4be:	15 6a       	ori	r17, 0xA5	; 165
     4c0:	1d 7c       	andi	r17, 0xCD	; 205
     4c2:	07 e2       	ldi	r16, 0x27	; 39
     4c4:	bf c7       	rjmp	.+3966   	; 0x1444 <u8g2_DrawHVLine+0x38>
     4c6:	87 01       	movw	r16, r14
     4c8:	7d 0d       	add	r23, r13
     4ca:	e6 be       	out	0x36, r14	; 54
     4cc:	c7 54       	subi	r28, 0x47	; 71
     4ce:	a8 75       	andi	r26, 0x58	; 88
     4d0:	36 12       	cpse	r3, r22
     4d2:	6a 9a       	sbi	0x0d, 2	; 13
     4d4:	01 7e       	andi	r16, 0xE1	; 225
     4d6:	0a a6       	std	Y+42, r0	; 0x2a
     4d8:	da 8f       	std	Y+26, r29	; 0x1a
     4da:	a8 22       	and	r10, r24
     4dc:	29 49       	sbci	r18, 0x99	; 153
     4de:	00 a0       	ldd	r0, Z+32	; 0x20
     4e0:	08 a6       	std	Y+40, r0	; 0x28
     4e2:	be 47       	sbci	r27, 0x7E	; 126
     4e4:	50 78       	andi	r21, 0x80	; 128
     4e6:	30 a1       	ldd	r19, Z+32	; 0x20
     4e8:	07 d2       	rcall	.+1038   	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     4ea:	bb 07       	cpc	r27, r27
     4ec:	e9 70       	andi	r30, 0x09	; 9
     4ee:	a2 10       	cpse	r10, r2
     4f0:	ce be       	out	0x3e, r12	; 62
     4f2:	6f 84       	ldd	r6, Y+15	; 0x0f
     4f4:	22 a2       	std	Z+34, r2	; 0x22
     4f6:	84 24       	eor	r8, r4
     4f8:	a1 d9       	rcall	.-3262   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     4fa:	44 42       	sbci	r20, 0x24	; 36
     4fc:	0a 02       	muls	r16, r26
     4fe:	a3 0c       	add	r10, r3
     500:	ce c2       	rjmp	.+1436   	; 0xa9e <u8g2_ClearBuffer+0x8>
     502:	d7 48       	sbci	r29, 0x87	; 135
     504:	a2 1b       	sub	r26, r18
     506:	4d 18       	sub	r4, r13
     508:	3b 18       	sub	r3, r11
     50a:	a4 0c       	add	r10, r4
     50c:	b6 c6       	rjmp	.+3436   	; 0x127a <u8g2_draw_string+0x86>
     50e:	87 e8       	ldi	r24, 0x87	; 135
     510:	10 09       	sbc	r17, r0
     512:	65 39       	cpi	r22, 0x95	; 149
     514:	84 04       	cpc	r8, r4
     516:	a5 0e       	add	r10, r21
     518:	ce c2       	rjmp	.+1436   	; 0xab6 <u8g2_ClearBuffer+0x20>
     51a:	87 88       	ldd	r8, Z+23	; 0x17
     51c:	49 42       	sbci	r20, 0x29	; 41
     51e:	31 89       	ldd	r19, Z+17	; 0x11
     520:	4c 42       	sbci	r20, 0x2C	; 44
     522:	11 00       	.word	0x0011	; ????
     524:	a6 08       	sbc	r10, r6
     526:	e2 bf       	out	0x32, r30	; 50
     528:	c7 61       	ori	r28, 0x17	; 23
     52a:	78 18       	sub	r7, r8
     52c:	a7 10       	cpse	r10, r7
     52e:	dd ba       	out	0x1d, r13	; 29
     530:	cf 44       	sbci	r28, 0x4F	; 79
     532:	25 36       	cpi	r18, 0x65	; 101
     534:	8a e8       	ldi	r24, 0x8A	; 138
     536:	12 9a       	sbi	0x02, 2	; 2
     538:	45 54       	subi	r20, 0x45	; 69
     53a:	26 00       	.word	0x0026	; ????
     53c:	a8 07       	cpc	r26, r24
     53e:	95 e2       	ldi	r25, 0x25	; 37
     540:	87 84       	ldd	r8, Z+15	; 0x0f
     542:	22 a9       	ldd	r18, Z+50	; 0x32
     544:	13 57       	subi	r17, 0x73	; 115
     546:	be d7       	rcall	.+3964   	; 0x14c4 <u8g2_DrawHVLine+0xb8>
     548:	2c 25       	eor	r18, r12
     54a:	24 51       	subi	r18, 0x14	; 20
     54c:	92 c4       	rjmp	.+2340   	; 0xe72 <u8g2_font_decode_glyph>
     54e:	24 31       	cpi	r18, 0x14	; 20
     550:	89 48       	sbci	r24, 0x89	; 137
     552:	25 2d       	mov	r18, r5
     554:	36 02       	muls	r19, r22
     556:	aa 0b       	sbc	r26, r26
     558:	c5 ca       	rjmp	.-2678   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
     55a:	cf 50       	subi	r28, 0x0F	; 15
     55c:	62 91       	ld	r22, -Z
     55e:	50 0f       	add	r21, r16
     560:	03 ab       	std	Z+51, r16	; 0x33
     562:	09 a6       	std	Y+41, r0	; 0x29
     564:	ca 8f       	std	Y+26, r28	; 0x1a
     566:	84 a2       	std	Z+36, r8	; 0x24
     568:	49 22       	and	r4, r25
     56a:	ac 08       	sbc	r10, r12
     56c:	a6 c6       	rjmp	.+3404   	; 0x12ba <u8g2_UpdateRefHeight+0x14>
     56e:	c7 a1       	ldd	r28, Z+39	; 0x27
     570:	a8 00       	.word	0x00a8	; ????
     572:	ad 07       	cpc	r26, r29
     574:	14 cf       	rjmp	.-472    	; 0x39e <__trampolines_end+0x336>
     576:	c7 21       	and	r28, r7
     578:	00 ae       	std	Z+56, r0	; 0x38
     57a:	14 57       	subi	r17, 0x74	; 116
     57c:	be d7       	rcall	.+3964   	; 0x14fa <u8g2_DrawHVLine+0xee>
     57e:	2c 25       	eor	r18, r12
     580:	22 92       	st	-Z, r2
     582:	4c 24       	eor	r4, r12
     584:	29 4a       	sbci	r18, 0xA9	; 169
     586:	92 89       	ldd	r25, Z+18	; 0x12
     588:	24 b7       	in	r18, 0x34	; 52
     58a:	d8 08       	sbc	r13, r8
     58c:	00 af       	std	Z+56, r16	; 0x38
     58e:	07 96       	adiw	r24, 0x07	; 7
     590:	e2 c7       	rjmp	.+4036   	; 0x1556 <u8g2_is_intersection_decision_tree+0x18>
     592:	a1 00       	.word	0x00a1	; ????
     594:	b0 0a       	sbc	r11, r16
     596:	a5 da       	rcall	.-2742   	; 0xfffffae2 <__eeprom_end+0xff7efae2>
     598:	cf 44       	sbci	r28, 0x4F	; 79
     59a:	42 91       	ld	r20, -Z
     59c:	4c 00       	.word	0x004c	; ????
     59e:	b1 0c       	add	r11, r1
     5a0:	c6 c2       	rjmp	.+1420   	; 0xb2e <u8g2_Setup_sh1106_64x32_1+0x4a>
     5a2:	97 50       	subi	r25, 0x07	; 7
     5a4:	74 28       	or	r7, r4
     5a6:	09 45       	sbci	r16, 0x59	; 89
     5a8:	87 02       	muls	r24, r23
     5aa:	b2 0b       	sbc	r27, r18
     5ac:	bd d2       	rcall	.+1402   	; 0xb28 <u8g2_Setup_sh1106_64x32_1+0x44>
     5ae:	cf 44       	sbci	r28, 0x4F	; 79
     5b0:	4d 24       	eor	r4, r13
     5b2:	8a 1d       	adc	r24, r10
     5b4:	06 b3       	in	r16, 0x16	; 22
     5b6:	0c bd       	out	0x2c, r16	; 44
     5b8:	d2 cf       	rjmp	.-92     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
     5ba:	44 4d       	sbci	r20, 0xD4	; 212
     5bc:	24 a4       	ldd	r2, Z+44	; 0x2c
     5be:	48 26       	eor	r4, r24
     5c0:	00 b4       	in	r0, 0x20	; 32
     5c2:	08 24       	eor	r0, r8
     5c4:	db 97       	sbiw	r26, 0x3b	; 59
     5c6:	44 29       	or	r20, r4
     5c8:	06 b5       	in	r16, 0x26	; 38
     5ca:	0c ce       	rjmp	.-1000   	; 0x1e4 <__trampolines_end+0x17c>
     5cc:	ba 87       	std	Y+10, r27	; 0x0a
     5ce:	88 a7       	std	Y+40, r24	; 0x28
     5d0:	c3 24       	eor	r12, r3
     5d2:	32 14       	cp	r3, r2
     5d4:	02 b6       	in	r0, 0x32	; 50
     5d6:	10 ce       	rjmp	.-992    	; 0x1f8 <__trampolines_end+0x190>
     5d8:	c2 cf       	rjmp	.-124    	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
     5da:	a1 12       	cpse	r10, r17
     5dc:	a9 68       	ori	r26, 0x89	; 137
     5de:	8a 88       	ldd	r8, Y+18	; 0x12
     5e0:	22 a2       	std	Z+34, r2	; 0x22
     5e2:	88 28       	or	r8, r8
     5e4:	22 b7       	in	r18, 0x32	; 50
     5e6:	06 92       	lac	Z, r0
     5e8:	cf 07       	cpc	r28, r31
     5ea:	01 b8       	out	0x01, r0	; 1
     5ec:	08 24       	eor	r0, r8
     5ee:	bb 8f       	std	Y+27, r27	; 0x1b
     5f0:	4c 54       	subi	r20, 0x4C	; 76
     5f2:	01 b9       	out	0x01, r16	; 1
     5f4:	07 3b       	cpi	r16, 0xB7	; 183
     5f6:	d3 4f       	sbci	r29, 0xF3	; 243
     5f8:	45 0f       	add	r20, r21
     5fa:	ba 0b       	sbc	r27, r26
     5fc:	c5 ca       	rjmp	.-2678   	; 0xfffffb88 <__eeprom_end+0xff7efb88>
     5fe:	cf 44       	sbci	r28, 0x4F	; 79
     600:	c2 22       	and	r12, r18
     602:	19 1f       	adc	r17, r25
     604:	06 bb       	out	0x16, r16	; 22
     606:	0b a6       	std	Y+43, r0	; 0x2b
     608:	ca 87       	std	Y+10, r28	; 0x0a
     60a:	44 24       	eor	r4, r4
     60c:	51 a1       	ldd	r21, Z+33	; 0x21
     60e:	48 00       	.word	0x0048	; ????
     610:	bc 13       	cpse	r27, r28
     612:	ee ba       	out	0x1e, r14	; 30
     614:	8f 6c       	ori	r24, 0xCF	; 207
     616:	a8 29       	or	r26, r8
     618:	52 19       	sub	r21, r2
     61a:	49 64       	ori	r20, 0x49	; 73
     61c:	a3 88       	ldd	r10, Z+19	; 0x13
     61e:	28 22       	and	r2, r24
     620:	aa 49       	sbci	r26, 0x9A	; 154
     622:	00 bd       	out	0x20, r16	; 32
     624:	11 ee       	ldi	r17, 0xE1	; 225
     626:	ba 8f       	std	Y+26, r27	; 0x1a
     628:	6c a8       	ldd	r6, Y+52	; 0x34
     62a:	45 42       	sbci	r20, 0x25	; 37
     62c:	99 45       	sbci	r25, 0x59	; 89
     62e:	46 12       	cpse	r4, r22
     630:	a1 48       	sbci	r26, 0x81	; 129
     632:	56 29       	or	r21, r6
     634:	be 15       	cp	r27, r14
     636:	ee ba       	out	0x1e, r14	; 30
     638:	cf 48       	sbci	r28, 0x8F	; 143
     63a:	22 93       	st	-Z, r18
     63c:	4a 24       	eor	r4, r10
     63e:	93 ca       	rjmp	.-2778   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     640:	48 22       	and	r4, r24
     642:	1b 45       	sbci	r17, 0x5B	; 91
     644:	44 11       	cpse	r20, r4
     646:	51 4d       	sbci	r21, 0xD1	; 209
     648:	02 bf       	out	0x32, r16	; 50
     64a:	0f d6       	rcall	.+3102   	; 0x126a <u8g2_draw_string+0x76>
     64c:	ba 97       	sbiw	r30, 0x2a	; 42
     64e:	50 0e       	add	r5, r16
     650:	13 ca       	rjmp	.-3034   	; 0xfffffa78 <__eeprom_end+0xff7efa78>
     652:	14 45       	sbci	r17, 0x54	; 84
     654:	24 09       	sbc	r18, r4
     656:	05 00       	.word	0x0005	; ????
     658:	c0 10       	cpse	r12, r0
     65a:	de c2       	rjmp	.+1468   	; 0xc18 <u8g2_read_font_info+0xa4>
     65c:	c7 54       	subi	r28, 0x47	; 71
     65e:	0e 13       	cpse	r16, r30
     660:	ca 48       	sbci	r28, 0x8A	; 138
     662:	11 51       	subi	r17, 0x11	; 17
     664:	44 72       	andi	r20, 0x24	; 36
     666:	9b 09       	sbc	r25, r11
     668:	c1 10       	cpse	r12, r1
     66a:	de c2       	rjmp	.+1468   	; 0xc28 <u8g2_read_font_info+0xb4>
     66c:	df 48       	sbci	r29, 0x8F	; 143
     66e:	0e 13       	cpse	r16, r30
     670:	ca 48       	sbci	r28, 0x8A	; 138
     672:	11 51       	subi	r17, 0x11	; 17
     674:	44 72       	andi	r20, 0x24	; 36
     676:	9b 09       	sbc	r25, r11
     678:	c2 11       	cpse	r28, r2
     67a:	de c2       	rjmp	.+1468   	; 0xc38 <u8g2_read_font_info+0xc4>
     67c:	d7 48       	sbci	r29, 0x87	; 135
     67e:	22 87       	std	Z+10, r18	; 0x0a
     680:	08 65       	ori	r16, 0x58	; 88
     682:	a4 88       	ldd	r10, Z+20	; 0x14
     684:	28 22       	and	r2, r24
     686:	b9 cd       	rjmp	.-1166   	; 0x1fa <__trampolines_end+0x192>
     688:	04 c3       	rjmp	.+1544   	; 0xc92 <u8g2_font_decode_get_unsigned_bits+0x3a>
     68a:	10 de       	rcall	.-992    	; 0x2ac <__trampolines_end+0x244>
     68c:	c2 8f       	std	Z+26, r28	; 0x1a
     68e:	64 1d       	adc	r22, r4
     690:	24 94       	.word	0x9424	; ????
     692:	91 22       	and	r9, r17
     694:	a2 88       	ldd	r10, Z+18	; 0x12
     696:	e4 36       	cpi	r30, 0x64	; 100
     698:	13 c4       	rjmp	.+2086   	; 0xec0 <u8g2_font_decode_glyph+0x4e>
     69a:	10 de       	rcall	.-992    	; 0x2bc <__trampolines_end+0x254>
     69c:	c2 8f       	std	Z+26, r28	; 0x1a
     69e:	ee 10       	cpse	r14, r14
     6a0:	a1 8c       	ldd	r10, Z+25	; 0x19
     6a2:	14 11       	cpse	r17, r4
     6a4:	45 24       	eor	r4, r5
     6a6:	b7 99       	sbic	0x16, 7	; 22
     6a8:	00 c5       	rjmp	.+2560   	; 0x10aa <u8g2_font_get_glyph_data+0x78>
     6aa:	10 de       	rcall	.-992    	; 0x2cc <__trampolines_end+0x264>
     6ac:	c2 97       	sbiw	r24, 0x32	; 50
     6ae:	4c 12       	cpse	r4, r28
     6b0:	13 aa       	std	Z+51, r1	; 0x33
     6b2:	91 22       	and	r9, r17
     6b4:	a2 88       	ldd	r10, Z+18	; 0x12
     6b6:	e4 36       	cpi	r30, 0x64	; 100
     6b8:	13 c6       	rjmp	.+3110   	; 0x12e0 <u8g2_UpdateRefHeight+0x3a>
     6ba:	11 4f       	sbci	r17, 0xF1	; 241
     6bc:	c2 57       	subi	r28, 0x72	; 114
     6be:	69 38       	cpi	r22, 0x89	; 137
     6c0:	8b c8       	rjmp	.-3818   	; 0xfffff7d8 <__eeprom_end+0xff7ef7d8>
     6c2:	22 94       	swap	r2
     6c4:	88 a8       	ldd	r8, Y+48	; 0x30
     6c6:	14 12       	cpse	r1, r20
     6c8:	85 08       	sbc	r8, r5
     6ca:	c7 0d       	add	r28, r7
     6cc:	de ba       	out	0x1e, r13	; 30
     6ce:	d7 48       	sbci	r29, 0x87	; 135
     6d0:	42 d4       	rcall	.+2180   	; 0xf56 <u8g2_font_decode_glyph+0xe4>
     6d2:	55 22       	and	r5, r21
     6d4:	9a a9       	ldd	r25, Y+50	; 0x32
     6d6:	01 c8       	rjmp	.-4094   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
     6d8:	0f de       	rcall	.-994    	; 0x2f8 <__trampolines_end+0x290>
     6da:	c2 c7       	rjmp	.+3972   	; 0x1660 <u8g2_ll_hvline_vertical_top_lsb+0xa2>
     6dc:	54 0e       	add	r5, r20
     6de:	39 c4       	rjmp	.+2162   	; 0xf52 <u8g2_font_decode_glyph+0xe0>
     6e0:	86 15       	cp	r24, r6
     6e2:	51 44       	sbci	r21, 0x41	; 65
     6e4:	28 3b       	cpi	r18, 0xB8	; 184
     6e6:	c9 0f       	add	r28, r25
     6e8:	de c2       	rjmp	.+1468   	; 0xca6 <u8g2_font_decode_get_unsigned_bits+0x4e>
     6ea:	df 48       	sbci	r29, 0x8F	; 143
     6ec:	0e 39       	cpi	r16, 0x9E	; 158
     6ee:	c4 86       	std	Z+12, r12	; 0x0c
     6f0:	15 51       	subi	r17, 0x15	; 21
     6f2:	44 28       	or	r4, r4
     6f4:	3b ca       	rjmp	.-2954   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     6f6:	0f de       	rcall	.-994    	; 0x316 <__trampolines_end+0x2ae>
     6f8:	c2 d7       	rcall	.+3972   	; 0x167e <u8g2_update_dimension_common>
     6fa:	48 22       	and	r4, r24
     6fc:	3e c4       	rjmp	.+2172   	; 0xf7a <u8g2_font_decode_glyph+0x108>
     6fe:	86 15       	cp	r24, r6
     700:	51 44       	sbci	r21, 0x41	; 65
     702:	28 3b       	cpi	r18, 0xB8	; 184
     704:	cb 0e       	add	r12, r27
     706:	de c2       	rjmp	.+1468   	; 0xcc4 <u8g2_font_setup_decode+0xc>
     708:	8f ce       	rjmp	.-738    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     70a:	87 d8       	rcall	.-3826   	; 0xfffff81a <__eeprom_end+0xff7ef81a>
     70c:	b0 22       	and	r11, r16
     70e:	8a 08       	sbc	r8, r10
     710:	65 07       	cpc	r22, r21
     712:	cc 0b       	sbc	r28, r28
     714:	de c2       	rjmp	.+1468   	; 0xcd2 <u8g2_font_setup_decode+0x1a>
     716:	c7 54       	subi	r28, 0x47	; 71
     718:	0e 31       	cpi	r16, 0x1E	; 30
     71a:	09 f5       	brne	.+66     	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
     71c:	64 cd       	rjmp	.-1336   	; 0x1e6 <__trampolines_end+0x17e>
     71e:	0b de       	rcall	.-1002   	; 0x336 <__trampolines_end+0x2ce>
     720:	c2 df       	rcall	.-124    	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
     722:	48 0e       	add	r4, r24
     724:	31 09       	sbc	r19, r1
     726:	f5 64       	ori	r31, 0x45	; 69
     728:	ce 0b       	sbc	r28, r30
     72a:	de c2       	rjmp	.+1468   	; 0xce8 <u8g2_font_setup_decode+0x30>
     72c:	d7 48       	sbci	r29, 0x87	; 135
     72e:	22 36       	cpi	r18, 0x62	; 98
     730:	09 f5       	brne	.+66     	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
     732:	64 cf       	rjmp	.-312    	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
     734:	0a de       	rcall	.-1004   	; 0x34a <__trampolines_end+0x2e2>
     736:	c2 8f       	std	Z+26, r28	; 0x1a
     738:	ce 26       	eor	r12, r30
     73a:	a1 9e       	mul	r10, r17
     73c:	0c d0       	rcall	.+24     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
     73e:	11 4f       	sbci	r17, 0xF1	; 241
     740:	c2 0f       	add	r28, r18
     742:	4d 14       	cp	r4, r13
     744:	52 11       	cpse	r21, r2
     746:	59 94       	.word	0x9459	; ????
     748:	24 22       	and	r2, r20
     74a:	89 28       	or	r8, r9
     74c:	44 02       	muls	r20, r20
     74e:	d1 0d       	add	r29, r1
     750:	de c2       	rjmp	.+1468   	; 0xd0e <u8g2_font_decode_get_signed_bits+0x4>
     752:	8f 64       	ori	r24, 0x4F	; 79
     754:	5d 46       	sbci	r21, 0x6D	; 109
     756:	22 49       	sbci	r18, 0x92	; 146
     758:	74 62       	ori	r23, 0x24	; 36
     75a:	13 d2       	rcall	.+1062   	; 0xb82 <u8g2_read_font_info+0xe>
     75c:	0d de       	rcall	.-998    	; 0x378 <__trampolines_end+0x310>
     75e:	c2 c7       	rjmp	.+3972   	; 0x16e4 <u8g2_update_dimension_common+0x66>
     760:	54 0e       	add	r5, r20
     762:	a2 88       	ldd	r10, Z+18	; 0x12
     764:	f8 24       	eor	r15, r8
     766:	a1 00       	.word	0x00a1	; ????
     768:	d3 0d       	add	r29, r3
     76a:	de c2       	rjmp	.+1468   	; 0xd28 <u8g2_add_vector_y>
     76c:	df 48       	sbci	r29, 0x8F	; 143
     76e:	0e a2       	std	Y+38, r0	; 0x26
     770:	88 f8       	.word	0xf888	; ????
     772:	24 a1       	ldd	r18, Z+36	; 0x24
     774:	00 d4       	rcall	.+2048   	; 0xf76 <u8g2_font_decode_glyph+0x104>
     776:	0d de       	rcall	.-998    	; 0x392 <__trampolines_end+0x32a>
     778:	c2 d7       	rcall	.+3972   	; 0x16fe <u8g2_update_dimension_common+0x80>
     77a:	48 22       	and	r4, r24
     77c:	a7 88       	ldd	r10, Z+23	; 0x17
     77e:	f8 24       	eor	r15, r8
     780:	a1 00       	.word	0x00a1	; ????
     782:	d5 0d       	add	r29, r5
     784:	de c2       	rjmp	.+1468   	; 0xd42 <u8g2_add_vector_y+0x1a>
     786:	8f 64       	ori	r24, 0x4F	; 79
     788:	1d 42       	sbci	r17, 0x2D	; 45
     78a:	11 f1       	breq	.+68     	; 0x7d0 <__EEPROM_REGION_LENGTH__+0x3d0>
     78c:	49 42       	sbci	r20, 0x29	; 41
     78e:	01 d6       	rcall	.+3074   	; 0x1392 <u8g2_clip_intersection2+0x8>
     790:	0c de       	rcall	.-1000   	; 0x3aa <__trampolines_end+0x342>
     792:	c2 8f       	std	Z+26, r28	; 0x1a
     794:	ee 14       	cp	r14, r14
     796:	11 9f       	mul	r17, r17
     798:	24 14       	cp	r2, r4
     79a:	00 d7       	rcall	.+3584   	; 0x159c <u8g2_IsIntersection+0x28>
     79c:	0b ae       	std	Y+59, r0	; 0x3b
     79e:	ca 87       	std	Y+10, r28	; 0x0a
     7a0:	48 42       	sbci	r20, 0x28	; 40
     7a2:	93 51       	subi	r25, 0x13	; 19
     7a4:	44 02       	muls	r20, r20
     7a6:	d8 10       	cpse	r13, r8
     7a8:	de be       	out	0x3e, r13	; 62
     7aa:	6f 84       	ldd	r6, Y+15	; 0x0f
     7ac:	22 a2       	std	Z+34, r2	; 0x22
     7ae:	54 0e       	add	r5, r20
     7b0:	95 0a       	sbc	r9, r21
     7b2:	49 42       	sbci	r20, 0x29	; 41
     7b4:	89 02       	muls	r24, r25
     7b6:	d9 0c       	add	r13, r9
     7b8:	de c2       	rjmp	.+1468   	; 0xd76 <u8g2_add_vector_x+0x1a>
     7ba:	c7 54       	subi	r28, 0x47	; 71
     7bc:	0e 11       	cpse	r16, r14
     7be:	f1 93       	st	Z+, r31	; undefined
     7c0:	84 02       	muls	r24, r20
     7c2:	da 0c       	add	r13, r10
     7c4:	de c2       	rjmp	.+1468   	; 0xd82 <u8g2_add_vector_x+0x26>
     7c6:	df 48       	sbci	r29, 0x8F	; 143
     7c8:	0e 11       	cpse	r16, r14
     7ca:	f1 93       	st	Z+, r31	; undefined
     7cc:	84 02       	muls	r24, r20
     7ce:	db 0c       	add	r13, r11
     7d0:	de c2       	rjmp	.+1468   	; 0xd8e <u8g2_add_vector_x+0x32>
     7d2:	d7 48       	sbci	r29, 0x87	; 135
     7d4:	22 16       	cp	r2, r18
     7d6:	f1 93       	st	Z+, r31	; undefined
     7d8:	84 02       	muls	r24, r20
     7da:	dc 0b       	sbc	r29, r28
     7dc:	de c2       	rjmp	.+1468   	; 0xd9a <u8g2_font_decode_len+0xa>
     7de:	8f ce       	rjmp	.-738    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     7e0:	22 7e       	andi	r18, 0xE2	; 226
     7e2:	92 50       	subi	r25, 0x02	; 2
     7e4:	00 dd       	rcall	.-1536   	; 0x1e6 <__trampolines_end+0x17e>
     7e6:	0f de       	rcall	.-994    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     7e8:	c2 df       	rcall	.-124    	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
     7ea:	48 0e       	add	r4, r24
     7ec:	11 91       	ld	r17, Z+
     7ee:	24 92       	xch	Z, r2
     7f0:	d0 50       	subi	r29, 0x00	; 0
     7f2:	27 00       	.word	0x0027	; ????
     7f4:	de 0d       	add	r29, r14
     7f6:	ce c2       	rjmp	.+1436   	; 0xd94 <u8g2_font_decode_len+0x4>
     7f8:	87 50       	subi	r24, 0x07	; 7
     7fa:	58 11       	cpse	r21, r8
     7fc:	31 5d       	subi	r19, 0xD1	; 209
     7fe:	84 42       	sbci	r24, 0x24	; 36
     800:	00 df       	rcall	.-512    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
     802:	0e d6       	rcall	.+3100   	; 0x1420 <u8g2_DrawHVLine+0x14>
     804:	c2 cf       	rjmp	.-124    	; 0x78a <__EEPROM_REGION_LENGTH__+0x38a>
     806:	48 a2       	std	Y+32, r4	; 0x20
     808:	4b 48       	sbci	r20, 0x8B	; 139
     80a:	a2 c4       	rjmp	.+2372   	; 0x1150 <u8g2_DrawGlyph>
     80c:	8b 04       	cpc	r8, r11
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	0f de       	rcall	.-994    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     812:	c2 8f       	std	Z+26, r28	; 0x1a
     814:	54 1a       	sub	r5, r20
     816:	07 91       	elpm	r16, Z+
     818:	24 42       	sbci	r18, 0x24	; 36
     81a:	c9 89       	ldd	r28, Y+17	; 0x11
     81c:	24 29       	or	r18, r4
     81e:	e1 0f       	add	r30, r17
     820:	de c2       	rjmp	.+1468   	; 0xdde <u8g2_font_decode_len+0x4e>
     822:	a7 4c       	sbci	r26, 0xC7	; 199
     824:	18 07       	cpc	r17, r24
     826:	91 24       	eor	r9, r1
     828:	42 c9       	rjmp	.-3452   	; 0xfffffaae <__eeprom_end+0xff7efaae>
     82a:	89 24       	eor	r8, r9
     82c:	29 e2       	ldi	r18, 0x29	; 41
     82e:	0f de       	rcall	.-994    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     830:	c2 97       	sbiw	r24, 0x32	; 50
     832:	8c 94 0e 21 	jmp	0x20421c	; 0x20421c <__TEXT_REGION_LENGTH__+0x1fc21c>
     836:	49 84       	ldd	r4, Y+9	; 0x09
     838:	92 13       	cpse	r25, r18
     83a:	49 52       	subi	r20, 0x29	; 41
     83c:	e3 10       	cpse	r14, r3
     83e:	de c2       	rjmp	.+1468   	; 0xdfc <u8g2_font_decode_len+0x6c>
     840:	57 4a       	sbci	r21, 0xA7	; 167
     842:	25 14       	cp	r2, r5
     844:	87 90       	elpm	r8, Z+
     846:	24 42       	sbci	r18, 0x24	; 36
     848:	c9 89       	ldd	r28, Y+17	; 0x11
     84a:	24 29       	or	r18, r4
     84c:	e4 0d       	add	r30, r4
     84e:	d6 c2       	rjmp	.+1452   	; 0xdfc <u8g2_font_decode_len+0x6c>
     850:	8f ee       	ldi	r24, 0xEF	; 239
     852:	24 89       	ldd	r18, Z+20	; 0x14
     854:	50 72       	andi	r21, 0x20	; 32
     856:	22 49       	sbci	r18, 0x92	; 146
     858:	0a e5       	ldi	r16, 0x5A	; 90
     85a:	10 de       	rcall	.-992    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     85c:	c2 97       	sbiw	r24, 0x32	; 50
     85e:	4c 12       	cpse	r4, r28
     860:	93 83       	std	Z+3, r25	; 0x03
     862:	48 12       	cpse	r4, r24
     864:	a1 e4       	ldi	r26, 0x41	; 65
     866:	44 92       	xch	Z, r4
     868:	14 e6       	ldi	r17, 0x64	; 100
     86a:	0e be       	out	0x3e, r0	; 62
     86c:	c2 cf       	rjmp	.-124    	; 0x7f2 <__EEPROM_REGION_LENGTH__+0x3f2>
     86e:	41 12       	cpse	r4, r17
     870:	92 44       	sbci	r25, 0x42	; 66
     872:	2c a2       	std	Y+36, r2	; 0x24
     874:	88 e4       	ldi	r24, 0x48	; 72
     876:	00 e7       	ldi	r16, 0x70	; 112
     878:	0c ce       	rjmp	.-1000   	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     87a:	ba 0f       	add	r27, r26
     87c:	45 44       	sbci	r20, 0x45	; 69
     87e:	d4 24       	eor	r13, r4
     880:	a1 a9       	ldd	r26, Z+49	; 0x31
     882:	01 e8       	ldi	r16, 0x81	; 129
     884:	10 de       	rcall	.-992    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     886:	c2 8f       	std	Z+26, r28	; 0x1a
     888:	54 1a       	sub	r5, r20
     88a:	07 51       	subi	r16, 0x17	; 23
     88c:	44 a4       	ldd	r4, Z+44	; 0x2c
     88e:	c3 50       	subi	r28, 0x03	; 3
     890:	24 a1       	ldd	r18, Z+36	; 0x24
     892:	00 e9       	ldi	r16, 0x90	; 144
     894:	10 de       	rcall	.-992    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     896:	c2 a7       	std	Z+42, r28	; 0x2a
     898:	4c 18       	sub	r4, r12
     89a:	07 51       	subi	r16, 0x17	; 23
     89c:	44 a4       	ldd	r4, Z+44	; 0x2c
     89e:	c3 50       	subi	r28, 0x03	; 3
     8a0:	24 a1       	ldd	r18, Z+36	; 0x24
     8a2:	00 ea       	ldi	r16, 0xA0	; 160
     8a4:	10 de       	rcall	.-992    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     8a6:	c2 97       	sbiw	r24, 0x32	; 50
     8a8:	8c 94 0e a1 	jmp	0x21421c	; 0x21421c <__TEXT_REGION_LENGTH__+0x20c21c>
     8ac:	88 48       	sbci	r24, 0x88	; 136
     8ae:	87 a1       	ldd	r24, Z+39	; 0x27
     8b0:	48 42       	sbci	r20, 0x28	; 40
     8b2:	01 eb       	ldi	r16, 0xB1	; 177
     8b4:	0e d6       	rcall	.+3100   	; 0x14d2 <u8g2_DrawHVLine+0xc6>
     8b6:	c2 8f       	std	Z+26, r28	; 0x1a
     8b8:	ee 14       	cp	r14, r14
     8ba:	11 e9       	ldi	r17, 0x91	; 145
     8bc:	30 14       	cp	r3, r0
     8be:	49 28       	or	r4, r9
     8c0:	00 ec       	ldi	r16, 0xC0	; 192
     8c2:	0b de       	rcall	.-1002   	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     8c4:	c2 8f       	std	Z+26, r28	; 0x1a
     8c6:	54 1a       	sub	r5, r20
     8c8:	07 0d       	add	r16, r7
     8ca:	f5 64       	ori	r31, 0x45	; 69
     8cc:	ed 0b       	sbc	r30, r29
     8ce:	de c2       	rjmp	.+1468   	; 0xe8c <u8g2_font_decode_glyph+0x1a>
     8d0:	9f 62       	ori	r25, 0x2F	; 47
     8d2:	1c 36       	cpi	r17, 0x6C	; 108
     8d4:	d4 93       	xch	Z, r29
     8d6:	01 ee       	ldi	r16, 0xE1	; 225
     8d8:	0c de       	rcall	.-1000   	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     8da:	c2 97       	sbiw	r24, 0x32	; 50
     8dc:	8c 94 0e 19 	jmp	0x20321c	; 0x20321c <__TEXT_REGION_LENGTH__+0x1fb21c>
     8e0:	ea c9       	rjmp	.-3116   	; 0xfffffcb6 <__eeprom_end+0xff7efcb6>
     8e2:	00 ef       	ldi	r16, 0xF0	; 240
     8e4:	0b d6       	rcall	.+3094   	; 0x14fc <u8g2_DrawHVLine+0xf0>
     8e6:	c2 87       	std	Z+10, r28	; 0x0a
     8e8:	44 3b       	cpi	r20, 0xB4	; 180
     8ea:	64 a8       	ldd	r6, Z+52	; 0x34
     8ec:	27 03       	mulsu	r18, r23
     8ee:	f0 10       	cpse	r15, r0
     8f0:	d6 c2       	rjmp	.+1452   	; 0xe9e <u8g2_font_decode_glyph+0x2c>
     8f2:	87 44       	sbci	r24, 0x47	; 71
     8f4:	34 92       	xch	Z, r3
     8f6:	04 47       	sbci	r16, 0x74	; 116
     8f8:	12 12       	cpse	r1, r18
     8fa:	27 09       	sbc	r18, r7
     8fc:	05 00       	.word	0x0005	; ????
     8fe:	f1 0e       	add	r15, r17
     900:	de c2       	rjmp	.+1468   	; 0xebe <u8g2_font_decode_glyph+0x4c>
     902:	57 4a       	sbci	r21, 0xA7	; 167
     904:	25 14       	cp	r2, r5
     906:	97 48       	sbci	r25, 0x87	; 135
     908:	26 24       	eor	r2, r6
     90a:	9e 04       	cpc	r9, r14
     90c:	f2 0e       	add	r15, r18
     90e:	de c2       	rjmp	.+1468   	; 0xecc <u8g2_font_decode_glyph+0x5a>
     910:	8f 54       	subi	r24, 0x4F	; 79
     912:	1a 07       	cpc	r17, r26
     914:	51 44       	sbci	r21, 0x41	; 65
     916:	3c 49       	sbci	r19, 0x9C	; 156
     918:	28 00       	.word	0x0028	; ????
     91a:	f3 0e       	add	r15, r19
     91c:	de c2       	rjmp	.+1468   	; 0xeda <u8g2_font_decode_glyph+0x68>
     91e:	a7 4c       	sbci	r26, 0xC7	; 199
     920:	18 07       	cpc	r17, r24
     922:	51 44       	sbci	r21, 0x41	; 65
     924:	3c 49       	sbci	r19, 0x9C	; 156
     926:	28 00       	.word	0x0028	; ????
     928:	f4 0e       	add	r15, r20
     92a:	de c2       	rjmp	.+1468   	; 0xee8 <u8g2_font_decode_glyph+0x76>
     92c:	97 8c       	ldd	r9, Z+31	; 0x1f
     92e:	94 0e       	add	r9, r20
     930:	a1 88       	ldd	r10, Z+17	; 0x11
     932:	78 92       	.word	0x9278	; ????
     934:	50 00       	.word	0x0050	; ????
     936:	f5 0f       	add	r31, r21
     938:	de c2       	rjmp	.+1468   	; 0xef6 <u8g2_font_decode_glyph+0x84>
     93a:	57 4a       	sbci	r21, 0xA7	; 167
     93c:	25 14       	cp	r2, r5
     93e:	87 50       	subi	r24, 0x07	; 7
     940:	44 3c       	cpi	r20, 0xC4	; 196
     942:	49 28       	or	r4, r9
     944:	00 f6       	brcc	.-128    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     946:	0c d6       	rcall	.+3096   	; 0x1560 <u8g2_is_intersection_decision_tree+0x22>
     948:	c2 8f       	std	Z+26, r28	; 0x1a
     94a:	ee 14       	cp	r14, r14
     94c:	11 4f       	sbci	r17, 0xF1	; 241
     94e:	12 0a       	sbc	r1, r18
     950:	00 f7       	brcc	.-64     	; 0x912 <__stack+0x13>
     952:	0d c6       	rjmp	.+3098   	; 0x156e <u8g2_is_intersection_decision_tree+0x30>
     954:	c2 97       	sbiw	r24, 0x32	; 50
     956:	50 0e       	add	r5, r16
     958:	39 d4       	rcall	.+2162   	; 0x11cc <u8g2_DrawGlyph+0x7c>
     95a:	21 42       	sbci	r18, 0x21	; 33
     95c:	11 00       	.word	0x0011	; ????
     95e:	f8 0e       	add	r15, r24
     960:	ce be       	out	0x3e, r12	; 62
     962:	6f 84       	ldd	r6, Y+15	; 0x0f
     964:	22 a2       	std	Z+34, r2	; 0x22
     966:	1c 2a       	or	r1, r28
     968:	24 09       	sbc	r18, r4
     96a:	25 0a       	sbc	r2, r21
     96c:	f9 0c       	add	r15, r9
     96e:	de c2       	rjmp	.+1468   	; 0xf2c <u8g2_font_decode_glyph+0xba>
     970:	8f 54       	subi	r24, 0x4F	; 79
     972:	1a 87       	std	Y+10, r17	; 0x0a
     974:	88 f8       	.word	0xf888	; ????
     976:	32 51       	subi	r19, 0x12	; 18
     978:	fa 0c       	add	r15, r10
     97a:	de c2       	rjmp	.+1468   	; 0xf38 <u8g2_font_decode_glyph+0xc6>
     97c:	a7 4c       	sbci	r26, 0xC7	; 199
     97e:	18 87       	std	Y+8, r17	; 0x08
     980:	88 f8       	.word	0xf888	; ????
     982:	32 51       	subi	r19, 0x12	; 18
     984:	fb 0c       	add	r15, r11
     986:	de c2       	rjmp	.+1468   	; 0xf44 <u8g2_font_decode_glyph+0xd2>
     988:	97 8c       	ldd	r9, Z+31	; 0x1f
     98a:	94 2e       	mov	r9, r20
     98c:	e2 cb       	rjmp	.-2108   	; 0x152 <__trampolines_end+0xea>
     98e:	44 01       	movw	r8, r8
     990:	fc 0a       	sbc	r15, r28
     992:	d6 c2       	rjmp	.+1452   	; 0xf40 <u8g2_font_decode_glyph+0xce>
     994:	8f ce       	rjmp	.-738    	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
     996:	22 be       	out	0x32, r2	; 50
     998:	4c 14       	cp	r4, r12
     99a:	fd 15       	cp	r31, r13
     99c:	ee ba       	out	0x1e, r14	; 30
     99e:	a7 4c       	sbci	r26, 0xC7	; 199
     9a0:	18 87       	std	Y+8, r17	; 0x08
     9a2:	c8 66       	ori	r28, 0x68	; 104
     9a4:	11 49       	sbci	r17, 0x91	; 145
     9a6:	48 12       	cpse	r4, r24
     9a8:	9b 49       	sbci	r25, 0x9B	; 155
     9aa:	43 11       	cpse	r20, r3
     9ac:	d1 0c       	add	r13, r1
     9ae:	00 fe       	sbrs	r0, 0
     9b0:	0f e6       	ldi	r16, 0x6F	; 111
     9b2:	ba 87       	std	Y+10, r27	; 0x0a
     9b4:	50 8b       	std	Z+16, r21	; 0x10
     9b6:	64 42       	sbci	r22, 0x24	; 36
     9b8:	62 aa       	std	Z+50, r6	; 0x32
     9ba:	50 14       	cp	r5, r0
     9bc:	85 00       	.word	0x0085	; ????
     9be:	ff 12       	cpse	r15, r31
     9c0:	e6 ba       	out	0x16, r14	; 22
     9c2:	8f ce       	rjmp	.-738    	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
     9c4:	b2 59       	subi	r27, 0x92	; 146
     9c6:	44 12       	cpse	r4, r20
     9c8:	92 c4       	rjmp	.+2340   	; 0x12ee <u8g2_UpdateRefHeight+0x48>
     9ca:	66 d2       	rcall	.+1228   	; 0xe98 <u8g2_font_decode_glyph+0x26>
     9cc:	50 44       	sbci	r21, 0x40	; 64
     9ce:	34 03       	mulsu	r19, r20
     9d0:	00 00       	nop
     9d2:	00 04       	cpc	r0, r0
     9d4:	ff ff       	.word	0xffff	; ????
	...

000009d8 <__ctors_end>:
     9d8:	11 24       	eor	r1, r1
     9da:	1f be       	out	0x3f, r1	; 63
     9dc:	cf ef       	ldi	r28, 0xFF	; 255
     9de:	d8 e0       	ldi	r29, 0x08	; 8
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	cd bf       	out	0x3d, r28	; 61

000009e4 <__do_copy_data>:
     9e4:	11 e0       	ldi	r17, 0x01	; 1
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b1 e0       	ldi	r27, 0x01	; 1
     9ea:	e6 e7       	ldi	r30, 0x76	; 118
     9ec:	f0 e2       	ldi	r31, 0x20	; 32
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__do_copy_data+0x10>
     9f0:	05 90       	lpm	r0, Z+
     9f2:	0d 92       	st	X+, r0
     9f4:	a8 38       	cpi	r26, 0x88	; 136
     9f6:	b1 07       	cpc	r27, r17
     9f8:	d9 f7       	brne	.-10     	; 0x9f0 <__do_copy_data+0xc>

000009fa <__do_clear_bss>:
     9fa:	22 e0       	ldi	r18, 0x02	; 2
     9fc:	a8 e8       	ldi	r26, 0x88	; 136
     9fe:	b1 e0       	ldi	r27, 0x01	; 1
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <.do_clear_bss_start>

00000a02 <.do_clear_bss_loop>:
     a02:	1d 92       	st	X+, r1

00000a04 <.do_clear_bss_start>:
     a04:	ae 33       	cpi	r26, 0x3E	; 62
     a06:	b2 07       	cpc	r27, r18
     a08:	e1 f7       	brne	.-8      	; 0xa02 <.do_clear_bss_loop>
     a0a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <main>
     a0e:	0c 94 39 10 	jmp	0x2072	; 0x2072 <_exit>

00000a12 <__bad_interrupt>:
     a12:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a16 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     a1a:	dc 01       	movw	r26, r24
     a1c:	ed 91       	ld	r30, X+
     a1e:	fc 91       	ld	r31, X
     a20:	11 97       	sbiw	r26, 0x01	; 1
     a22:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     a24:	92 96       	adiw	r26, 0x22	; 34
     a26:	0d 91       	ld	r16, X+
     a28:	1c 91       	ld	r17, X
     a2a:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     a2c:	62 9f       	mul	r22, r18
     a2e:	b0 01       	movw	r22, r0
     a30:	11 24       	eor	r1, r1
  offset *= 8;
     a32:	66 0f       	add	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	66 0f       	add	r22, r22
     a38:	77 1f       	adc	r23, r23
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
  ptr += offset;
     a3e:	06 0f       	add	r16, r22
     a40:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <u8x8_DrawTile>
}
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     a5c:	dc 01       	movw	r26, r24
     a5e:	94 96       	adiw	r26, 0x24	; 36
     a60:	fc 90       	ld	r15, X
     a62:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     a64:	95 96       	adiw	r26, 0x25	; 37
     a66:	dc 91       	ld	r29, X
     a68:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     a6a:	ed 91       	ld	r30, X+
     a6c:	fc 91       	ld	r31, X
     a6e:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     a70:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     a72:	4d 2f       	mov	r20, r29
     a74:	6c 2f       	mov	r22, r28
     a76:	c8 01       	movw	r24, r16
     a78:	0e 94 0b 05 	call	0xa16	; 0xa16 <u8g2_send_tile_row>
    src_row++;
     a7c:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     a7e:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     a80:	cf 15       	cp	r28, r15
     a82:	10 f4       	brcc	.+4      	; 0xa88 <u8g2_send_buffer+0x3a>
     a84:	de 15       	cp	r29, r14
     a86:	a8 f3       	brcs	.-22     	; 0xa72 <u8g2_send_buffer+0x24>
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	08 95       	ret

00000a96 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     a96:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     a98:	a0 81       	ld	r26, Z
     a9a:	b1 81       	ldd	r27, Z+1	; 0x01
     a9c:	50 96       	adiw	r26, 0x10	; 16
     a9e:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     aa0:	44 a1       	ldd	r20, Z+36	; 0x24
     aa2:	94 9f       	mul	r25, r20
     aa4:	a0 01       	movw	r20, r0
     aa6:	11 24       	eor	r1, r1
  cnt *= 8;
     aa8:	44 0f       	add	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	44 0f       	add	r20, r20
     ab2:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	82 a1       	ldd	r24, Z+34	; 0x22
     aba:	93 a1       	ldd	r25, Z+35	; 0x23
     abc:	0e 94 32 10 	call	0x2064	; 0x2064 <memset>
     ac0:	08 95       	ret

00000ac2 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     ac8:	0e 94 27 05 	call	0xa4e	; 0xa4e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     acc:	ce 01       	movw	r24, r28
     ace:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <u8x8_RefreshDisplay>
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <u8g2_m_8_4_1>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[64];
  *page_cnt = 1;
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
  return buf;
  #endif
}
     ade:	88 e8       	ldi	r24, 0x88	; 136
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	08 95       	ret

00000ae4 <u8g2_Setup_sh1106_64x32_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 */
/* sh1106 1 */
void u8g2_Setup_sh1106_64x32_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	7c 01       	movw	r14, r24
     afc:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_64x32, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     afe:	89 01       	movw	r16, r18
     b00:	9a 01       	movw	r18, r20
     b02:	4d ef       	ldi	r20, 0xFD	; 253
     b04:	5c e0       	ldi	r21, 0x0C	; 12
     b06:	61 e5       	ldi	r22, 0x51	; 81
     b08:	7e e0       	ldi	r23, 0x0E	; 14
     b0a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <u8x8_Setup>
  buf = u8g2_m_8_4_1(&tile_buf_height);
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 6c 05 	call	0xad8	; 0xad8 <u8g2_m_8_4_1>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     b16:	86 01       	movw	r16, r12
     b18:	2f ed       	ldi	r18, 0xDF	; 223
     b1a:	3a e0       	ldi	r19, 0x0A	; 10
     b1c:	49 81       	ldd	r20, Y+1	; 0x01
     b1e:	bc 01       	movw	r22, r24
     b20:	c7 01       	movw	r24, r14
     b22:	0e 94 13 0c 	call	0x1826	; 0x1826 <u8g2_SetupBuffer>
}
     b26:	0f 90       	pop	r0
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     b3a:	86 0f       	add	r24, r22
     b3c:	91 1d       	adc	r25, r1
     b3e:	fc 01       	movw	r30, r24
     b40:	84 91       	lpm	r24, Z
     b42:	08 95       	ret

00000b44 <u8g2_font_get_word>:
     b44:	fc 01       	movw	r30, r24
     b46:	e6 0f       	add	r30, r22
     b48:	f1 1d       	adc	r31, r1
     b4a:	84 91       	lpm	r24, Z
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	31 96       	adiw	r30, 0x01	; 1
     b50:	98 2f       	mov	r25, r24
     b52:	88 27       	eor	r24, r24
     b54:	e4 91       	lpm	r30, Z
     b56:	8e 0f       	add	r24, r30
     b58:	91 1d       	adc	r25, r1
     b5a:	08 95       	ret

00000b5c <u8g2_font_calc_vref_font>:
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	08 95       	ret

00000b62 <u8g2_font_calc_vref_top>:
     b62:	80 59       	subi	r24, 0x90	; 144
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	fc 01       	movw	r30, r24
     b68:	80 81       	ld	r24, Z
     b6a:	08 2e       	mov	r0, r24
     b6c:	00 0c       	add	r0, r0
     b6e:	99 0b       	sbc	r25, r25
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	08 95       	ret

00000b74 <u8g2_read_font_info>:
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	8b 01       	movw	r16, r22
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	c8 01       	movw	r24, r16
     b84:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     b88:	88 83       	st	Y, r24
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	62 e0       	ldi	r22, 0x02	; 2
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     b9c:	8a 83       	std	Y+2, r24	; 0x02
     b9e:	63 e0       	ldi	r22, 0x03	; 3
     ba0:	c8 01       	movw	r24, r16
     ba2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     ba6:	8b 83       	std	Y+3, r24	; 0x03
     ba8:	64 e0       	ldi	r22, 0x04	; 4
     baa:	c8 01       	movw	r24, r16
     bac:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bb0:	8c 83       	std	Y+4, r24	; 0x04
     bb2:	65 e0       	ldi	r22, 0x05	; 5
     bb4:	c8 01       	movw	r24, r16
     bb6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bba:	8d 83       	std	Y+5, r24	; 0x05
     bbc:	66 e0       	ldi	r22, 0x06	; 6
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bc4:	8e 83       	std	Y+6, r24	; 0x06
     bc6:	67 e0       	ldi	r22, 0x07	; 7
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bce:	8f 83       	std	Y+7, r24	; 0x07
     bd0:	68 e0       	ldi	r22, 0x08	; 8
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bd8:	88 87       	std	Y+8, r24	; 0x08
     bda:	69 e0       	ldi	r22, 0x09	; 9
     bdc:	c8 01       	movw	r24, r16
     bde:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     be2:	89 87       	std	Y+9, r24	; 0x09
     be4:	6a e0       	ldi	r22, 0x0A	; 10
     be6:	c8 01       	movw	r24, r16
     be8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bec:	8a 87       	std	Y+10, r24	; 0x0a
     bee:	6b e0       	ldi	r22, 0x0B	; 11
     bf0:	c8 01       	movw	r24, r16
     bf2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     bf6:	8b 87       	std	Y+11, r24	; 0x0b
     bf8:	6c e0       	ldi	r22, 0x0C	; 12
     bfa:	c8 01       	movw	r24, r16
     bfc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     c00:	8c 87       	std	Y+12, r24	; 0x0c
     c02:	6d e0       	ldi	r22, 0x0D	; 13
     c04:	c8 01       	movw	r24, r16
     c06:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     c0a:	8d 87       	std	Y+13, r24	; 0x0d
     c0c:	6e e0       	ldi	r22, 0x0E	; 14
     c0e:	c8 01       	movw	r24, r16
     c10:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     c14:	8e 87       	std	Y+14, r24	; 0x0e
     c16:	6f e0       	ldi	r22, 0x0F	; 15
     c18:	c8 01       	movw	r24, r16
     c1a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     c1e:	8f 87       	std	Y+15, r24	; 0x0f
     c20:	60 e1       	ldi	r22, 0x10	; 16
     c22:	c8 01       	movw	r24, r16
     c24:	0e 94 9d 05 	call	0xb3a	; 0xb3a <u8g2_font_get_byte>
     c28:	88 8b       	std	Y+16, r24	; 0x10
     c2a:	61 e1       	ldi	r22, 0x11	; 17
     c2c:	c8 01       	movw	r24, r16
     c2e:	0e 94 a2 05 	call	0xb44	; 0xb44 <u8g2_font_get_word>
     c32:	9a 8b       	std	Y+18, r25	; 0x12
     c34:	89 8b       	std	Y+17, r24	; 0x11
     c36:	63 e1       	ldi	r22, 0x13	; 19
     c38:	c8 01       	movw	r24, r16
     c3a:	0e 94 a2 05 	call	0xb44	; 0xb44 <u8g2_font_get_word>
     c3e:	9c 8b       	std	Y+20, r25	; 0x14
     c40:	8b 8b       	std	Y+19, r24	; 0x13
     c42:	65 e1       	ldi	r22, 0x15	; 21
     c44:	c8 01       	movw	r24, r16
     c46:	0e 94 a2 05 	call	0xb44	; 0xb44 <u8g2_font_get_word>
     c4a:	9e 8b       	std	Y+22, r25	; 0x16
     c4c:	8d 8b       	std	Y+21, r24	; 0x15
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <u8g2_font_decode_get_unsigned_bits>:
     c58:	dc 01       	movw	r26, r24
     c5a:	1a 96       	adiw	r26, 0x0a	; 10
     c5c:	4c 91       	ld	r20, X
     c5e:	1a 97       	sbiw	r26, 0x0a	; 10
     c60:	ed 91       	ld	r30, X+
     c62:	fc 91       	ld	r31, X
     c64:	11 97       	sbiw	r26, 0x01	; 1
     c66:	24 91       	lpm	r18, Z
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	04 2e       	mov	r0, r20
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <u8g2_font_decode_get_unsigned_bits+0x1a>
     c6e:	35 95       	asr	r19
     c70:	27 95       	ror	r18
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <u8g2_font_decode_get_unsigned_bits+0x16>
     c76:	82 2f       	mov	r24, r18
     c78:	94 2f       	mov	r25, r20
     c7a:	96 0f       	add	r25, r22
     c7c:	98 30       	cpi	r25, 0x08	; 8
     c7e:	80 f0       	brcs	.+32     	; 0xca0 <u8g2_font_decode_get_unsigned_bits+0x48>
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	84 1b       	sub	r24, r20
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	fc 93       	st	X, r31
     c8a:	ee 93       	st	-X, r30
     c8c:	e4 91       	lpm	r30, Z
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <u8g2_font_decode_get_unsigned_bits+0x3e>
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	8a 95       	dec	r24
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <u8g2_font_decode_get_unsigned_bits+0x3a>
     c9a:	8e 2f       	mov	r24, r30
     c9c:	82 2b       	or	r24, r18
     c9e:	98 50       	subi	r25, 0x08	; 8
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <u8g2_font_decode_get_unsigned_bits+0x52>
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	6a 95       	dec	r22
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <u8g2_font_decode_get_unsigned_bits+0x4e>
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	1a 96       	adiw	r26, 0x0a	; 10
     cb2:	9c 93       	st	X, r25
     cb4:	82 23       	and	r24, r18
     cb6:	08 95       	ret

00000cb8 <u8g2_font_setup_decode>:
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
     cc2:	8c 01       	movw	r16, r24
     cc4:	08 5b       	subi	r16, 0xB8	; 184
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	f8 01       	movw	r30, r16
     cca:	71 83       	std	Z+1, r23	; 0x01
     ccc:	60 83       	st	Z, r22
     cce:	12 86       	std	Z+10, r1	; 0x0a
     cd0:	73 96       	adiw	r30, 0x13	; 19
     cd2:	60 81       	ld	r22, Z
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 2c 06 	call	0xc58	; 0xc58 <u8g2_font_decode_get_unsigned_bits>
     cda:	f8 01       	movw	r30, r16
     cdc:	80 87       	std	Z+8, r24	; 0x08
     cde:	74 96       	adiw	r30, 0x14	; 20
     ce0:	60 81       	ld	r22, Z
     ce2:	c8 01       	movw	r24, r16
     ce4:	0e 94 2c 06 	call	0xc58	; 0xc58 <u8g2_font_decode_get_unsigned_bits>
     ce8:	f8 01       	movw	r30, r16
     cea:	81 87       	std	Z+9, r24	; 0x09
     cec:	bc 96       	adiw	r30, 0x2c	; 44
     cee:	80 81       	ld	r24, Z
     cf0:	f8 01       	movw	r30, r16
     cf2:	84 87       	std	Z+12, r24	; 0x0c
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	81 11       	cpse	r24, r1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	c8 5b       	subi	r28, 0xB8	; 184
     cfc:	df 4f       	sbci	r29, 0xFF	; 255
     cfe:	9d 87       	std	Y+13, r25	; 0x0d
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <u8g2_font_decode_get_signed_bits>:
     d0a:	cf 93       	push	r28
     d0c:	c6 2f       	mov	r28, r22
     d0e:	0e 94 2c 06 	call	0xc58	; 0xc58 <u8g2_font_decode_get_unsigned_bits>
     d12:	c1 50       	subi	r28, 0x01	; 1
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <u8g2_font_decode_get_signed_bits+0x14>
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	ca 95       	dec	r28
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <u8g2_font_decode_get_signed_bits+0x10>
     d22:	82 1b       	sub	r24, r18
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <u8g2_add_vector_y>:
     d28:	21 30       	cpi	r18, 0x01	; 1
     d2a:	49 f0       	breq	.+18     	; 0xd3e <u8g2_add_vector_y+0x16>
     d2c:	18 f0       	brcs	.+6      	; 0xd34 <u8g2_add_vector_y+0xc>
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	59 f0       	breq	.+22     	; 0xd48 <u8g2_add_vector_y+0x20>
     d32:	0f c0       	rjmp	.+30     	; 0xd52 <u8g2_add_vector_y+0x2a>
     d34:	84 0f       	add	r24, r20
     d36:	91 1d       	adc	r25, r1
     d38:	47 fd       	sbrc	r20, 7
     d3a:	9a 95       	dec	r25
     d3c:	08 95       	ret
     d3e:	86 0f       	add	r24, r22
     d40:	91 1d       	adc	r25, r1
     d42:	67 fd       	sbrc	r22, 7
     d44:	9a 95       	dec	r25
     d46:	08 95       	ret
     d48:	84 1b       	sub	r24, r20
     d4a:	91 09       	sbc	r25, r1
     d4c:	47 fd       	sbrc	r20, 7
     d4e:	93 95       	inc	r25
     d50:	08 95       	ret
     d52:	86 1b       	sub	r24, r22
     d54:	91 09       	sbc	r25, r1
     d56:	67 fd       	sbrc	r22, 7
     d58:	93 95       	inc	r25
     d5a:	08 95       	ret

00000d5c <u8g2_add_vector_x>:
     d5c:	21 30       	cpi	r18, 0x01	; 1
     d5e:	49 f0       	breq	.+18     	; 0xd72 <u8g2_add_vector_x+0x16>
     d60:	18 f0       	brcs	.+6      	; 0xd68 <u8g2_add_vector_x+0xc>
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	59 f0       	breq	.+22     	; 0xd7c <u8g2_add_vector_x+0x20>
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <u8g2_add_vector_x+0x2a>
     d68:	86 0f       	add	r24, r22
     d6a:	91 1d       	adc	r25, r1
     d6c:	67 fd       	sbrc	r22, 7
     d6e:	9a 95       	dec	r25
     d70:	08 95       	ret
     d72:	84 1b       	sub	r24, r20
     d74:	91 09       	sbc	r25, r1
     d76:	47 fd       	sbrc	r20, 7
     d78:	93 95       	inc	r25
     d7a:	08 95       	ret
     d7c:	86 1b       	sub	r24, r22
     d7e:	91 09       	sbc	r25, r1
     d80:	67 fd       	sbrc	r22, 7
     d82:	93 95       	inc	r25
     d84:	08 95       	ret
     d86:	84 0f       	add	r24, r20
     d88:	91 1d       	adc	r25, r1
     d8a:	47 fd       	sbrc	r20, 7
     d8c:	9a 95       	dec	r25
     d8e:	08 95       	ret

00000d90 <u8g2_font_decode_len>:
     d90:	6f 92       	push	r6
     d92:	7f 92       	push	r7
     d94:	8f 92       	push	r8
     d96:	9f 92       	push	r9
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	7c 01       	movw	r14, r24
     dae:	16 2f       	mov	r17, r22
     db0:	74 2e       	mov	r7, r20
     db2:	fc 01       	movw	r30, r24
     db4:	e8 5b       	subi	r30, 0xB8	; 184
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	96 80       	ldd	r9, Z+6	; 0x06
     dba:	d7 81       	ldd	r29, Z+7	; 0x07
     dbc:	f7 01       	movw	r30, r14
     dbe:	e8 5b       	subi	r30, 0xB8	; 184
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	c0 85       	ldd	r28, Z+8	; 0x08
     dc4:	c9 19       	sub	r28, r9
     dc6:	1c 17       	cp	r17, r28
     dc8:	10 f0       	brcs	.+4      	; 0xdce <u8g2_font_decode_len+0x3e>
     dca:	6c 2e       	mov	r6, r28
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <u8g2_font_decode_len+0x40>
     dce:	61 2e       	mov	r6, r17
     dd0:	f7 01       	movw	r30, r14
     dd2:	e8 5b       	subi	r30, 0xB8	; 184
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	c4 80       	ldd	r12, Z+4	; 0x04
     dd8:	d5 80       	ldd	r13, Z+5	; 0x05
     dda:	06 85       	ldd	r16, Z+14	; 0x0e
     ddc:	8d 2e       	mov	r8, r29
     dde:	20 2f       	mov	r18, r16
     de0:	4d 2f       	mov	r20, r29
     de2:	69 2d       	mov	r22, r9
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <u8g2_add_vector_x>
     dec:	5c 01       	movw	r10, r24
     dee:	20 2f       	mov	r18, r16
     df0:	4d 2f       	mov	r20, r29
     df2:	69 2d       	mov	r22, r9
     df4:	c6 01       	movw	r24, r12
     df6:	0e 94 94 06 	call	0xd28	; 0xd28 <u8g2_add_vector_y>
     dfa:	77 20       	and	r7, r7
     dfc:	71 f0       	breq	.+28     	; 0xe1a <u8g2_font_decode_len+0x8a>
     dfe:	f7 01       	movw	r30, r14
     e00:	e8 5b       	subi	r30, 0xB8	; 184
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	24 85       	ldd	r18, Z+12	; 0x0c
     e06:	bc 96       	adiw	r30, 0x2c	; 44
     e08:	20 83       	st	Z, r18
     e0a:	26 2d       	mov	r18, r6
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	ac 01       	movw	r20, r24
     e10:	b5 01       	movw	r22, r10
     e12:	c7 01       	movw	r24, r14
     e14:	0e 94 06 0a 	call	0x140c	; 0x140c <u8g2_DrawHVLine>
     e18:	10 c0       	rjmp	.+32     	; 0xe3a <u8g2_font_decode_len+0xaa>
     e1a:	f7 01       	movw	r30, r14
     e1c:	e8 5b       	subi	r30, 0xB8	; 184
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	23 85       	ldd	r18, Z+11	; 0x0b
     e22:	21 11       	cpse	r18, r1
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <u8g2_font_decode_len+0xaa>
     e26:	25 85       	ldd	r18, Z+13	; 0x0d
     e28:	bc 96       	adiw	r30, 0x2c	; 44
     e2a:	20 83       	st	Z, r18
     e2c:	26 2d       	mov	r18, r6
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	ac 01       	movw	r20, r24
     e32:	b5 01       	movw	r22, r10
     e34:	c7 01       	movw	r24, r14
     e36:	0e 94 06 0a 	call	0x140c	; 0x140c <u8g2_DrawHVLine>
     e3a:	1c 17       	cp	r17, r28
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <u8g2_font_decode_len+0xb6>
     e3e:	1c 1b       	sub	r17, r28
     e40:	df 5f       	subi	r29, 0xFF	; 255
     e42:	91 2c       	mov	r9, r1
     e44:	bb cf       	rjmp	.-138    	; 0xdbc <u8g2_font_decode_len+0x2c>
     e46:	61 2f       	mov	r22, r17
     e48:	69 0d       	add	r22, r9
     e4a:	f7 01       	movw	r30, r14
     e4c:	e8 5b       	subi	r30, 0xB8	; 184
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	66 83       	std	Z+6, r22	; 0x06
     e52:	87 82       	std	Z+7, r8	; 0x07
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	7f 90       	pop	r7
     e6e:	6f 90       	pop	r6
     e70:	08 95       	ret

00000e72 <u8g2_font_decode_glyph>:
     e72:	6f 92       	push	r6
     e74:	7f 92       	push	r7
     e76:	8f 92       	push	r8
     e78:	9f 92       	push	r9
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
     e90:	7c 01       	movw	r14, r24
     e92:	88 e4       	ldi	r24, 0x48	; 72
     e94:	e8 0e       	add	r14, r24
     e96:	f1 1c       	adc	r15, r1
     e98:	ce 01       	movw	r24, r28
     e9a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <u8g2_font_setup_decode>
     e9e:	fe 01       	movw	r30, r28
     ea0:	ef 5a       	subi	r30, 0xAF	; 175
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	c0 80       	ld	r12, Z
     ea6:	3c 96       	adiw	r30, 0x0c	; 12
     ea8:	60 81       	ld	r22, Z
     eaa:	c7 01       	movw	r24, r14
     eac:	0e 94 85 06 	call	0xd0a	; 0xd0a <u8g2_font_decode_get_signed_bits>
     eb0:	78 2e       	mov	r7, r24
     eb2:	fe 01       	movw	r30, r28
     eb4:	e2 5a       	subi	r30, 0xA2	; 162
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	60 81       	ld	r22, Z
     eba:	c7 01       	movw	r24, r14
     ebc:	0e 94 85 06 	call	0xd0a	; 0xd0a <u8g2_font_decode_get_signed_bits>
     ec0:	18 2f       	mov	r17, r24
     ec2:	fe 01       	movw	r30, r28
     ec4:	e1 5a       	subi	r30, 0xA1	; 161
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	c7 01       	movw	r24, r14
     ecc:	0e 94 85 06 	call	0xd0a	; 0xd0a <u8g2_font_decode_get_signed_bits>
     ed0:	d8 2e       	mov	r13, r24
     ed2:	f7 01       	movw	r30, r14
     ed4:	60 84       	ldd	r6, Z+8	; 0x08
     ed6:	16 14       	cp	r1, r6
     ed8:	0c f0       	brlt	.+2      	; 0xedc <u8g2_font_decode_glyph+0x6a>
     eda:	9b c0       	rjmp	.+310    	; 0x1012 <u8g2_font_decode_glyph+0x1a0>
     edc:	06 85       	ldd	r16, Z+14	; 0x0e
     ede:	1c 0d       	add	r17, r12
     ee0:	11 95       	neg	r17
     ee2:	20 2f       	mov	r18, r16
     ee4:	41 2f       	mov	r20, r17
     ee6:	67 2d       	mov	r22, r7
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	0e 94 ae 06 	call	0xd5c	; 0xd5c <u8g2_add_vector_x>
     ef0:	5c 01       	movw	r10, r24
     ef2:	f7 01       	movw	r30, r14
     ef4:	93 83       	std	Z+3, r25	; 0x03
     ef6:	82 83       	std	Z+2, r24	; 0x02
     ef8:	20 2f       	mov	r18, r16
     efa:	41 2f       	mov	r20, r17
     efc:	67 2d       	mov	r22, r7
     efe:	84 81       	ldd	r24, Z+4	; 0x04
     f00:	95 81       	ldd	r25, Z+5	; 0x05
     f02:	0e 94 94 06 	call	0xd28	; 0xd28 <u8g2_add_vector_y>
     f06:	f7 01       	movw	r30, r14
     f08:	95 83       	std	Z+5, r25	; 0x05
     f0a:	84 83       	std	Z+4, r24	; 0x04
     f0c:	01 30       	cpi	r16, 0x01	; 1
     f0e:	89 f0       	breq	.+34     	; 0xf32 <u8g2_font_decode_glyph+0xc0>
     f10:	28 f0       	brcs	.+10     	; 0xf1c <u8g2_font_decode_glyph+0xaa>
     f12:	02 30       	cpi	r16, 0x02	; 2
     f14:	01 f1       	breq	.+64     	; 0xf56 <u8g2_font_decode_glyph+0xe4>
     f16:	03 30       	cpi	r16, 0x03	; 3
     f18:	a1 f1       	breq	.+104    	; 0xf82 <u8g2_font_decode_glyph+0x110>
     f1a:	43 c0       	rjmp	.+134    	; 0xfa2 <u8g2_font_decode_glyph+0x130>
     f1c:	95 01       	movw	r18, r10
     f1e:	26 0d       	add	r18, r6
     f20:	31 1d       	adc	r19, r1
     f22:	67 fc       	sbrc	r6, 7
     f24:	3a 95       	dec	r19
     f26:	8c 01       	movw	r16, r24
     f28:	0c 0d       	add	r16, r12
     f2a:	11 1d       	adc	r17, r1
     f2c:	c7 fc       	sbrc	r12, 7
     f2e:	1a 95       	dec	r17
     f30:	3a c0       	rjmp	.+116    	; 0xfa6 <u8g2_font_decode_glyph+0x134>
     f32:	a5 01       	movw	r20, r10
     f34:	4c 19       	sub	r20, r12
     f36:	51 09       	sbc	r21, r1
     f38:	c7 fc       	sbrc	r12, 7
     f3a:	53 95       	inc	r21
     f3c:	95 01       	movw	r18, r10
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	8c 01       	movw	r16, r24
     f44:	06 0d       	add	r16, r6
     f46:	11 1d       	adc	r17, r1
     f48:	67 fc       	sbrc	r6, 7
     f4a:	1a 95       	dec	r17
     f4c:	ba 01       	movw	r22, r20
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	5b 01       	movw	r10, r22
     f54:	28 c0       	rjmp	.+80     	; 0xfa6 <u8g2_font_decode_glyph+0x134>
     f56:	a5 01       	movw	r20, r10
     f58:	46 19       	sub	r20, r6
     f5a:	51 09       	sbc	r21, r1
     f5c:	67 fc       	sbrc	r6, 7
     f5e:	53 95       	inc	r21
     f60:	95 01       	movw	r18, r10
     f62:	2f 5f       	subi	r18, 0xFF	; 255
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	bc 01       	movw	r22, r24
     f68:	6c 19       	sub	r22, r12
     f6a:	71 09       	sbc	r23, r1
     f6c:	c7 fc       	sbrc	r12, 7
     f6e:	73 95       	inc	r23
     f70:	8c 01       	movw	r16, r24
     f72:	0f 5f       	subi	r16, 0xFF	; 255
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	cb 01       	movw	r24, r22
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	fa 01       	movw	r30, r20
     f7c:	31 96       	adiw	r30, 0x01	; 1
     f7e:	5f 01       	movw	r10, r30
     f80:	12 c0       	rjmp	.+36     	; 0xfa6 <u8g2_font_decode_glyph+0x134>
     f82:	95 01       	movw	r18, r10
     f84:	2c 0d       	add	r18, r12
     f86:	31 1d       	adc	r19, r1
     f88:	c7 fc       	sbrc	r12, 7
     f8a:	3a 95       	dec	r19
     f8c:	ac 01       	movw	r20, r24
     f8e:	46 19       	sub	r20, r6
     f90:	51 09       	sbc	r21, r1
     f92:	67 fc       	sbrc	r6, 7
     f94:	53 95       	inc	r21
     f96:	8c 01       	movw	r16, r24
     f98:	0f 5f       	subi	r16, 0xFF	; 255
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	ca 01       	movw	r24, r20
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <u8g2_font_decode_glyph+0x134>
     fa2:	8c 01       	movw	r16, r24
     fa4:	95 01       	movw	r18, r10
     fa6:	ac 01       	movw	r20, r24
     fa8:	b5 01       	movw	r22, r10
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 ba 0a 	call	0x1574	; 0x1574 <u8g2_IsIntersection>
     fb0:	88 23       	and	r24, r24
     fb2:	79 f1       	breq	.+94     	; 0x1012 <u8g2_font_decode_glyph+0x1a0>
     fb4:	fe 01       	movw	r30, r28
     fb6:	e8 5b       	subi	r30, 0xB8	; 184
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	16 82       	std	Z+6, r1	; 0x06
     fbc:	17 82       	std	Z+7, r1	; 0x07
     fbe:	fe 01       	movw	r30, r28
     fc0:	e7 5a       	subi	r30, 0xA7	; 167
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	60 81       	ld	r22, Z
     fc6:	c7 01       	movw	r24, r14
     fc8:	0e 94 2c 06 	call	0xc58	; 0xc58 <u8g2_font_decode_get_unsigned_bits>
     fcc:	08 2f       	mov	r16, r24
     fce:	fe 01       	movw	r30, r28
     fd0:	e6 5a       	subi	r30, 0xA6	; 166
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	60 81       	ld	r22, Z
     fd6:	c7 01       	movw	r24, r14
     fd8:	0e 94 2c 06 	call	0xc58	; 0xc58 <u8g2_font_decode_get_unsigned_bits>
     fdc:	18 2f       	mov	r17, r24
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	60 2f       	mov	r22, r16
     fe2:	ce 01       	movw	r24, r28
     fe4:	0e 94 c8 06 	call	0xd90	; 0xd90 <u8g2_font_decode_len>
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	61 2f       	mov	r22, r17
     fec:	ce 01       	movw	r24, r28
     fee:	0e 94 c8 06 	call	0xd90	; 0xd90 <u8g2_font_decode_len>
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	c7 01       	movw	r24, r14
     ff6:	0e 94 2c 06 	call	0xc58	; 0xc58 <u8g2_font_decode_get_unsigned_bits>
     ffa:	81 11       	cpse	r24, r1
     ffc:	f0 cf       	rjmp	.-32     	; 0xfde <u8g2_font_decode_glyph+0x16c>
     ffe:	fe 01       	movw	r30, r28
    1000:	e8 5b       	subi	r30, 0xB8	; 184
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	87 81       	ldd	r24, Z+7	; 0x07
    1006:	8c 15       	cp	r24, r12
    1008:	d4 f2       	brlt	.-76     	; 0xfbe <u8g2_font_decode_glyph+0x14c>
    100a:	84 85       	ldd	r24, Z+12	; 0x0c
    100c:	cc 58       	subi	r28, 0x8C	; 140
    100e:	df 4f       	sbci	r29, 0xFF	; 255
    1010:	88 83       	st	Y, r24
    1012:	8d 2d       	mov	r24, r13
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	6f 90       	pop	r6
    1030:	08 95       	ret

00001032 <u8g2_font_get_glyph_data>:
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	fc 01       	movw	r30, r24
    1040:	ec 5b       	subi	r30, 0xBC	; 188
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	c0 81       	ld	r28, Z
    1046:	d1 81       	ldd	r29, Z+1	; 0x01
    1048:	67 96       	adiw	r28, 0x17	; 23
    104a:	6f 3f       	cpi	r22, 0xFF	; 255
    104c:	71 05       	cpc	r23, r1
    104e:	09 f0       	breq	.+2      	; 0x1052 <u8g2_font_get_glyph_data+0x20>
    1050:	38 f5       	brcc	.+78     	; 0x10a0 <u8g2_font_get_glyph_data+0x6e>
    1052:	61 36       	cpi	r22, 0x61	; 97
    1054:	71 05       	cpc	r23, r1
    1056:	30 f0       	brcs	.+12     	; 0x1064 <u8g2_font_get_glyph_data+0x32>
    1058:	b6 96       	adiw	r30, 0x26	; 38
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	c8 0f       	add	r28, r24
    1060:	d9 1f       	adc	r29, r25
    1062:	0a c0       	rjmp	.+20     	; 0x1078 <u8g2_font_get_glyph_data+0x46>
    1064:	61 34       	cpi	r22, 0x41	; 65
    1066:	71 05       	cpc	r23, r1
    1068:	38 f0       	brcs	.+14     	; 0x1078 <u8g2_font_get_glyph_data+0x46>
    106a:	fc 01       	movw	r30, r24
    106c:	e8 59       	subi	r30, 0x98	; 152
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	c8 0f       	add	r28, r24
    1076:	d9 1f       	adc	r29, r25
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	fc 01       	movw	r30, r24
    107e:	24 91       	lpm	r18, Z
    1080:	22 23       	and	r18, r18
    1082:	09 f4       	brne	.+2      	; 0x1086 <u8g2_font_get_glyph_data+0x54>
    1084:	3c c0       	rjmp	.+120    	; 0x10fe <u8g2_font_get_glyph_data+0xcc>
    1086:	fe 01       	movw	r30, r28
    1088:	24 91       	lpm	r18, Z
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	62 17       	cp	r22, r18
    108e:	73 07       	cpc	r23, r19
    1090:	11 f4       	brne	.+4      	; 0x1096 <u8g2_font_get_glyph_data+0x64>
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	39 c0       	rjmp	.+114    	; 0x1108 <u8g2_font_get_glyph_data+0xd6>
    1096:	fc 01       	movw	r30, r24
    1098:	84 91       	lpm	r24, Z
    109a:	c8 0f       	add	r28, r24
    109c:	d1 1d       	adc	r29, r1
    109e:	ec cf       	rjmp	.-40     	; 0x1078 <u8g2_font_get_glyph_data+0x46>
    10a0:	8b 01       	movw	r16, r22
    10a2:	fc 01       	movw	r30, r24
    10a4:	e4 59       	subi	r30, 0x94	; 148
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	c8 0f       	add	r28, r24
    10ae:	d9 1f       	adc	r29, r25
    10b0:	7e 01       	movw	r14, r28
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	c7 01       	movw	r24, r14
    10b6:	0e 94 a2 05 	call	0xb44	; 0xb44 <u8g2_font_get_word>
    10ba:	c8 0f       	add	r28, r24
    10bc:	d9 1f       	adc	r29, r25
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	c7 01       	movw	r24, r14
    10c2:	0e 94 a2 05 	call	0xb44	; 0xb44 <u8g2_font_get_word>
    10c6:	f4 e0       	ldi	r31, 0x04	; 4
    10c8:	ef 0e       	add	r14, r31
    10ca:	f1 1c       	adc	r15, r1
    10cc:	80 17       	cp	r24, r16
    10ce:	91 07       	cpc	r25, r17
    10d0:	80 f3       	brcs	.-32     	; 0x10b2 <u8g2_font_get_glyph_data+0x80>
    10d2:	fe 01       	movw	r30, r28
    10d4:	84 91       	lpm	r24, Z
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	98 2f       	mov	r25, r24
    10da:	88 27       	eor	r24, r24
    10dc:	31 96       	adiw	r30, 0x01	; 1
    10de:	e4 91       	lpm	r30, Z
    10e0:	8e 2b       	or	r24, r30
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	79 f0       	breq	.+30     	; 0x1104 <u8g2_font_get_glyph_data+0xd2>
    10e6:	08 17       	cp	r16, r24
    10e8:	19 07       	cpc	r17, r25
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <u8g2_font_get_glyph_data+0xc0>
    10ec:	ce 01       	movw	r24, r28
    10ee:	03 96       	adiw	r24, 0x03	; 3
    10f0:	0b c0       	rjmp	.+22     	; 0x1108 <u8g2_font_get_glyph_data+0xd6>
    10f2:	fe 01       	movw	r30, r28
    10f4:	32 96       	adiw	r30, 0x02	; 2
    10f6:	e4 91       	lpm	r30, Z
    10f8:	ce 0f       	add	r28, r30
    10fa:	d1 1d       	adc	r29, r1
    10fc:	ea cf       	rjmp	.-44     	; 0x10d2 <u8g2_font_get_glyph_data+0xa0>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <u8g2_font_get_glyph_data+0xd6>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <u8g2_font_draw_glyph>:
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
    111c:	fc 01       	movw	r30, r24
    111e:	e6 5b       	subi	r30, 0xB6	; 182
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	71 83       	std	Z+1, r23	; 0x01
    1124:	60 83       	st	Z, r22
    1126:	32 96       	adiw	r30, 0x02	; 2
    1128:	51 83       	std	Z+1, r21	; 0x01
    112a:	40 83       	st	Z, r20
    112c:	b9 01       	movw	r22, r18
    112e:	0e 94 19 08 	call	0x1032	; 0x1032 <u8g2_font_get_glyph_data>
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	41 f0       	breq	.+16     	; 0x1146 <u8g2_font_draw_glyph+0x30>
    1136:	bc 01       	movw	r22, r24
    1138:	ce 01       	movw	r24, r28
    113a:	0e 94 39 07 	call	0xe72	; 0xe72 <u8g2_font_decode_glyph>
    113e:	08 2e       	mov	r0, r24
    1140:	00 0c       	add	r0, r0
    1142:	99 0b       	sbc	r25, r25
    1144:	02 c0       	rjmp	.+4      	; 0x114a <u8g2_font_draw_glyph+0x34>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <u8g2_DrawGlyph>:
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
    1162:	8b 01       	movw	r16, r22
    1164:	7a 01       	movw	r14, r20
    1166:	69 01       	movw	r12, r18
    1168:	fc 01       	movw	r30, r24
    116a:	ea 5a       	subi	r30, 0xAA	; 170
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	89 f0       	breq	.+34     	; 0x1196 <u8g2_DrawGlyph+0x46>
    1174:	28 f0       	brcs	.+10     	; 0x1180 <u8g2_DrawGlyph+0x30>
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	c9 f0       	breq	.+50     	; 0x11ac <u8g2_DrawGlyph+0x5c>
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	11 f1       	breq	.+68     	; 0x11c2 <u8g2_DrawGlyph+0x72>
    117e:	2b c0       	rjmp	.+86     	; 0x11d6 <u8g2_DrawGlyph+0x86>
    1180:	fe 01       	movw	r30, r28
    1182:	ea 5b       	subi	r30, 0xBA	; 186
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	01 90       	ld	r0, Z+
    1188:	f0 81       	ld	r31, Z
    118a:	e0 2d       	mov	r30, r0
    118c:	ce 01       	movw	r24, r28
    118e:	09 95       	icall
    1190:	e8 0e       	add	r14, r24
    1192:	f9 1e       	adc	r15, r25
    1194:	20 c0       	rjmp	.+64     	; 0x11d6 <u8g2_DrawGlyph+0x86>
    1196:	fe 01       	movw	r30, r28
    1198:	ea 5b       	subi	r30, 0xBA	; 186
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	01 90       	ld	r0, Z+
    119e:	f0 81       	ld	r31, Z
    11a0:	e0 2d       	mov	r30, r0
    11a2:	ce 01       	movw	r24, r28
    11a4:	09 95       	icall
    11a6:	08 1b       	sub	r16, r24
    11a8:	19 0b       	sbc	r17, r25
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <u8g2_DrawGlyph+0x86>
    11ac:	fe 01       	movw	r30, r28
    11ae:	ea 5b       	subi	r30, 0xBA	; 186
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	01 90       	ld	r0, Z+
    11b4:	f0 81       	ld	r31, Z
    11b6:	e0 2d       	mov	r30, r0
    11b8:	ce 01       	movw	r24, r28
    11ba:	09 95       	icall
    11bc:	e8 1a       	sub	r14, r24
    11be:	f9 0a       	sbc	r15, r25
    11c0:	0a c0       	rjmp	.+20     	; 0x11d6 <u8g2_DrawGlyph+0x86>
    11c2:	fe 01       	movw	r30, r28
    11c4:	ea 5b       	subi	r30, 0xBA	; 186
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	01 90       	ld	r0, Z+
    11ca:	f0 81       	ld	r31, Z
    11cc:	e0 2d       	mov	r30, r0
    11ce:	ce 01       	movw	r24, r28
    11d0:	09 95       	icall
    11d2:	08 0f       	add	r16, r24
    11d4:	19 1f       	adc	r17, r25
    11d6:	96 01       	movw	r18, r12
    11d8:	a7 01       	movw	r20, r14
    11da:	b8 01       	movw	r22, r16
    11dc:	ce 01       	movw	r24, r28
    11de:	0e 94 8b 08 	call	0x1116	; 0x1116 <u8g2_font_draw_glyph>
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	08 95       	ret

000011f4 <u8g2_draw_string>:
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	ec 01       	movw	r28, r24
    120a:	5b 01       	movw	r10, r22
    120c:	6a 01       	movw	r12, r20
    120e:	89 01       	movw	r16, r18
    1210:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <u8x8_utf8_init>
    1214:	e1 2c       	mov	r14, r1
    1216:	f1 2c       	mov	r15, r1
    1218:	ea 81       	ldd	r30, Y+2	; 0x02
    121a:	fb 81       	ldd	r31, Y+3	; 0x03
    121c:	d8 01       	movw	r26, r16
    121e:	6c 91       	ld	r22, X
    1220:	ce 01       	movw	r24, r28
    1222:	09 95       	icall
    1224:	8f 3f       	cpi	r24, 0xFF	; 255
    1226:	bf ef       	ldi	r27, 0xFF	; 255
    1228:	9b 07       	cpc	r25, r27
    122a:	39 f1       	breq	.+78     	; 0x127a <u8g2_draw_string+0x86>
    122c:	0f 5f       	subi	r16, 0xFF	; 255
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	8e 3f       	cpi	r24, 0xFE	; 254
    1232:	2f ef       	ldi	r18, 0xFF	; 255
    1234:	92 07       	cpc	r25, r18
    1236:	81 f3       	breq	.-32     	; 0x1218 <u8g2_draw_string+0x24>
    1238:	9c 01       	movw	r18, r24
    123a:	a6 01       	movw	r20, r12
    123c:	b5 01       	movw	r22, r10
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 a8 08 	call	0x1150	; 0x1150 <u8g2_DrawGlyph>
    1244:	9c 01       	movw	r18, r24
    1246:	fe 01       	movw	r30, r28
    1248:	ea 5a       	subi	r30, 0xAA	; 170
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	90 81       	ld	r25, Z
    124e:	91 30       	cpi	r25, 0x01	; 1
    1250:	49 f0       	breq	.+18     	; 0x1264 <u8g2_draw_string+0x70>
    1252:	28 f0       	brcs	.+10     	; 0x125e <u8g2_draw_string+0x6a>
    1254:	92 30       	cpi	r25, 0x02	; 2
    1256:	49 f0       	breq	.+18     	; 0x126a <u8g2_draw_string+0x76>
    1258:	93 30       	cpi	r25, 0x03	; 3
    125a:	51 f0       	breq	.+20     	; 0x1270 <u8g2_draw_string+0x7c>
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <u8g2_draw_string+0x80>
    125e:	a2 0e       	add	r10, r18
    1260:	b3 1e       	adc	r11, r19
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <u8g2_draw_string+0x80>
    1264:	c2 0e       	add	r12, r18
    1266:	d3 1e       	adc	r13, r19
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <u8g2_draw_string+0x80>
    126a:	a2 1a       	sub	r10, r18
    126c:	b3 0a       	sbc	r11, r19
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <u8g2_draw_string+0x80>
    1270:	c2 1a       	sub	r12, r18
    1272:	d3 0a       	sbc	r13, r19
    1274:	e2 0e       	add	r14, r18
    1276:	f3 1e       	adc	r15, r19
    1278:	cf cf       	rjmp	.-98     	; 0x1218 <u8g2_draw_string+0x24>
    127a:	c7 01       	movw	r24, r14
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	08 95       	ret

00001292 <u8g2_DrawStr>:
    1292:	e3 e4       	ldi	r30, 0x43	; 67
    1294:	fc e0       	ldi	r31, 0x0C	; 12
    1296:	dc 01       	movw	r26, r24
    1298:	13 96       	adiw	r26, 0x03	; 3
    129a:	fc 93       	st	X, r31
    129c:	ee 93       	st	-X, r30
    129e:	12 97       	sbiw	r26, 0x02	; 2
    12a0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <u8g2_draw_string>
    12a4:	08 95       	ret

000012a6 <u8g2_UpdateRefHeight>:
    12a6:	fc 01       	movw	r30, r24
    12a8:	ec 5b       	subi	r30, 0xBC	; 188
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	20 81       	ld	r18, Z
    12ae:	31 81       	ldd	r19, Z+1	; 0x01
    12b0:	23 2b       	or	r18, r19
    12b2:	e1 f1       	breq	.+120    	; 0x132c <u8g2_UpdateRefHeight+0x86>
    12b4:	b0 96       	adiw	r30, 0x20	; 32
    12b6:	20 81       	ld	r18, Z
    12b8:	3c 96       	adiw	r30, 0x0c	; 12
    12ba:	20 83       	st	Z, r18
    12bc:	3b 97       	sbiw	r30, 0x0b	; 11
    12be:	40 81       	ld	r20, Z
    12c0:	3c 96       	adiw	r30, 0x0c	; 12
    12c2:	40 83       	st	Z, r20
    12c4:	32 97       	sbiw	r30, 0x02	; 2
    12c6:	30 81       	ld	r19, Z
    12c8:	33 23       	and	r19, r19
    12ca:	81 f1       	breq	.+96     	; 0x132c <u8g2_UpdateRefHeight+0x86>
    12cc:	31 30       	cpi	r19, 0x01	; 1
    12ce:	79 f4       	brne	.+30     	; 0x12ee <u8g2_UpdateRefHeight+0x48>
    12d0:	39 97       	sbiw	r30, 0x09	; 9
    12d2:	30 81       	ld	r19, Z
    12d4:	23 17       	cp	r18, r19
    12d6:	14 f4       	brge	.+4      	; 0x12dc <u8g2_UpdateRefHeight+0x36>
    12d8:	3a 96       	adiw	r30, 0x0a	; 10
    12da:	30 83       	st	Z, r19
    12dc:	fc 01       	movw	r30, r24
    12de:	e9 59       	subi	r30, 0x99	; 153
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	20 81       	ld	r18, Z
    12e4:	24 17       	cp	r18, r20
    12e6:	14 f5       	brge	.+68     	; 0x132c <u8g2_UpdateRefHeight+0x86>
    12e8:	3a 96       	adiw	r30, 0x0a	; 10
    12ea:	20 83       	st	Z, r18
    12ec:	08 95       	ret
    12ee:	02 2e       	mov	r0, r18
    12f0:	00 0c       	add	r0, r0
    12f2:	33 0b       	sbc	r19, r19
    12f4:	fc 01       	movw	r30, r24
    12f6:	ef 59       	subi	r30, 0x9F	; 159
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	e0 81       	ld	r30, Z
    12fc:	dc 01       	movw	r26, r24
    12fe:	ad 59       	subi	r26, 0x9D	; 157
    1300:	bf 4f       	sbci	r27, 0xFF	; 255
    1302:	5c 91       	ld	r21, X
    1304:	65 2f       	mov	r22, r21
    1306:	05 2e       	mov	r0, r21
    1308:	00 0c       	add	r0, r0
    130a:	77 0b       	sbc	r23, r23
    130c:	6e 0f       	add	r22, r30
    130e:	71 1d       	adc	r23, r1
    1310:	e7 fd       	sbrc	r30, 7
    1312:	7a 95       	dec	r23
    1314:	26 17       	cp	r18, r22
    1316:	37 07       	cpc	r19, r23
    1318:	1c f4       	brge	.+6      	; 0x1320 <u8g2_UpdateRefHeight+0x7a>
    131a:	1d 96       	adiw	r26, 0x0d	; 13
    131c:	e5 0f       	add	r30, r21
    131e:	ec 93       	st	X, r30
    1320:	54 17       	cp	r21, r20
    1322:	24 f4       	brge	.+8      	; 0x132c <u8g2_UpdateRefHeight+0x86>
    1324:	fc 01       	movw	r30, r24
    1326:	ef 58       	subi	r30, 0x8F	; 143
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	50 83       	st	Z, r21
    132c:	08 95       	ret

0000132e <u8g2_SetFontRefHeightText>:
    132e:	fc 01       	movw	r30, r24
    1330:	e1 59       	subi	r30, 0x91	; 145
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	10 82       	st	Z, r1
    1336:	0e 94 53 09 	call	0x12a6	; 0x12a6 <u8g2_UpdateRefHeight>
    133a:	08 95       	ret

0000133c <u8g2_SetFontPosBaseline>:
    133c:	8a 5b       	subi	r24, 0xBA	; 186
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	2e ea       	ldi	r18, 0xAE	; 174
    1342:	35 e0       	ldi	r19, 0x05	; 5
    1344:	fc 01       	movw	r30, r24
    1346:	31 83       	std	Z+1, r19	; 0x01
    1348:	20 83       	st	Z, r18
    134a:	08 95       	ret

0000134c <u8g2_SetFontPosTop>:
    134c:	8a 5b       	subi	r24, 0xBA	; 186
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	21 eb       	ldi	r18, 0xB1	; 177
    1352:	35 e0       	ldi	r19, 0x05	; 5
    1354:	fc 01       	movw	r30, r24
    1356:	31 83       	std	Z+1, r19	; 0x01
    1358:	20 83       	st	Z, r18
    135a:	08 95       	ret

0000135c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
  if ( u8g2->font != font )
    1360:	fc 01       	movw	r30, r24
    1362:	ec 5b       	subi	r30, 0xBC	; 188
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	20 81       	ld	r18, Z
    1368:	31 81       	ldd	r19, Z+1	; 0x01
    136a:	26 17       	cp	r18, r22
    136c:	37 07       	cpc	r19, r23
    136e:	51 f0       	breq	.+20     	; 0x1384 <u8g2_SetFont+0x28>
    1370:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1372:	71 83       	std	Z+1, r23	; 0x01
    1374:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    1376:	89 5a       	subi	r24, 0xA9	; 169
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	0e 94 ba 05 	call	0xb74	; 0xb74 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    137e:	ce 01       	movw	r24, r28
    1380:	0e 94 53 09 	call	0x12a6	; 0x12a6 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
  u8g2_uint_t a = *ap;
    138e:	ec 01       	movw	r28, r24
    1390:	a8 81       	ld	r26, Y
    1392:	b9 81       	ldd	r27, Y+1	; 0x01
  u8g2_uint_t b;
  b  = a;
  b += *len;
    1394:	eb 01       	movw	r28, r22
    1396:	e8 81       	ld	r30, Y
    1398:	f9 81       	ldd	r31, Y+1	; 0x01
    139a:	ea 0f       	add	r30, r26
    139c:	fb 1f       	adc	r31, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    139e:	ea 17       	cp	r30, r26
    13a0:	fb 07       	cpc	r31, r27
    13a2:	38 f4       	brcc	.+14     	; 0x13b2 <u8g2_clip_intersection2+0x28>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    13a4:	a2 17       	cp	r26, r18
    13a6:	b3 07       	cpc	r27, r19
    13a8:	18 f4       	brcc	.+6      	; 0x13b0 <u8g2_clip_intersection2+0x26>
    {
      b = d;
      b--;
    13aa:	f9 01       	movw	r30, r18
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <u8g2_clip_intersection2+0x28>
    }
    else
    {
      a = c;
    13b0:	da 01       	movw	r26, r20
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    13b2:	a2 17       	cp	r26, r18
    13b4:	b3 07       	cpc	r27, r19
    13b6:	a8 f4       	brcc	.+42     	; 0x13e2 <u8g2_clip_intersection2+0x58>
    return 0;
  if ( b <= c )
    13b8:	4e 17       	cp	r20, r30
    13ba:	5f 07       	cpc	r21, r31
    13bc:	a0 f4       	brcc	.+40     	; 0x13e6 <u8g2_clip_intersection2+0x5c>
    return 0;
  if ( a < c )		
    13be:	a4 17       	cp	r26, r20
    13c0:	b5 07       	cpc	r27, r21
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <u8g2_clip_intersection2+0x3c>
    13c4:	ad 01       	movw	r20, r26
    a = c;
  if ( b > d )
    13c6:	2e 17       	cp	r18, r30
    13c8:	3f 07       	cpc	r19, r31
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <u8g2_clip_intersection2+0x44>
    13cc:	9f 01       	movw	r18, r30
    b = d;
  
  *ap = a;
    13ce:	fc 01       	movw	r30, r24
    13d0:	51 83       	std	Z+1, r21	; 0x01
    13d2:	40 83       	st	Z, r20
  b -= a;
    13d4:	24 1b       	sub	r18, r20
    13d6:	35 0b       	sbc	r19, r21
  *len = b;
    13d8:	eb 01       	movw	r28, r22
    13da:	39 83       	std	Y+1, r19	; 0x01
    13dc:	28 83       	st	Y, r18
  return 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <u8g2_clip_intersection2+0x5e>
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <u8g2_clip_intersection2+0x5e>
  if ( b <= c )
    return 0;
    13e6:	80 e0       	ldi	r24, 0x00	; 0
  
  *ap = a;
  b -= a;
  *len = b;
  return 1;
}
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    13ee:	0f 93       	push	r16

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    13f0:	dc 01       	movw	r26, r24
    13f2:	9a 96       	adiw	r26, 0x2a	; 42
    13f4:	ed 91       	ld	r30, X+
    13f6:	fc 91       	ld	r31, X
    13f8:	9b 97       	sbiw	r26, 0x2b	; 43
    13fa:	4e 1b       	sub	r20, r30
    13fc:	5f 0b       	sbc	r21, r31
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    13fe:	5e 96       	adiw	r26, 0x1e	; 30
    1400:	ed 91       	ld	r30, X+
    1402:	fc 91       	ld	r31, X
    1404:	5f 97       	sbiw	r26, 0x1f	; 31
    1406:	09 95       	icall
}
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <u8g2_DrawHVLine+0xe>
    141a:	00 d0       	rcall	.+0      	; 0x141c <u8g2_DrawHVLine+0x10>
    141c:	00 d0       	rcall	.+0      	; 0x141e <u8g2_DrawHVLine+0x12>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	7a 83       	std	Y+2, r23	; 0x02
    1424:	69 83       	std	Y+1, r22	; 0x01
    1426:	5c 83       	std	Y+4, r21	; 0x04
    1428:	4b 83       	std	Y+3, r20	; 0x03
    142a:	3e 83       	std	Y+6, r19	; 0x06
    142c:	2d 83       	std	Y+5, r18	; 0x05
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    142e:	fc 01       	movw	r30, r24
    1430:	e2 59       	subi	r30, 0x92	; 146
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	20 81       	ld	r18, Z
    1436:	22 23       	and	r18, r18
    1438:	09 f4       	brne	.+2      	; 0x143c <u8g2_DrawHVLine+0x30>
    143a:	74 c0       	rjmp	.+232    	; 0x1524 <u8g2_DrawHVLine+0x118>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    143c:	2d 81       	ldd	r18, Y+5	; 0x05
    143e:	3e 81       	ldd	r19, Y+6	; 0x06
    1440:	21 15       	cp	r18, r1
    1442:	31 05       	cpc	r19, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <u8g2_DrawHVLine+0x3c>
    1446:	6e c0       	rjmp	.+220    	; 0x1524 <u8g2_DrawHVLine+0x118>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	b0 f0       	brcs	.+44     	; 0x147a <u8g2_DrawHVLine+0x6e>
      {
	if ( dir == 2 )
    144e:	02 30       	cpi	r16, 0x02	; 2
    1450:	41 f4       	brne	.+16     	; 0x1462 <u8g2_DrawHVLine+0x56>
	{
	  x -= len;
    1452:	62 1b       	sub	r22, r18
    1454:	73 0b       	sbc	r23, r19
    1456:	9b 01       	movw	r18, r22
	  x++;
    1458:	2f 5f       	subi	r18, 0xFF	; 255
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	3a 83       	std	Y+2, r19	; 0x02
    145e:	29 83       	std	Y+1, r18	; 0x01
    1460:	0c c0       	rjmp	.+24     	; 0x147a <u8g2_DrawHVLine+0x6e>
	}
	else if ( dir == 3 )
    1462:	03 30       	cpi	r16, 0x03	; 3
    1464:	51 f4       	brne	.+20     	; 0x147a <u8g2_DrawHVLine+0x6e>
	{
	  y -= len;
    1466:	4b 81       	ldd	r20, Y+3	; 0x03
    1468:	5c 81       	ldd	r21, Y+4	; 0x04
    146a:	da 01       	movw	r26, r20
    146c:	a2 1b       	sub	r26, r18
    146e:	b3 0b       	sbc	r27, r19
    1470:	9d 01       	movw	r18, r26
	  y++;
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	3c 83       	std	Y+4, r19	; 0x04
    1478:	2b 83       	std	Y+3, r18	; 0x03
    147a:	7c 01       	movw	r14, r24
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    147c:	10 2f       	mov	r17, r16
    147e:	11 70       	andi	r17, 0x01	; 1
    1480:	00 fd       	sbrc	r16, 0
    1482:	1d c0       	rjmp	.+58     	; 0x14be <u8g2_DrawHVLine+0xb2>
      {
	if ( y < u8g2->user_y0 )
    1484:	fc 01       	movw	r30, r24
    1486:	20 ad       	ldd	r18, Z+56	; 0x38
    1488:	31 ad       	ldd	r19, Z+57	; 0x39
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	82 17       	cp	r24, r18
    1490:	93 07       	cpc	r25, r19
    1492:	08 f4       	brcc	.+2      	; 0x1496 <u8g2_DrawHVLine+0x8a>
    1494:	47 c0       	rjmp	.+142    	; 0x1524 <u8g2_DrawHVLine+0x118>
	  return;
	if ( y >= u8g2->user_y1 )
    1496:	22 ad       	ldd	r18, Z+58	; 0x3a
    1498:	33 ad       	ldd	r19, Z+59	; 0x3b
    149a:	82 17       	cp	r24, r18
    149c:	93 07       	cpc	r25, r19
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <u8g2_DrawHVLine+0x96>
    14a0:	41 c0       	rjmp	.+130    	; 0x1524 <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    14a2:	26 a9       	ldd	r18, Z+54	; 0x36
    14a4:	37 a9       	ldd	r19, Z+55	; 0x37
    14a6:	44 a9       	ldd	r20, Z+52	; 0x34
    14a8:	55 a9       	ldd	r21, Z+53	; 0x35
    14aa:	be 01       	movw	r22, r28
    14ac:	6b 5f       	subi	r22, 0xFB	; 251
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	0e 94 c5 09 	call	0x138a	; 0x138a <u8g2_clip_intersection2>
    14b8:	81 11       	cpse	r24, r1
    14ba:	23 c0       	rjmp	.+70     	; 0x1502 <u8g2_DrawHVLine+0xf6>
    14bc:	33 c0       	rjmp	.+102    	; 0x1524 <u8g2_DrawHVLine+0x118>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    14be:	dc 01       	movw	r26, r24
    14c0:	d4 96       	adiw	r26, 0x34	; 52
    14c2:	2d 91       	ld	r18, X+
    14c4:	3c 91       	ld	r19, X
    14c6:	d5 97       	sbiw	r26, 0x35	; 53
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	82 17       	cp	r24, r18
    14ce:	93 07       	cpc	r25, r19
    14d0:	48 f1       	brcs	.+82     	; 0x1524 <u8g2_DrawHVLine+0x118>
	  return;
	if ( x >= u8g2->user_x1 )
    14d2:	d6 96       	adiw	r26, 0x36	; 54
    14d4:	2d 91       	ld	r18, X+
    14d6:	3c 91       	ld	r19, X
    14d8:	d7 97       	sbiw	r26, 0x37	; 55
    14da:	82 17       	cp	r24, r18
    14dc:	93 07       	cpc	r25, r19
    14de:	10 f5       	brcc	.+68     	; 0x1524 <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    14e0:	da 96       	adiw	r26, 0x3a	; 58
    14e2:	2d 91       	ld	r18, X+
    14e4:	3c 91       	ld	r19, X
    14e6:	db 97       	sbiw	r26, 0x3b	; 59
    14e8:	d8 96       	adiw	r26, 0x38	; 56
    14ea:	4d 91       	ld	r20, X+
    14ec:	5c 91       	ld	r21, X
    14ee:	d9 97       	sbiw	r26, 0x39	; 57
    14f0:	be 01       	movw	r22, r28
    14f2:	6b 5f       	subi	r22, 0xFB	; 251
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	ce 01       	movw	r24, r28
    14f8:	03 96       	adiw	r24, 0x03	; 3
    14fa:	0e 94 c5 09 	call	0x138a	; 0x138a <u8g2_clip_intersection2>
    14fe:	88 23       	and	r24, r24
    1500:	89 f0       	breq	.+34     	; 0x1524 <u8g2_DrawHVLine+0x118>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    1502:	d7 01       	movw	r26, r14
    1504:	90 96       	adiw	r26, 0x20	; 32
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	91 97       	sbiw	r26, 0x21	; 33
    150c:	04 80       	ldd	r0, Z+4	; 0x04
    150e:	f5 81       	ldd	r31, Z+5	; 0x05
    1510:	e0 2d       	mov	r30, r0
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	4b 81       	ldd	r20, Y+3	; 0x03
    1518:	5c 81       	ldd	r21, Y+4	; 0x04
    151a:	69 81       	ldd	r22, Y+1	; 0x01
    151c:	7a 81       	ldd	r23, Y+2	; 0x02
    151e:	01 2f       	mov	r16, r17
    1520:	c7 01       	movw	r24, r14
    1522:	09 95       	icall
    }
}
    1524:	26 96       	adiw	r28, 0x06	; 6
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	08 95       	ret

0000153e <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    153e:	46 17       	cp	r20, r22
    1540:	57 07       	cpc	r21, r23
    1542:	40 f4       	brcc	.+16     	; 0x1554 <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    1544:	82 17       	cp	r24, r18
    1546:	93 07       	cpc	r25, r19
    1548:	68 f0       	brcs	.+26     	; 0x1564 <u8g2_is_intersection_decision_tree+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    154a:	24 17       	cp	r18, r20
    154c:	35 07       	cpc	r19, r21
    154e:	60 f4       	brcc	.+24     	; 0x1568 <u8g2_is_intersection_decision_tree+0x2a>
      {
	return 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1554:	82 17       	cp	r24, r18
    1556:	93 07       	cpc	r25, r19
    1558:	48 f4       	brcc	.+18     	; 0x156c <u8g2_is_intersection_decision_tree+0x2e>
    {
      if ( v0 > v1 )	// v0 > v1
    155a:	24 17       	cp	r18, r20
    155c:	35 07       	cpc	r19, r21
    155e:	40 f4       	brcc	.+16     	; 0x1570 <u8g2_is_intersection_decision_tree+0x32>
      {
	return 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    1570:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
    1572:	08 95       	ret

00001574 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
    1586:	7b 01       	movw	r14, r22
    1588:	69 01       	movw	r12, r18
    158a:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    158c:	6a ad       	ldd	r22, Y+58	; 0x3a
    158e:	7b ad       	ldd	r23, Y+59	; 0x3b
    1590:	88 ad       	ldd	r24, Y+56	; 0x38
    1592:	99 ad       	ldd	r25, Y+57	; 0x39
    1594:	0e 94 9f 0a 	call	0x153e	; 0x153e <u8g2_is_intersection_decision_tree>
    1598:	88 23       	and	r24, r24
    159a:	41 f0       	breq	.+16     	; 0x15ac <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    159c:	6e a9       	ldd	r22, Y+54	; 0x36
    159e:	7f a9       	ldd	r23, Y+55	; 0x37
    15a0:	96 01       	movw	r18, r12
    15a2:	a7 01       	movw	r20, r14
    15a4:	8c a9       	ldd	r24, Y+52	; 0x34
    15a6:	9d a9       	ldd	r25, Y+53	; 0x35
    15a8:	0e 94 9f 0a 	call	0x153e	; 0x153e <u8g2_is_intersection_decision_tree>
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	df 90       	pop	r13
    15ba:	cf 90       	pop	r12
    15bc:	08 95       	ret

000015be <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	dc 01       	movw	r26, r24
    15c8:	ca 01       	movw	r24, r20
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    15ca:	54 2f       	mov	r21, r20
    15cc:	57 70       	andi	r21, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    15ce:	c1 e0       	ldi	r28, 0x01	; 1
    15d0:	d0 e0       	ldi	r29, 0x00	; 0
    15d2:	05 2e       	mov	r0, r21
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    15d6:	cc 0f       	add	r28, r28
    15d8:	dd 1f       	adc	r29, r29
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    15de:	1c 2f       	mov	r17, r28

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    15e0:	fd 01       	movw	r30, r26
    15e2:	ec 58       	subi	r30, 0x8C	; 140
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	e0 81       	ld	r30, Z
    15e8:	e2 30       	cpi	r30, 0x02	; 2
    15ea:	10 f0       	brcs	.+4      	; 0x15f0 <u8g2_ll_hvline_vertical_top_lsb+0x32>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <u8g2_ll_hvline_vertical_top_lsb+0x34>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    15f0:	4c 2f       	mov	r20, r28
  if ( u8g2->draw_color != 1 )
    15f2:	e1 30       	cpi	r30, 0x01	; 1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    15f6:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    15f8:	88 7f       	andi	r24, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
    15fe:	11 97       	sbiw	r26, 0x01	; 1
    1600:	c0 89       	ldd	r28, Z+16	; 0x10
    1602:	c8 9f       	mul	r28, r24
    1604:	f0 01       	movw	r30, r0
    1606:	c9 9f       	mul	r28, r25
    1608:	f0 0d       	add	r31, r0
    160a:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
    160c:	92 96       	adiw	r26, 0x22	; 34
    160e:	8d 91       	ld	r24, X+
    1610:	9c 91       	ld	r25, X
    1612:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
    1614:	6e 0f       	add	r22, r30
    1616:	7f 1f       	adc	r23, r31
    1618:	fc 01       	movw	r30, r24
    161a:	e6 0f       	add	r30, r22
    161c:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    161e:	01 11       	cpse	r16, r1
    1620:	08 c0       	rjmp	.+16     	; 0x1632 <u8g2_ll_hvline_vertical_top_lsb+0x74>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    1622:	80 81       	ld	r24, Z
    1624:	84 2b       	or	r24, r20
	*ptr ^= xor_mask;
    1626:	81 27       	eor	r24, r17
    1628:	81 93       	st	Z+, r24
	ptr++;
	len--;
    162a:	21 50       	subi	r18, 0x01	; 1
    162c:	31 09       	sbc	r19, r1
      } while( len != 0 );
    162e:	c9 f7       	brne	.-14     	; 0x1622 <u8g2_ll_hvline_vertical_top_lsb+0x64>
    1630:	21 c0       	rjmp	.+66     	; 0x1674 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    1632:	90 81       	ld	r25, Z
    1634:	94 2b       	or	r25, r20
      *ptr ^= xor_mask;
    1636:	91 27       	eor	r25, r17
    1638:	90 83       	st	Z, r25
      
      bit_pos++;
    163a:	5f 5f       	subi	r21, 0xFF	; 255
      bit_pos &= 7;
    163c:	57 70       	andi	r21, 0x07	; 7

      len--;
    163e:	21 50       	subi	r18, 0x01	; 1
    1640:	31 09       	sbc	r19, r1

      if ( bit_pos == 0 )
    1642:	51 11       	cpse	r21, r1
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    1646:	96 96       	adiw	r26, 0x26	; 38
    1648:	8d 91       	ld	r24, X+
    164a:	9c 91       	ld	r25, X
    164c:	97 97       	sbiw	r26, 0x27	; 39
    164e:	e8 0f       	add	r30, r24
    1650:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    1652:	ed 01       	movw	r28, r26
    1654:	cc 58       	subi	r28, 0x8C	; 140
    1656:	df 4f       	sbci	r29, 0xFF	; 255
    1658:	88 81       	ld	r24, Y
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	08 f4       	brcc	.+2      	; 0x1660 <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
    165e:	41 e0       	ldi	r20, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	21 f4       	brne	.+8      	; 0x166c <u8g2_ll_hvline_vertical_top_lsb+0xae>
    1664:	04 c0       	rjmp	.+8      	; 0x166e <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    1666:	44 0f       	add	r20, r20
	xor_mask <<= 1;
    1668:	11 0f       	add	r17, r17
    166a:	01 c0       	rjmp	.+2      	; 0x166e <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    166c:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    166e:	21 15       	cp	r18, r1
    1670:	31 05       	cpc	r19, r1
    1672:	f9 f6       	brne	.-66     	; 0x1632 <u8g2_ll_hvline_vertical_top_lsb+0x74>
  }
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	fc 01       	movw	r30, r24
    1684:	a0 81       	ld	r26, Z
    1686:	b1 81       	ldd	r27, Z+1	; 0x01
    1688:	84 a1       	ldd	r24, Z+36	; 0x24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 01       	movw	r18, r24
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	31 a7       	std	Z+41, r19	; 0x29
    169c:	20 a7       	std	Z+40, r18	; 0x28
    169e:	50 96       	adiw	r26, 0x10	; 16
    16a0:	2c 91       	ld	r18, X
    16a2:	50 97       	sbiw	r26, 0x10	; 16
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	22 0f       	add	r18, r18
    16a8:	33 1f       	adc	r19, r19
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	37 a3       	std	Z+39, r19	; 0x27
    16b4:	26 a3       	std	Z+38, r18	; 0x26
    16b6:	75 a1       	ldd	r23, Z+37	; 0x25
    16b8:	27 2f       	mov	r18, r23
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	a9 01       	movw	r20, r18
    16be:	44 0f       	add	r20, r20
    16c0:	55 1f       	adc	r21, r21
    16c2:	44 0f       	add	r20, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	44 0f       	add	r20, r20
    16c8:	55 1f       	adc	r21, r21
    16ca:	53 a7       	std	Z+43, r21	; 0x2b
    16cc:	42 a7       	std	Z+42, r20	; 0x2a
    16ce:	28 0f       	add	r18, r24
    16d0:	39 1f       	adc	r19, r25
    16d2:	51 96       	adiw	r26, 0x11	; 17
    16d4:	6c 91       	ld	r22, X
    16d6:	51 97       	sbiw	r26, 0x11	; 17
    16d8:	c6 2f       	mov	r28, r22
    16da:	d0 e0       	ldi	r29, 0x00	; 0
    16dc:	c2 17       	cp	r28, r18
    16de:	d3 07       	cpc	r29, r19
    16e0:	18 f4       	brcc	.+6      	; 0x16e8 <u8g2_update_dimension_common+0x6a>
    16e2:	ce 01       	movw	r24, r28
    16e4:	87 1b       	sub	r24, r23
    16e6:	91 09       	sbc	r25, r1
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	55 a7       	std	Z+45, r21	; 0x2d
    16f6:	44 a7       	std	Z+44, r20	; 0x2c
    16f8:	84 0f       	add	r24, r20
    16fa:	95 1f       	adc	r25, r21
    16fc:	97 a7       	std	Z+47, r25	; 0x2f
    16fe:	86 a7       	std	Z+46, r24	; 0x2e
    1700:	54 96       	adiw	r26, 0x14	; 20
    1702:	8d 91       	ld	r24, X+
    1704:	9c 91       	ld	r25, X
    1706:	55 97       	sbiw	r26, 0x15	; 21
    1708:	91 ab       	std	Z+49, r25	; 0x31
    170a:	80 ab       	std	Z+48, r24	; 0x30
    170c:	56 96       	adiw	r26, 0x16	; 22
    170e:	8d 91       	ld	r24, X+
    1710:	9c 91       	ld	r25, X
    1712:	57 97       	sbiw	r26, 0x17	; 23
    1714:	93 ab       	std	Z+51, r25	; 0x33
    1716:	82 ab       	std	Z+50, r24	; 0x32
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <u8g2_update_dimension_r0>:
    171e:	0e 94 3f 0b 	call	0x167e	; 0x167e <u8g2_update_dimension_common>
    1722:	08 95       	ret

00001724 <u8g2_apply_clip_window>:
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
    172e:	fc 01       	movw	r30, r24
    1730:	ee 5b       	subi	r30, 0xBE	; 190
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	00 81       	ld	r16, Z
    1736:	11 81       	ldd	r17, Z+1	; 0x01
    1738:	2e ad       	ldd	r18, Y+62	; 0x3e
    173a:	3f ad       	ldd	r19, Y+63	; 0x3f
    173c:	32 97       	sbiw	r30, 0x02	; 2
    173e:	40 81       	ld	r20, Z
    1740:	51 81       	ldd	r21, Z+1	; 0x01
    1742:	6c ad       	ldd	r22, Y+60	; 0x3c
    1744:	7d ad       	ldd	r23, Y+61	; 0x3d
    1746:	0e 94 ba 0a 	call	0x1574	; 0x1574 <u8g2_IsIntersection>
    174a:	81 11       	cpse	r24, r1
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <u8g2_apply_clip_window+0x32>
    174e:	c2 59       	subi	r28, 0x92	; 146
    1750:	df 4f       	sbci	r29, 0xFF	; 255
    1752:	18 82       	st	Y, r1
    1754:	2f c0       	rjmp	.+94     	; 0x17b4 <u8g2_apply_clip_window+0x90>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	fe 01       	movw	r30, r28
    175a:	e2 59       	subi	r30, 0x92	; 146
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 83       	st	Z, r24
    1760:	2c a9       	ldd	r18, Y+52	; 0x34
    1762:	3d a9       	ldd	r19, Y+53	; 0x35
    1764:	8c ad       	ldd	r24, Y+60	; 0x3c
    1766:	9d ad       	ldd	r25, Y+61	; 0x3d
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	10 f4       	brcc	.+4      	; 0x1772 <u8g2_apply_clip_window+0x4e>
    176e:	9d ab       	std	Y+53, r25	; 0x35
    1770:	8c ab       	std	Y+52, r24	; 0x34
    1772:	2e a9       	ldd	r18, Y+54	; 0x36
    1774:	3f a9       	ldd	r19, Y+55	; 0x37
    1776:	8e ad       	ldd	r24, Y+62	; 0x3e
    1778:	9f ad       	ldd	r25, Y+63	; 0x3f
    177a:	82 17       	cp	r24, r18
    177c:	93 07       	cpc	r25, r19
    177e:	10 f4       	brcc	.+4      	; 0x1784 <u8g2_apply_clip_window+0x60>
    1780:	9f ab       	std	Y+55, r25	; 0x37
    1782:	8e ab       	std	Y+54, r24	; 0x36
    1784:	28 ad       	ldd	r18, Y+56	; 0x38
    1786:	39 ad       	ldd	r19, Y+57	; 0x39
    1788:	fe 01       	movw	r30, r28
    178a:	e0 5c       	subi	r30, 0xC0	; 192
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	28 17       	cp	r18, r24
    1794:	39 07       	cpc	r19, r25
    1796:	10 f4       	brcc	.+4      	; 0x179c <u8g2_apply_clip_window+0x78>
    1798:	99 af       	std	Y+57, r25	; 0x39
    179a:	88 af       	std	Y+56, r24	; 0x38
    179c:	2a ad       	ldd	r18, Y+58	; 0x3a
    179e:	3b ad       	ldd	r19, Y+59	; 0x3b
    17a0:	fe 01       	movw	r30, r28
    17a2:	ee 5b       	subi	r30, 0xBE	; 190
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	82 17       	cp	r24, r18
    17ac:	93 07       	cpc	r25, r19
    17ae:	10 f4       	brcc	.+4      	; 0x17b4 <u8g2_apply_clip_window+0x90>
    17b0:	9b af       	std	Y+59, r25	; 0x3b
    17b2:	8a af       	std	Y+58, r24	; 0x3a
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <u8g2_update_page_win_r0>:
    17be:	fc 01       	movw	r30, r24
    17c0:	15 aa       	std	Z+53, r1	; 0x35
    17c2:	14 aa       	std	Z+52, r1	; 0x34
    17c4:	80 a9       	ldd	r24, Z+48	; 0x30
    17c6:	91 a9       	ldd	r25, Z+49	; 0x31
    17c8:	97 ab       	std	Z+55, r25	; 0x37
    17ca:	86 ab       	std	Z+54, r24	; 0x36
    17cc:	84 a5       	ldd	r24, Z+44	; 0x2c
    17ce:	95 a5       	ldd	r25, Z+45	; 0x2d
    17d0:	91 af       	std	Z+57, r25	; 0x39
    17d2:	80 af       	std	Z+56, r24	; 0x38
    17d4:	86 a5       	ldd	r24, Z+46	; 0x2e
    17d6:	97 a5       	ldd	r25, Z+47	; 0x2f
    17d8:	93 af       	std	Z+59, r25	; 0x3b
    17da:	82 af       	std	Z+58, r24	; 0x3a
    17dc:	cf 01       	movw	r24, r30
    17de:	0e 94 92 0b 	call	0x1724	; 0x1724 <u8g2_apply_clip_window>
    17e2:	08 95       	ret

000017e4 <u8g2_draw_l90_r0>:
    17e4:	0f 93       	push	r16
    17e6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <u8g2_draw_hv_line_2dir>
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <u8g2_SetMaxClipWindow>:
    17ee:	dc 01       	movw	r26, r24
    17f0:	dd 96       	adiw	r26, 0x3d	; 61
    17f2:	1c 92       	st	X, r1
    17f4:	1e 92       	st	-X, r1
    17f6:	dc 97       	sbiw	r26, 0x3c	; 60
    17f8:	fc 01       	movw	r30, r24
    17fa:	e0 5c       	subi	r30, 0xC0	; 192
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	11 82       	std	Z+1, r1	; 0x01
    1800:	10 82       	st	Z, r1
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	fc 01       	movw	r30, r24
    1808:	37 af       	std	Z+63, r19	; 0x3f
    180a:	26 af       	std	Z+62, r18	; 0x3e
    180c:	ee 5b       	subi	r30, 0xBE	; 190
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	31 83       	std	Z+1, r19	; 0x01
    1812:	20 83       	st	Z, r18
    1814:	90 96       	adiw	r26, 0x20	; 32
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	91 97       	sbiw	r26, 0x21	; 33
    181c:	02 80       	ldd	r0, Z+2	; 0x02
    181e:	f3 81       	ldd	r31, Z+3	; 0x03
    1820:	e0 2d       	mov	r30, r0
    1822:	09 95       	icall
    1824:	08 95       	ret

00001826 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1830:	fc 01       	movw	r30, r24
    1832:	ec 5b       	subi	r30, 0xBC	; 188
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	11 82       	std	Z+1, r1	; 0x01
    1838:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    183a:	3f 8f       	std	Y+31, r19	; 0x1f
    183c:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    183e:	7b a3       	std	Y+35, r23	; 0x23
    1840:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    1842:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    1844:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    1846:	3f 96       	adiw	r30, 0x0f	; 15
    1848:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    184a:	b0 96       	adiw	r30, 0x20	; 32
    184c:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    184e:	34 97       	sbiw	r30, 0x04	; 4
    1850:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    1852:	35 96       	adiw	r30, 0x05	; 5
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1858:	31 96       	adiw	r30, 0x01	; 1
    185a:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    185c:	19 a3       	std	Y+33, r17	; 0x21
    185e:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    1860:	d8 01       	movw	r26, r16
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	ce 01       	movw	r24, r28
    1868:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    186a:	ce 01       	movw	r24, r28
    186c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1870:	ce 01       	movw	r24, r28
    1872:	0e 94 9e 09 	call	0x133c	; 0x133c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    1876:	ca 5a       	subi	r28, 0xAA	; 170
    1878:	df 4f       	sbci	r29, 0xFF	; 255
    187a:	18 82       	st	Y, r1
#endif
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    1886:	66 23       	and	r22, r22
    1888:	29 f0       	breq	.+10     	; 0x1894 <u8x8_ascii_next+0xe>
    188a:	6a 30       	cpi	r22, 0x0A	; 10
    188c:	31 f0       	breq	.+12     	; 0x189a <u8x8_ascii_next+0x14>
    188e:	86 2f       	mov	r24, r22
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	08 95       	ret
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	9f ef       	ldi	r25, 0xFF	; 255
    1898:	08 95       	ret
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	08 95       	ret

000018a0 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    18a0:	fc 01       	movw	r30, r24
    18a2:	10 8e       	std	Z+24, r1	; 0x18
    18a4:	08 95       	ret

000018a6 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
    18a6:	46 2f       	mov	r20, r22
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
    18a8:	dc 01       	movw	r26, r24
    18aa:	18 96       	adiw	r26, 0x08	; 8
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	19 97       	sbiw	r26, 0x09	; 9
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	60 e2       	ldi	r22, 0x20	; 32
    18b8:	09 95       	icall
}
    18ba:	08 95       	ret

000018bc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    18bc:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    18be:	dc 01       	movw	r26, r24
    18c0:	18 96       	adiw	r26, 0x08	; 8
    18c2:	ed 91       	ld	r30, X+
    18c4:	fc 91       	ld	r31, X
    18c6:	19 97       	sbiw	r26, 0x09	; 9
    18c8:	46 2f       	mov	r20, r22
    18ca:	67 e1       	ldi	r22, 0x17	; 23
    18cc:	09 95       	icall
}
    18ce:	08 95       	ret

000018d0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    18dc:	ae 01       	movw	r20, r28
    18de:	4f 5f       	subi	r20, 0xFF	; 255
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <u8x8_byte_SendBytes>
}
    18e8:	0f 90       	pop	r0
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    18f0:	46 2f       	mov	r20, r22
    18f2:	dc 01       	movw	r26, r24
    18f4:	16 96       	adiw	r26, 0x06	; 6
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	17 97       	sbiw	r26, 0x07	; 7
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	65 e1       	ldi	r22, 0x15	; 21
    1902:	09 95       	icall
    1904:	08 95       	ret

00001906 <u8x8_cad_SendArg>:
    1906:	46 2f       	mov	r20, r22
    1908:	dc 01       	movw	r26, r24
    190a:	16 96       	adiw	r26, 0x06	; 6
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	17 97       	sbiw	r26, 0x07	; 7
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	66 e1       	ldi	r22, 0x16	; 22
    1918:	09 95       	icall
    191a:	08 95       	ret

0000191c <u8x8_cad_SendData>:
    191c:	9a 01       	movw	r18, r20
    191e:	dc 01       	movw	r26, r24
    1920:	16 96       	adiw	r26, 0x06	; 6
    1922:	ed 91       	ld	r30, X+
    1924:	fc 91       	ld	r31, X
    1926:	17 97       	sbiw	r26, 0x07	; 7
    1928:	46 2f       	mov	r20, r22
    192a:	67 e1       	ldi	r22, 0x17	; 23
    192c:	09 95       	icall
    192e:	08 95       	ret

00001930 <u8x8_cad_StartTransfer>:
    1930:	dc 01       	movw	r26, r24
    1932:	16 96       	adiw	r26, 0x06	; 6
    1934:	ed 91       	ld	r30, X+
    1936:	fc 91       	ld	r31, X
    1938:	17 97       	sbiw	r26, 0x07	; 7
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	68 e1       	ldi	r22, 0x18	; 24
    1942:	09 95       	icall
    1944:	08 95       	ret

00001946 <u8x8_cad_EndTransfer>:
    1946:	dc 01       	movw	r26, r24
    1948:	16 96       	adiw	r26, 0x06	; 6
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	17 97       	sbiw	r26, 0x07	; 7
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	69 e1       	ldi	r22, 0x19	; 25
    1958:	09 95       	icall
    195a:	08 95       	ret

0000195c <u8x8_cad_SendSequence>:
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	1f 92       	push	r1
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	7c 01       	movw	r14, r24
    1970:	8b 01       	movw	r16, r22
    1972:	d8 01       	movw	r26, r16
    1974:	6d 91       	ld	r22, X+
    1976:	8d 01       	movw	r16, r26
    1978:	67 31       	cpi	r22, 0x17	; 23
    197a:	b9 f0       	breq	.+46     	; 0x19aa <u8x8_cad_SendSequence+0x4e>
    197c:	18 f4       	brcc	.+6      	; 0x1984 <u8x8_cad_SendSequence+0x28>
    197e:	65 31       	cpi	r22, 0x15	; 21
    1980:	30 f4       	brcc	.+12     	; 0x198e <u8x8_cad_SendSequence+0x32>
    1982:	33 c0       	rjmp	.+102    	; 0x19ea <u8x8_cad_SendSequence+0x8e>
    1984:	6a 31       	cpi	r22, 0x1A	; 26
    1986:	e8 f0       	brcs	.+58     	; 0x19c2 <u8x8_cad_SendSequence+0x66>
    1988:	6e 3f       	cpi	r22, 0xFE	; 254
    198a:	31 f1       	breq	.+76     	; 0x19d8 <u8x8_cad_SendSequence+0x7c>
    198c:	2e c0       	rjmp	.+92     	; 0x19ea <u8x8_cad_SendSequence+0x8e>
    198e:	fd 01       	movw	r30, r26
    1990:	41 91       	ld	r20, Z+
    1992:	8f 01       	movw	r16, r30
    1994:	49 83       	std	Y+1, r20	; 0x01
    1996:	d7 01       	movw	r26, r14
    1998:	16 96       	adiw	r26, 0x06	; 6
    199a:	ed 91       	ld	r30, X+
    199c:	fc 91       	ld	r31, X
    199e:	17 97       	sbiw	r26, 0x07	; 7
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	c7 01       	movw	r24, r14
    19a6:	09 95       	icall
    19a8:	e4 cf       	rjmp	.-56     	; 0x1972 <u8x8_cad_SendSequence+0x16>
    19aa:	fd 01       	movw	r30, r26
    19ac:	81 91       	ld	r24, Z+
    19ae:	8f 01       	movw	r16, r30
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	ae 01       	movw	r20, r28
    19b4:	4f 5f       	subi	r20, 0xFF	; 255
    19b6:	5f 4f       	sbci	r21, 0xFF	; 255
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	c7 01       	movw	r24, r14
    19bc:	0e 94 8e 0c 	call	0x191c	; 0x191c <u8x8_cad_SendData>
    19c0:	d8 cf       	rjmp	.-80     	; 0x1972 <u8x8_cad_SendSequence+0x16>
    19c2:	d7 01       	movw	r26, r14
    19c4:	16 96       	adiw	r26, 0x06	; 6
    19c6:	ed 91       	ld	r30, X+
    19c8:	fc 91       	ld	r31, X
    19ca:	17 97       	sbiw	r26, 0x07	; 7
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	c7 01       	movw	r24, r14
    19d4:	09 95       	icall
    19d6:	cd cf       	rjmp	.-102    	; 0x1972 <u8x8_cad_SendSequence+0x16>
    19d8:	fd 01       	movw	r30, r26
    19da:	41 91       	ld	r20, Z+
    19dc:	8f 01       	movw	r16, r30
    19de:	49 83       	std	Y+1, r20	; 0x01
    19e0:	69 e2       	ldi	r22, 0x29	; 41
    19e2:	c7 01       	movw	r24, r14
    19e4:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    19e8:	c4 cf       	rjmp	.-120    	; 0x1972 <u8x8_cad_SendSequence+0x16>
    19ea:	0f 90       	pop	r0
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	08 95       	ret

000019fa <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	8c 01       	movw	r16, r24
    1a08:	c6 2f       	mov	r28, r22
    1a0a:	d4 2f       	mov	r29, r20
    1a0c:	79 01       	movw	r14, r18
  switch(msg)
    1a0e:	66 31       	cpi	r22, 0x16	; 22
    1a10:	a1 f0       	breq	.+40     	; 0x1a3a <u8x8_cad_001+0x40>
    1a12:	28 f4       	brcc	.+10     	; 0x1a1e <u8x8_cad_001+0x24>
    1a14:	64 31       	cpi	r22, 0x14	; 20
    1a16:	e9 f0       	breq	.+58     	; 0x1a52 <u8x8_cad_001+0x58>
    1a18:	65 31       	cpi	r22, 0x15	; 21
    1a1a:	31 f0       	breq	.+12     	; 0x1a28 <u8x8_cad_001+0x2e>
    1a1c:	25 c0       	rjmp	.+74     	; 0x1a68 <u8x8_cad_001+0x6e>
    1a1e:	67 31       	cpi	r22, 0x17	; 23
    1a20:	a9 f0       	breq	.+42     	; 0x1a4c <u8x8_cad_001+0x52>
    1a22:	6a 31       	cpi	r22, 0x1A	; 26
    1a24:	08 f5       	brcc	.+66     	; 0x1a68 <u8x8_cad_001+0x6e>
    1a26:	15 c0       	rjmp	.+42     	; 0x1a52 <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1a2e:	6d 2f       	mov	r22, r29
    1a30:	c8 01       	movw	r24, r16
    1a32:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1a38:	18 c0       	rjmp	.+48     	; 0x1a6a <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1a40:	6d 2f       	mov	r22, r29
    1a42:	c8 01       	movw	r24, r16
    1a44:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1a52:	d8 01       	movw	r26, r16
    1a54:	18 96       	adiw	r26, 0x08	; 8
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	19 97       	sbiw	r26, 0x09	; 9
    1a5c:	97 01       	movw	r18, r14
    1a5e:	4d 2f       	mov	r20, r29
    1a60:	6c 2f       	mov	r22, r28
    1a62:	c8 01       	movw	r24, r16
    1a64:	09 95       	icall
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <u8x8_cad_001+0x70>
    default:
      return 0;
    1a68:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	08 95       	ret

00001a78 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1a78:	fc 01       	movw	r30, r24
    1a7a:	71 83       	std	Z+1, r23	; 0x01
    1a7c:	60 83       	st	Z, r22
    1a7e:	fb 01       	movw	r30, r22
    1a80:	22 89       	ldd	r18, Z+18	; 0x12
    1a82:	fc 01       	movw	r30, r24
    1a84:	24 8b       	std	Z+20, r18	; 0x14
    1a86:	08 95       	ret

00001a88 <u8x8_d_helper_display_init>:
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a90:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	68 e2       	ldi	r22, 0x28	; 40
    1a9a:	09 95       	icall
    1a9c:	ee 81       	ldd	r30, Y+6	; 0x06
    1a9e:	ff 81       	ldd	r31, Y+7	; 0x07
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	64 e1       	ldi	r22, 0x14	; 20
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	09 95       	icall
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	6b e4       	ldi	r22, 0x4B	; 75
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    1ab6:	e8 81       	ld	r30, Y
    1ab8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aba:	44 81       	ldd	r20, Z+4	; 0x04
    1abc:	69 e2       	ldi	r22, 0x29	; 41
    1abe:	ce 01       	movw	r24, r28
    1ac0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	6b e4       	ldi	r22, 0x4B	; 75
    1ac8:	ce 01       	movw	r24, r28
    1aca:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    1ace:	e8 81       	ld	r30, Y
    1ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad2:	44 81       	ldd	r20, Z+4	; 0x04
    1ad4:	69 e2       	ldi	r22, 0x29	; 41
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	6b e4       	ldi	r22, 0x4B	; 75
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    1ae6:	e8 81       	ld	r30, Y
    1ae8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aea:	45 81       	ldd	r20, Z+5	; 0x05
    1aec:	69 e2       	ldi	r22, 0x29	; 41
    1aee:	ce 01       	movw	r24, r28
    1af0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <u8x8_gpio_call>
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <u8x8_DrawTile>:
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <u8x8_DrawTile+0xa>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <u8x8_DrawTile+0xc>
    1b06:	1f 92       	push	r1
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	6c 83       	std	Y+4, r22	; 0x04
    1b0e:	4d 83       	std	Y+5, r20	; 0x05
    1b10:	2b 83       	std	Y+3, r18	; 0x03
    1b12:	1a 83       	std	Y+2, r17	; 0x02
    1b14:	09 83       	std	Y+1, r16	; 0x01
    1b16:	dc 01       	movw	r26, r24
    1b18:	14 96       	adiw	r26, 0x04	; 4
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	15 97       	sbiw	r26, 0x05	; 5
    1b20:	9e 01       	movw	r18, r28
    1b22:	2f 5f       	subi	r18, 0xFF	; 255
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	6f e0       	ldi	r22, 0x0F	; 15
    1b2a:	09 95       	icall
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	08 95       	ret

00001b40 <u8x8_SetupMemory>:
    1b40:	dc 01       	movw	r26, r24
    1b42:	14 96       	adiw	r26, 0x04	; 4
    1b44:	ed 91       	ld	r30, X+
    1b46:	fc 91       	ld	r31, X
    1b48:	15 97       	sbiw	r26, 0x05	; 5
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	69 e0       	ldi	r22, 0x09	; 9
    1b52:	09 95       	icall
    1b54:	08 95       	ret

00001b56 <u8x8_InitDisplay>:
    1b56:	dc 01       	movw	r26, r24
    1b58:	14 96       	adiw	r26, 0x04	; 4
    1b5a:	ed 91       	ld	r30, X+
    1b5c:	fc 91       	ld	r31, X
    1b5e:	15 97       	sbiw	r26, 0x05	; 5
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	6a e0       	ldi	r22, 0x0A	; 10
    1b68:	09 95       	icall
    1b6a:	08 95       	ret

00001b6c <u8x8_SetPowerSave>:
    1b6c:	46 2f       	mov	r20, r22
    1b6e:	dc 01       	movw	r26, r24
    1b70:	14 96       	adiw	r26, 0x04	; 4
    1b72:	ed 91       	ld	r30, X+
    1b74:	fc 91       	ld	r31, X
    1b76:	15 97       	sbiw	r26, 0x05	; 5
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	6b e0       	ldi	r22, 0x0B	; 11
    1b7e:	09 95       	icall
    1b80:	08 95       	ret

00001b82 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1b82:	dc 01       	movw	r26, r24
    1b84:	14 96       	adiw	r26, 0x04	; 4
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	15 97       	sbiw	r26, 0x05	; 5
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	60 e1       	ldi	r22, 0x10	; 16
    1b94:	09 95       	icall
    1b96:	08 95       	ret

00001b98 <u8x8_d_sh1106_64x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_sh1106_64x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	8c 01       	movw	r16, r24
    1ba6:	c4 2f       	mov	r28, r20
    1ba8:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    1baa:	6d 30       	cpi	r22, 0x0D	; 13
    1bac:	b9 f0       	breq	.+46     	; 0x1bdc <u8x8_d_sh1106_64x32_generic+0x44>
    1bae:	18 f4       	brcc	.+6      	; 0x1bb6 <u8x8_d_sh1106_64x32_generic+0x1e>
    1bb0:	6b 30       	cpi	r22, 0x0B	; 11
    1bb2:	31 f0       	breq	.+12     	; 0x1bc0 <u8x8_d_sh1106_64x32_generic+0x28>
    1bb4:	6e c0       	rjmp	.+220    	; 0x1c92 <u8x8_d_sh1106_64x32_generic+0xfa>
    1bb6:	6e 30       	cpi	r22, 0x0E	; 14
    1bb8:	69 f1       	breq	.+90     	; 0x1c14 <u8x8_d_sh1106_64x32_generic+0x7c>
    1bba:	6f 30       	cpi	r22, 0x0F	; 15
    1bbc:	d1 f1       	breq	.+116    	; 0x1c32 <u8x8_d_sh1106_64x32_generic+0x9a>
    1bbe:	69 c0       	rjmp	.+210    	; 0x1c92 <u8x8_d_sh1106_64x32_generic+0xfa>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    1bc0:	41 11       	cpse	r20, r1
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <u8x8_d_sh1106_64x32_generic+0x38>
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave0_seq);
    1bc4:	69 e3       	ldi	r22, 0x39	; 57
    1bc6:	71 e0       	ldi	r23, 0x01	; 1
    1bc8:	0e 94 ae 0c 	call	0x195c	; 0x195c <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	62 c0       	rjmp	.+196    	; 0x1c94 <u8x8_d_sh1106_64x32_generic+0xfc>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave0_seq);
      else
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave1_seq);
    1bd0:	64 e3       	ldi	r22, 0x34	; 52
    1bd2:	71 e0       	ldi	r23, 0x01	; 1
    1bd4:	0e 94 ae 0c 	call	0x195c	; 0x195c <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	5c c0       	rjmp	.+184    	; 0x1c94 <u8x8_d_sh1106_64x32_generic+0xfc>
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave0_seq);
      else
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1bdc:	41 11       	cpse	r20, r1
    1bde:	0d c0       	rjmp	.+26     	; 0x1bfa <u8x8_d_sh1106_64x32_generic+0x62>
      {
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_flip0_seq);
    1be0:	69 e2       	ldi	r22, 0x29	; 41
    1be2:	71 e0       	ldi	r23, 0x01	; 1
    1be4:	0e 94 ae 0c 	call	0x195c	; 0x195c <u8x8_cad_SendSequence>
        u8x8->x_offset = u8x8->display_info->default_x_offset;
    1be8:	d8 01       	movw	r26, r16
    1bea:	ed 91       	ld	r30, X+
    1bec:	fc 91       	ld	r31, X
    1bee:	11 97       	sbiw	r26, 0x01	; 1
    1bf0:	82 89       	ldd	r24, Z+18	; 0x12
    1bf2:	54 96       	adiw	r26, 0x14	; 20
    1bf4:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	4d c0       	rjmp	.+154    	; 0x1c94 <u8x8_d_sh1106_64x32_generic+0xfc>
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_flip0_seq);
        u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_flip1_seq);
    1bfa:	6e e1       	ldi	r22, 0x1E	; 30
    1bfc:	71 e0       	ldi	r23, 0x01	; 1
    1bfe:	0e 94 ae 0c 	call	0x195c	; 0x195c <u8x8_cad_SendSequence>
        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1c02:	d8 01       	movw	r26, r16
    1c04:	ed 91       	ld	r30, X+
    1c06:	fc 91       	ld	r31, X
    1c08:	11 97       	sbiw	r26, 0x01	; 1
    1c0a:	83 89       	ldd	r24, Z+19	; 0x13
    1c0c:	54 96       	adiw	r26, 0x14	; 20
    1c0e:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	40 c0       	rjmp	.+128    	; 0x1c94 <u8x8_d_sh1106_64x32_generic+0xfc>
        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1c14:	0e 94 98 0c 	call	0x1930	; 0x1930 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1c18:	61 e8       	ldi	r22, 0x81	; 129
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    1c20:	6c 2f       	mov	r22, r28
    1c22:	c8 01       	movw	r24, r16
    1c24:	0e 94 83 0c 	call	0x1906	; 0x1906 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    1c30:	31 c0       	rjmp	.+98     	; 0x1c94 <u8x8_d_sh1106_64x32_generic+0xfc>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1c32:	0e 94 98 0c 	call	0x1930	; 0x1930 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    1c36:	f7 01       	movw	r30, r14
    1c38:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    1c3a:	dd 0f       	add	r29, r29
    1c3c:	dd 0f       	add	r29, r29
    1c3e:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    1c40:	d8 01       	movw	r26, r16
    1c42:	54 96       	adiw	r26, 0x14	; 20
    1c44:	8c 91       	ld	r24, X
    1c46:	d8 0f       	add	r29, r24
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1c48:	6d 2f       	mov	r22, r29
    1c4a:	62 95       	swap	r22
    1c4c:	6f 70       	andi	r22, 0x0F	; 15
    1c4e:	60 61       	ori	r22, 0x10	; 16
    1c50:	c8 01       	movw	r24, r16
    1c52:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    1c56:	6d 2f       	mov	r22, r29
    1c58:	6f 70       	andi	r22, 0x0F	; 15
    1c5a:	c8 01       	movw	r24, r16
    1c5c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    1c60:	f7 01       	movw	r30, r14
    1c62:	64 81       	ldd	r22, Z+4	; 0x04
    1c64:	60 6b       	ori	r22, 0xB0	; 176
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
    1c6c:	d7 01       	movw	r26, r14
    1c6e:	12 96       	adiw	r26, 0x02	; 2
    1c70:	6c 91       	ld	r22, X
    1c72:	12 97       	sbiw	r26, 0x02	; 2
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    1c74:	4d 91       	ld	r20, X+
    1c76:	5c 91       	ld	r21, X
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    1c78:	66 0f       	add	r22, r22
    1c7a:	66 0f       	add	r22, r22
    1c7c:	66 0f       	add	r22, r22
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 8e 0c 	call	0x191c	; 0x191c <u8x8_cad_SendData>
	arg_int--;
    1c84:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    1c86:	91 f7       	brne	.-28     	; 0x1c6c <u8x8_d_sh1106_64x32_generic+0xd4>
      
      u8x8_cad_EndTransfer(u8x8);
    1c88:	c8 01       	movw	r24, r16
    1c8a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <u8x8_d_sh1106_64x32_generic+0xfc>
    default:
      return 0;
    1c92:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	08 95       	ret

00001ca2 <u8x8_d_sh1106_64x32>:
  /* pixel_width = */ 64,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_sh1106_64x32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
    1ca8:	69 30       	cpi	r22, 0x09	; 9
    1caa:	31 f4       	brne	.+12     	; 0x1cb8 <u8x8_d_sh1106_64x32+0x16>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_64x32_display_info);
    1cac:	66 e0       	ldi	r22, 0x06	; 6
    1cae:	71 e0       	ldi	r23, 0x01	; 1
    1cb0:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <u8x8_d_helper_display_setup_memory>
      return 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0d c0       	rjmp	.+26     	; 0x1cd2 <u8x8_d_sh1106_64x32+0x30>
    }
    else if ( msg == U8X8_MSG_DISPLAY_INIT )
    1cb8:	6a 30       	cpi	r22, 0x0A	; 10
    1cba:	49 f4       	brne	.+18     	; 0x1cce <u8x8_d_sh1106_64x32+0x2c>
    {
      u8x8_d_helper_display_init(u8x8);
    1cbc:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_init_seq);    
    1cc0:	6e e3       	ldi	r22, 0x3E	; 62
    1cc2:	71 e0       	ldi	r23, 0x01	; 1
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	0e 94 ae 0c 	call	0x195c	; 0x195c <u8x8_cad_SendSequence>
      return 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <u8x8_d_sh1106_64x32+0x30>
    }
    return u8x8_d_sh1106_64x32_generic(u8x8, msg, arg_int, arg_ptr);
    1cce:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <u8x8_d_sh1106_64x32_generic>
}
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1cd8:	dc 01       	movw	r26, r24
    1cda:	1a 96       	adiw	r26, 0x0a	; 10
    1cdc:	ed 91       	ld	r30, X+
    1cde:	fc 91       	ld	r31, X
    1ce0:	1b 97       	sbiw	r26, 0x0b	; 11
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	09 95       	icall
    1ce8:	08 95       	ret

00001cea <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	08 95       	ret

00001cee <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1cee:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1cf0:	11 82       	std	Z+1, r1	; 0x01
    1cf2:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1cf4:	85 e7       	ldi	r24, 0x75	; 117
    1cf6:	9e e0       	ldi	r25, 0x0E	; 14
    1cf8:	95 83       	std	Z+5, r25	; 0x05
    1cfa:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1cfc:	97 83       	std	Z+7, r25	; 0x07
    1cfe:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1d04:	93 87       	std	Z+11, r25	; 0x0b
    1d06:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1d08:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1d0a:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1d0c:	14 86       	std	Z+12, r1	; 0x0c
    1d0e:	15 86       	std	Z+13, r1	; 0x0d
    1d10:	16 86       	std	Z+14, r1	; 0x0e
    1d12:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1d18:	82 8f       	std	Z+26, r24	; 0x1a
    1d1a:	08 95       	ret

00001d1c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
    1d32:	5b 01       	movw	r10, r22
    1d34:	6a 01       	movw	r12, r20
    1d36:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1d38:	0e 94 77 0e 	call	0x1cee	; 0x1cee <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1d3c:	bd 82       	std	Y+5, r11	; 0x05
    1d3e:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1d40:	df 82       	std	Y+7, r13	; 0x07
    1d42:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1d44:	f9 86       	std	Y+9, r15	; 0x09
    1d46:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1d48:	1b 87       	std	Y+11, r17	; 0x0b
    1d4a:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <u8x8_SetupMemory>
}
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	08 95       	ret

00001d68 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1d68:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1d72:	08 95       	ret

00001d74 <i2c_start_wait>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	94 ea       	ldi	r25, 0xA4	; 164
    1d7a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d7e:	4f ef       	ldi	r20, 0xFF	; 255
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <i2c_start_wait+0x18>
    1d88:	b9 01       	movw	r22, r18
    1d8a:	a8 01       	movw	r20, r16
    1d8c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d90:	99 23       	and	r25, r25
    1d92:	54 f0       	brlt	.+20     	; 0x1da8 <i2c_start_wait+0x34>
    1d94:	8a 01       	movw	r16, r20
    1d96:	9b 01       	movw	r18, r22
    1d98:	01 50       	subi	r16, 0x01	; 1
    1d9a:	11 09       	sbc	r17, r1
    1d9c:	21 09       	sbc	r18, r1
    1d9e:	31 09       	sbc	r19, r1
    1da0:	45 2b       	or	r20, r21
    1da2:	46 2b       	or	r20, r22
    1da4:	47 2b       	or	r20, r23
    1da6:	81 f7       	brne	.-32     	; 0x1d88 <i2c_start_wait+0x14>
    1da8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1dac:	98 7f       	andi	r25, 0xF8	; 248
    1dae:	98 30       	cpi	r25, 0x08	; 8
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <i2c_start_wait+0x42>
    1db2:	90 31       	cpi	r25, 0x10	; 16
    1db4:	09 f7       	brne	.-62     	; 0x1d78 <i2c_start_wait+0x4>
    1db6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1dba:	94 e8       	ldi	r25, 0x84	; 132
    1dbc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1dc0:	4f ef       	ldi	r20, 0xFF	; 255
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <i2c_start_wait+0x5a>
    1dca:	b9 01       	movw	r22, r18
    1dcc:	a8 01       	movw	r20, r16
    1dce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1dd2:	99 23       	and	r25, r25
    1dd4:	54 f0       	brlt	.+20     	; 0x1dea <i2c_start_wait+0x76>
    1dd6:	8a 01       	movw	r16, r20
    1dd8:	9b 01       	movw	r18, r22
    1dda:	01 50       	subi	r16, 0x01	; 1
    1ddc:	11 09       	sbc	r17, r1
    1dde:	21 09       	sbc	r18, r1
    1de0:	31 09       	sbc	r19, r1
    1de2:	45 2b       	or	r20, r21
    1de4:	46 2b       	or	r20, r22
    1de6:	47 2b       	or	r20, r23
    1de8:	81 f7       	brne	.-32     	; 0x1dca <i2c_start_wait+0x56>
    1dea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1dee:	98 7f       	andi	r25, 0xF8	; 248
    1df0:	90 32       	cpi	r25, 0x20	; 32
    1df2:	11 f0       	breq	.+4      	; 0x1df8 <i2c_start_wait+0x84>
    1df4:	98 35       	cpi	r25, 0x58	; 88
    1df6:	c9 f4       	brne	.+50     	; 0x1e2a <i2c_start_wait+0xb6>
    1df8:	94 e9       	ldi	r25, 0x94	; 148
    1dfa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1dfe:	4f ef       	ldi	r20, 0xFF	; 255
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <i2c_start_wait+0x98>
    1e08:	b9 01       	movw	r22, r18
    1e0a:	a8 01       	movw	r20, r16
    1e0c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e10:	94 ff       	sbrs	r25, 4
    1e12:	b2 cf       	rjmp	.-156    	; 0x1d78 <i2c_start_wait+0x4>
    1e14:	8a 01       	movw	r16, r20
    1e16:	9b 01       	movw	r18, r22
    1e18:	01 50       	subi	r16, 0x01	; 1
    1e1a:	11 09       	sbc	r17, r1
    1e1c:	21 09       	sbc	r18, r1
    1e1e:	31 09       	sbc	r19, r1
    1e20:	45 2b       	or	r20, r21
    1e22:	46 2b       	or	r20, r22
    1e24:	47 2b       	or	r20, r23
    1e26:	81 f7       	brne	.-32     	; 0x1e08 <i2c_start_wait+0x94>
    1e28:	a7 cf       	rjmp	.-178    	; 0x1d78 <i2c_start_wait+0x4>
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1e30:	84 e9       	ldi	r24, 0x94	; 148
    1e32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e0       	ldi	r26, 0x00	; 0
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <i2c_stop+0x14>
    1e40:	db 01       	movw	r26, r22
    1e42:	ca 01       	movw	r24, r20
    1e44:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e48:	24 ff       	sbrs	r18, 4
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <i2c_stop+0x30>
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	bd 01       	movw	r22, r26
    1e50:	41 50       	subi	r20, 0x01	; 1
    1e52:	51 09       	sbc	r21, r1
    1e54:	61 09       	sbc	r22, r1
    1e56:	71 09       	sbc	r23, r1
    1e58:	89 2b       	or	r24, r25
    1e5a:	8a 2b       	or	r24, r26
    1e5c:	8b 2b       	or	r24, r27
    1e5e:	81 f7       	brne	.-32     	; 0x1e40 <i2c_stop+0x10>
    1e60:	08 95       	ret

00001e62 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1e62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e66:	84 e8       	ldi	r24, 0x84	; 132
    1e68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <i2c_write+0x18>
    1e76:	db 01       	movw	r26, r22
    1e78:	ca 01       	movw	r24, r20
    1e7a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e7e:	22 23       	and	r18, r18
    1e80:	64 f0       	brlt	.+24     	; 0x1e9a <i2c_write+0x38>
    1e82:	ac 01       	movw	r20, r24
    1e84:	bd 01       	movw	r22, r26
    1e86:	41 50       	subi	r20, 0x01	; 1
    1e88:	51 09       	sbc	r21, r1
    1e8a:	61 09       	sbc	r22, r1
    1e8c:	71 09       	sbc	r23, r1
    1e8e:	89 2b       	or	r24, r25
    1e90:	8a 2b       	or	r24, r26
    1e92:	8b 2b       	or	r24, r27
    1e94:	81 f7       	brne	.-32     	; 0x1e76 <i2c_write+0x14>
    1e96:	db 01       	movw	r26, r22
    1e98:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1e9a:	89 2b       	or	r24, r25
    1e9c:	8a 2b       	or	r24, r26
    1e9e:	8b 2b       	or	r24, r27
    1ea0:	39 f0       	breq	.+14     	; 0x1eb0 <i2c_write+0x4e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1ea2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1ea6:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1ea8:	88 32       	cpi	r24, 0x28	; 40
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <i2c_write+0x52>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
    1eb4:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    1eb6:	08 95       	ret

00001eb8 <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
	uint8_t *data;
	switch(msg){
    1ebe:	68 31       	cpi	r22, 0x18	; 24
    1ec0:	f9 f0       	breq	.+62     	; 0x1f00 <u8x8_byte_avr_hw_i2c+0x48>
    1ec2:	28 f4       	brcc	.+10     	; 0x1ece <u8x8_byte_avr_hw_i2c+0x16>
    1ec4:	64 31       	cpi	r22, 0x14	; 20
    1ec6:	c1 f0       	breq	.+48     	; 0x1ef8 <u8x8_byte_avr_hw_i2c+0x40>
    1ec8:	67 31       	cpi	r22, 0x17	; 23
    1eca:	81 f0       	breq	.+32     	; 0x1eec <u8x8_byte_avr_hw_i2c+0x34>
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <u8x8_byte_avr_hw_i2c+0x1e>
    1ece:	69 31       	cpi	r22, 0x19	; 25
    1ed0:	e9 f0       	breq	.+58     	; 0x1f0c <u8x8_byte_avr_hw_i2c+0x54>
    1ed2:	60 32       	cpi	r22, 0x20	; 32
    1ed4:	f9 f0       	breq	.+62     	; 0x1f14 <u8x8_byte_avr_hw_i2c+0x5c>
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
		default:
			return 0;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	1e c0       	rjmp	.+60     	; 0x1f16 <u8x8_byte_avr_hw_i2c+0x5e>
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
    1eda:	89 01       	movw	r16, r18
    1edc:	0f 5f       	subi	r16, 0xFF	; 255
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	80 81       	ld	r24, Z
    1ee4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1ee8:	4c 2f       	mov	r20, r28
				i2c_write(*data++);
    1eea:	98 01       	movw	r18, r16
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1eec:	cf ef       	ldi	r28, 0xFF	; 255
    1eee:	c4 0f       	add	r28, r20
    1ef0:	41 11       	cpse	r20, r1
    1ef2:	f3 cf       	rjmp	.-26     	; 0x1eda <u8x8_byte_avr_hw_i2c+0x22>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <u8x8_byte_avr_hw_i2c+0x5e>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    1ef8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    1efe:	0b c0       	rjmp	.+22     	; 0x1f16 <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    1f00:	fc 01       	movw	r30, r24
    1f02:	86 89       	ldd	r24, Z+22	; 0x16
    1f04:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    1f0c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <u8x8_byte_avr_hw_i2c+0x5e>
		default:
			return 0;
	}
	return 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
}
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	08 95       	ret

00001f1e <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    1f1e:	6a 32       	cpi	r22, 0x2A	; 42
    1f20:	11 f1       	breq	.+68     	; 0x1f66 <u8x8_avr_delay+0x48>
    1f22:	18 f4       	brcc	.+6      	; 0x1f2a <u8x8_avr_delay+0xc>
    1f24:	69 32       	cpi	r22, 0x29	; 41
    1f26:	61 f1       	breq	.+88     	; 0x1f80 <u8x8_avr_delay+0x62>
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <u8x8_avr_delay+0x14>
    1f2a:	6b 32       	cpi	r22, 0x2B	; 43
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <u8x8_avr_delay+0x18>
    1f2e:	6c 32       	cpi	r22, 0x2C	; 44
    1f30:	69 f1       	breq	.+90     	; 0x1f8c <u8x8_avr_delay+0x6e>
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    1f36:	24 2f       	mov	r18, r20
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	a4 e6       	ldi	r26, 0x64	; 100
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	0e 94 23 10 	call	0x2046	; 0x2046 <__umulhisi3>
    1f42:	24 ef       	ldi	r18, 0xF4	; 244
    1f44:	31 e0       	ldi	r19, 0x01	; 1
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	0e 94 01 10 	call	0x2002	; 0x2002 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    1f4e:	23 32       	cpi	r18, 0x23	; 35
    1f50:	f8 f4       	brcc	.+62     	; 0x1f90 <u8x8_avr_delay+0x72>
				break;

			__asm__ __volatile__ (
    1f52:	82 2f       	mov	r24, r18
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <u8x8_avr_delay+0x36>
			break;
		default:
			return 0;
	}

	return 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    1f5a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f5c:	9a e1       	ldi	r25, 0x1A	; 26
    1f5e:	9a 95       	dec	r25
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <u8x8_avr_delay+0x40>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <u8x8_avr_delay+0x46>
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    1f64:	48 2f       	mov	r20, r24
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	84 0f       	add	r24, r20
    1f6a:	41 11       	cpse	r20, r1
    1f6c:	f7 cf       	rjmp	.-18     	; 0x1f5c <u8x8_avr_delay+0x3e>
			break;
		default:
			return 0;
	}

	return 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f72:	ef ec       	ldi	r30, 0xCF	; 207
    1f74:	f7 e0       	ldi	r31, 0x07	; 7
    1f76:	31 97       	sbiw	r30, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <u8x8_avr_delay+0x58>
    1f7a:	00 c0       	rjmp	.+0      	; 0x1f7c <u8x8_avr_delay+0x5e>
    1f7c:	00 00       	nop
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	84 0f       	add	r24, r20
    1f84:	41 11       	cpse	r20, r1
    1f86:	f5 cf       	rjmp	.-22     	; 0x1f72 <u8x8_avr_delay+0x54>
			break;
		default:
			return 0;
	}

	return 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	08 95       	ret
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	08 95       	ret
    1f90:	81 e0       	ldi	r24, 0x01	; 1
}
    1f92:	08 95       	ret

00001f94 <main>:

int main (void)
{
	//u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
	//u8g2_Setup_ssd1306_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
	u8g2_Setup_sh1106_64x32_1(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    1f94:	2f e8       	ldi	r18, 0x8F	; 143
    1f96:	3f e0       	ldi	r19, 0x0F	; 15
    1f98:	4c e5       	ldi	r20, 0x5C	; 92
    1f9a:	5f e0       	ldi	r21, 0x0F	; 15
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	71 e0       	ldi	r23, 0x01	; 1
    1fa0:	88 ec       	ldi	r24, 0xC8	; 200
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 72 05 	call	0xae4	; 0xae4 <u8g2_Setup_sh1106_64x32_1>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    1fa8:	8c e3       	ldi	r24, 0x3C	; 60
    1faa:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	91 e0       	ldi	r25, 0x01	; 1
    1fbc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <u8x8_SetPowerSave>

	
	u8g2_ClearBuffer(&u8g2);
    1fc0:	88 ec       	ldi	r24, 0xC8	; 200
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	0e 94 4b 05 	call	0xa96	; 0xa96 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_t0_14b_tf);
    1fc8:	68 e6       	ldi	r22, 0x68	; 104
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	0e 94 ae 09 	call	0x135c	; 0x135c <u8g2_SetFont>
	u8g2_SetFontRefHeightText(&u8g2);
    1fd4:	88 ec       	ldi	r24, 0xC8	; 200
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 97 09 	call	0x132e	; 0x132e <u8g2_SetFontRefHeightText>
	u8g2_SetFontPosTop(&u8g2);
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	0e 94 a6 09 	call	0x134c	; 0x134c <u8g2_SetFontPosTop>
	u8g2_DrawStr(&u8g2, 0, 0, "Bin Picking Robot");
    1fe4:	25 e7       	ldi	r18, 0x75	; 117
    1fe6:	31 e0       	ldi	r19, 0x01	; 1
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	0e 94 49 09 	call	0x1292	; 0x1292 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
    1ff8:	88 ec       	ldi	r24, 0xC8	; 200
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 61 05 	call	0xac2	; 0xac2 <u8g2_SendBuffer>
    2000:	ff cf       	rjmp	.-2      	; 0x2000 <main+0x6c>

00002002 <__udivmodsi4>:
    2002:	a1 e2       	ldi	r26, 0x21	; 33
    2004:	1a 2e       	mov	r1, r26
    2006:	aa 1b       	sub	r26, r26
    2008:	bb 1b       	sub	r27, r27
    200a:	fd 01       	movw	r30, r26
    200c:	0d c0       	rjmp	.+26     	; 0x2028 <__udivmodsi4_ep>

0000200e <__udivmodsi4_loop>:
    200e:	aa 1f       	adc	r26, r26
    2010:	bb 1f       	adc	r27, r27
    2012:	ee 1f       	adc	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	a2 17       	cp	r26, r18
    2018:	b3 07       	cpc	r27, r19
    201a:	e4 07       	cpc	r30, r20
    201c:	f5 07       	cpc	r31, r21
    201e:	20 f0       	brcs	.+8      	; 0x2028 <__udivmodsi4_ep>
    2020:	a2 1b       	sub	r26, r18
    2022:	b3 0b       	sbc	r27, r19
    2024:	e4 0b       	sbc	r30, r20
    2026:	f5 0b       	sbc	r31, r21

00002028 <__udivmodsi4_ep>:
    2028:	66 1f       	adc	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	1a 94       	dec	r1
    2032:	69 f7       	brne	.-38     	; 0x200e <__udivmodsi4_loop>
    2034:	60 95       	com	r22
    2036:	70 95       	com	r23
    2038:	80 95       	com	r24
    203a:	90 95       	com	r25
    203c:	9b 01       	movw	r18, r22
    203e:	ac 01       	movw	r20, r24
    2040:	bd 01       	movw	r22, r26
    2042:	cf 01       	movw	r24, r30
    2044:	08 95       	ret

00002046 <__umulhisi3>:
    2046:	a2 9f       	mul	r26, r18
    2048:	b0 01       	movw	r22, r0
    204a:	b3 9f       	mul	r27, r19
    204c:	c0 01       	movw	r24, r0
    204e:	a3 9f       	mul	r26, r19
    2050:	70 0d       	add	r23, r0
    2052:	81 1d       	adc	r24, r1
    2054:	11 24       	eor	r1, r1
    2056:	91 1d       	adc	r25, r1
    2058:	b2 9f       	mul	r27, r18
    205a:	70 0d       	add	r23, r0
    205c:	81 1d       	adc	r24, r1
    205e:	11 24       	eor	r1, r1
    2060:	91 1d       	adc	r25, r1
    2062:	08 95       	ret

00002064 <memset>:
    2064:	dc 01       	movw	r26, r24
    2066:	01 c0       	rjmp	.+2      	; 0x206a <memset+0x6>
    2068:	6d 93       	st	X+, r22
    206a:	41 50       	subi	r20, 0x01	; 1
    206c:	50 40       	sbci	r21, 0x00	; 0
    206e:	e0 f7       	brcc	.-8      	; 0x2068 <memset+0x4>
    2070:	08 95       	ret

00002072 <_exit>:
    2072:	f8 94       	cli

00002074 <__stop_program>:
    2074:	ff cf       	rjmp	.-2      	; 0x2074 <__stop_program>
