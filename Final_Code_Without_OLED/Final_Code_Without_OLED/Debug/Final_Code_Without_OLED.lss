
Final_Code_Without_OLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a47  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041d  00000000  00000000  00001581  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000456  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b7  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9e:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gripper_setup>:

volatile uint8_t buttonPressed = 0; // Variable to count button presses

void gripper_setup() {
	// Set STEP_PIN and DIR_PIN as output
	DDRD |= (1 << STEP_PIN) | (1 << DIR_PIN);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	84 61       	ori	r24, 0x14	; 20
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <gripper_opening>:
}

void gripper_opening() {
	// Set direction to HIGH
	PORTD |= (1 << DIR_PIN);
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	8b b9       	out	0x0b, r24	; 11
	
	// Make 500 pulses (half cycle rotation)
	for (int x = 0; x < steps_to_move; x++) {
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	14 c0       	rjmp	.+40     	; 0xe2 <gripper_opening+0x34>
		PORTD |= (1 << STEP_PIN);  // Set STEP_PIN HIGH
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f e6       	ldi	r24, 0x6F	; 111
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <gripper_opening+0x16>
  c8:	00 c0       	rjmp	.+0      	; 0xca <gripper_opening+0x1c>
  ca:	00 00       	nop
		_delay_us(220);           // Wait 220 microseconds
		PORTD &= ~(1 << STEP_PIN); // Set STEP_PIN LOW
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	8f e6       	ldi	r24, 0x6F	; 111
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <gripper_opening+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <gripper_opening+0x2e>
  dc:	00 00       	nop
void gripper_opening() {
	// Set direction to HIGH
	PORTD |= (1 << DIR_PIN);
	
	// Make 500 pulses (half cycle rotation)
	for (int x = 0; x < steps_to_move; x++) {
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	28 17       	cp	r18, r24
  ec:	39 07       	cpc	r19, r25
  ee:	2c f3       	brlt	.-54     	; 0xba <gripper_opening+0xc>
		PORTD |= (1 << STEP_PIN);  // Set STEP_PIN HIGH
		_delay_us(220);           // Wait 220 microseconds
		PORTD &= ~(1 << STEP_PIN); // Set STEP_PIN LOW
		_delay_us(220);           // Wait 220 microseconds
	}
}
  f0:	08 95       	ret

000000f2 <gripper_closing>:

void gripper_closing() {
	// Set direction to LOW
	PORTD &= ~(1 << DIR_PIN);
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	8f 7e       	andi	r24, 0xEF	; 239
  f6:	8b b9       	out	0x0b, r24	; 11
	
	// Make 500 pulses (half cycle rotation)
	for (int x = 0; x < steps_to_move; x++) {
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	14 c0       	rjmp	.+40     	; 0x126 <gripper_closing+0x34>
		PORTD |= (1 << STEP_PIN);  // Set STEP_PIN HIGH
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	84 60       	ori	r24, 0x04	; 4
 102:	8b b9       	out	0x0b, r24	; 11
 104:	8f e6       	ldi	r24, 0x6F	; 111
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <gripper_closing+0x16>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <gripper_closing+0x1c>
 10e:	00 00       	nop
		_delay_us(220);           // Wait 220 microseconds
		PORTD &= ~(1 << STEP_PIN); // Set STEP_PIN LOW
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	8b b9       	out	0x0b, r24	; 11
 116:	8f e6       	ldi	r24, 0x6F	; 111
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <gripper_closing+0x28>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <gripper_closing+0x2e>
 120:	00 00       	nop
void gripper_closing() {
	// Set direction to LOW
	PORTD &= ~(1 << DIR_PIN);
	
	// Make 500 pulses (half cycle rotation)
	for (int x = 0; x < steps_to_move; x++) {
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	28 17       	cp	r18, r24
 130:	39 07       	cpc	r19, r25
 132:	2c f3       	brlt	.-54     	; 0xfe <gripper_closing+0xc>
		PORTD |= (1 << STEP_PIN);  // Set STEP_PIN HIGH
		_delay_us(220);           // Wait 220 microseconds
		PORTD &= ~(1 << STEP_PIN); // Set STEP_PIN LOW
		_delay_us(220);           // Wait 220 microseconds
	}
}
 134:	08 95       	ret

00000136 <uartInit>:

void uartInit(void) {
	uint16_t ubrr_value = MYUBRR;
	UBRR0H = (ubrr_value >> 8);
 136:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = ubrr_value;
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);  // Enable RX, TX, and RX interrupt
 140:	88 e9       	ldi	r24, 0x98	; 152
 142:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);  // 8 data bits, 1 stop bit, no parity
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	DDRD |= (1<<PD1);  // PD1 (TXD) as output
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PD0);  // PD0 (RXD) as input
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	8a b9       	out	0x0a, r24	; 10
 158:	08 95       	ret

0000015a <btn_state>:
}

void btn_state() {
	while(1){
		if ((PIND & (1 << BUTTON_PIN)) != 0) { // Button pressed (PD3 reads as 0)
 15a:	4b 9b       	sbis	0x09, 3	; 9
 15c:	fe cf       	rjmp	.-4      	; 0x15a <btn_state>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	81 ee       	ldi	r24, 0xE1	; 225
 162:	94 e0       	ldi	r25, 0x04	; 4
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <btn_state+0xa>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <btn_state+0x14>
 16e:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			buttonPressed++;
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 17a:	08 95       	ret

0000017c <__vector_18>:
		}
	}
}


ISR(USART_RX_vect) {
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	char receivedChar = UDR0;  // Read the received character
 18e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	RxData[indx++] = receivedChar;  // Store the character in the buffer
 192:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <indx>
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9e 0f       	add	r25, r30
 19a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <indx>
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ec 5f       	subi	r30, 0xFC	; 252
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 83       	st	Z, r24

	if (indx >= sizeof(RxData)) {  // Reset index if buffer is full
 1a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <indx>
 1aa:	8a 30       	cpi	r24, 0x0A	; 10
 1ac:	10 f0       	brcs	.+4      	; 0x1b2 <__vector_18+0x36>
		indx = 0;
 1ae:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <indx>
	}
	RxData[indx] = '\0';  // Null-terminate the string
 1b2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <indx>
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ec 5f       	subi	r30, 0xFC	; 252
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	10 82       	st	Z, r1
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <main>:

int main(void) {
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	2a 97       	sbiw	r28, 0x0a	; 10
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
	gripper_setup();  // Set up Gripper
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <gripper_setup>
	uartInit();
 1e8:	0e 94 9b 00 	call	0x136	; 0x136 <uartInit>
	sei();  // Enable global interrupts
 1ec:	78 94       	sei

	while (1) {
		while(1){
			char temp[10];  // Temporary non-volatile char array
			strcpy(temp, (char*)RxData);  // Copy data from volatile char array to non-volatile array
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	71 e0       	ldi	r23, 0x01	; 1
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	0e 94 1d 01 	call	0x23a	; 0x23a <strcpy>
			// Check if the received string is not empty (receivedString != NULL equivalent)
			if (strlen(temp) > 0) {
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	88 23       	and	r24, r24
 1fe:	b9 f3       	breq	.-18     	; 0x1ee <main+0x1e>
				break;
			}
		}
		btn_state();
 200:	0e 94 ad 00 	call	0x15a	; 0x15a <btn_state>
		if (buttonPressed == 1)
 204:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	81 f4       	brne	.+32     	; 0x22c <main+0x5c>
		{
			gripper_opening();
 20c:	0e 94 57 00 	call	0xae	; 0xae <gripper_opening>
 210:	8f e9       	ldi	r24, 0x9F	; 159
 212:	9f e0       	ldi	r25, 0x0F	; 15
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x44>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x4a>
 21a:	00 00       	nop
			_delay_ms(1);
			btn_state();
 21c:	0e 94 ad 00 	call	0x15a	; 0x15a <btn_state>
			if (buttonPressed == 2)
 220:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	11 f4       	brne	.+4      	; 0x22c <main+0x5c>
			{
				gripper_closing();
 228:	0e 94 79 00 	call	0xf2	; 0xf2 <gripper_closing>
			}
		}

		if (buttonPressed == 2) {
 22c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	e9 f6       	brne	.-70     	; 0x1ee <main+0x1e>
			buttonPressed = 0; // Reset buttonPressed after showing "ON"
 234:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 238:	da cf       	rjmp	.-76     	; 0x1ee <main+0x1e>

0000023a <strcpy>:
 23a:	fb 01       	movw	r30, r22
 23c:	dc 01       	movw	r26, r24
 23e:	01 90       	ld	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	00 20       	and	r0, r0
 244:	e1 f7       	brne	.-8      	; 0x23e <strcpy+0x4>
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
